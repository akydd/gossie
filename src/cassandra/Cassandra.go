/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cassandra

import (
	"fmt"
	"github.com/apesternikov/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type ICassandra interface {
	/**
	 * Parameters:
	 *  - AuthRequest
	 */
	Login(auth_request *AuthenticationRequest) (authnx *AuthenticationException, authzx *AuthorizationException, err error)
	/**
	 * Parameters:
	 *  - Keyspace
	 */
	SetKeyspace(keyspace string) (ire *InvalidRequestException, err error)
	/**
	 * Get the Column or SuperColumn at the given column_path. If no value is present, NotFoundException is thrown. (This is
	 * the only method that can throw an exception under non-failure conditions.)
	 * 
	 * Parameters:
	 *  - Key
	 *  - ColumnPath
	 *  - ConsistencyLevel
	 */
	Get(key []byte, column_path *ColumnPath, consistency_level ConsistencyLevel) (retval487 *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Get the group of columns contained by column_parent (either a ColumnFamily name or a ColumnFamily/SuperColumn name
	 * pair) specified by the given SlicePredicate. If no matching values are found, an empty list is returned.
	 * 
	 * Parameters:
	 *  - Key
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	GetSlice(key []byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval488 []*ColumnOrSuperColumn, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * returns the number of columns matching <code>predicate</code> for a particular <code>key</code>,
	 * <code>ColumnFamily</code> and optionally <code>SuperColumn</code>.
	 * 
	 * Parameters:
	 *  - Key
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	GetCount(key []byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval489 int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Performs a get_slice for column_parent and predicate for the given keys in parallel.
	 * 
	 * Parameters:
	 *  - Keys
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	MultigetSlice(keys [][]byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval490 map[string][]*ColumnOrSuperColumn, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Perform a get_count in parallel on the given list<binary> keys. The return value maps keys to the count found.
	 * 
	 * Parameters:
	 *  - Keys
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	MultigetCount(keys [][]byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval491 map[string]int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * returns a subset of columns for a contiguous range of keys.
	 * 
	 * Parameters:
	 *  - ColumnParent
	 *  - Predicate
	 *  - RangeA1
	 *  - ConsistencyLevel
	 */
	GetRangeSlices(column_parent *ColumnParent, predicate *SlicePredicate, range_a1 *KeyRange, consistency_level ConsistencyLevel) (retval492 []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * returns a range of columns, wrapping to the next rows if necessary to collect max_results.
	 * 
	 * Parameters:
	 *  - ColumnFamily
	 *  - RangeA1
	 *  - StartColumn
	 *  - ConsistencyLevel
	 */
	GetPagedSlice(column_family string, range_a1 *KeyRange, start_column []byte, consistency_level ConsistencyLevel) (retval493 []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Returns the subset of columns specified in SlicePredicate for the rows matching the IndexClause
	 * @deprecated use get_range_slices instead with range.row_filter specified
	 * 
	 * Parameters:
	 *  - ColumnParent
	 *  - IndexClause
	 *  - ColumnPredicate
	 *  - ConsistencyLevel
	 */
	GetIndexedSlices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval494 []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Insert a Column at the given column_parent.column_family and optional column_parent.super_column.
	 * 
	 * Parameters:
	 *  - Key
	 *  - ColumnParent
	 *  - Column
	 *  - ConsistencyLevel
	 */
	Insert(key []byte, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Increment or decrement a counter.
	 * 
	 * Parameters:
	 *  - Key
	 *  - ColumnParent
	 *  - Column
	 *  - ConsistencyLevel
	 */
	Add(key []byte, column_parent *ColumnParent, column *CounterColumn, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note
	 * that all the values in column_path besides column_path.column_family are truly optional: you can remove the entire
	 * row by just specifying the ColumnFamily, or you can remove a SuperColumn or a single Column by specifying those levels too.
	 * 
	 * Parameters:
	 *  - Key
	 *  - ColumnPath
	 *  - Timestamp
	 *  - ConsistencyLevel
	 */
	Remove(key []byte, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Remove a counter at the specified location.
	 * Note that counters have limited support for deletes: if you remove a counter, you must wait to issue any following update
	 * until the delete has reached all the nodes and all of them have been fully compacted.
	 * 
	 * Parameters:
	 *  - Key
	 *  - Path
	 *  - ConsistencyLevel
	 */
	RemoveCounter(key []byte, path *ColumnPath, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 *   Mutate many columns or super columns for many row keys. See also: Mutation.
	 * 
	 *   mutation_map maps key to column family to a list of Mutation objects to take place at that scope.
	 * *
	 * 
	 * Parameters:
	 *  - MutationMap
	 *  - ConsistencyLevel
	 */
	BatchMutate(mutation_map map[string]map[string][]*Mutation, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 *   Atomically mutate many columns or super columns for many row keys. See also: Mutation.
	 * 
	 *   mutation_map maps key to column family to a list of Mutation objects to take place at that scope.
	 * *
	 * 
	 * Parameters:
	 *  - MutationMap
	 *  - ConsistencyLevel
	 */
	AtomicBatchMutate(mutation_map map[string]map[string][]*Mutation, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * Truncate will mark and entire column family as deleted.
	 * From the user's perspective a successful call to truncate will result complete data deletion from cfname.
	 * Internally, however, disk space will not be immediatily released, as with all deletes in cassandra, this one
	 * only marks the data as deleted.
	 * The operation succeeds only if all hosts in the cluster at available and will throw an UnavailableException if
	 * some hosts are down.
	 * 
	 * Parameters:
	 *  - Cfname
	 */
	Truncate(cfname string) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)
	/**
	 * for each schema version present in the cluster, returns a list of nodes at that version.
	 * hosts that do not respond will be under the key DatabaseDescriptor.INITIAL_VERSION.
	 * the cluster is all on the same version if the size of the map is 1.
	 */
	DescribeSchemaVersions() (retval502 map[string][]string, ire *InvalidRequestException, err error)
	/**
	 * list the defined keyspaces in this cluster
	 */
	DescribeKeyspaces() (retval503 []*KsDef, ire *InvalidRequestException, err error)
	/**
	 * get the cluster name
	 */
	DescribeClusterName() (retval504 string, err error)
	/**
	 * get the thrift api version
	 */
	DescribeVersion() (retval505 string, err error)
	/**
	 * get the token ring: a map of ranges to host addresses,
	 * represented as a set of TokenRange instead of a map from range
	 * to list of endpoints, because you can't use Thrift structs as
	 * map keys:
	 * https://issues.apache.org/jira/browse/THRIFT-162
	 * 
	 * for the same reason, we can't return a set here, even though
	 * order is neither important nor predictable.
	 * 
	 * Parameters:
	 *  - Keyspace
	 */
	DescribeRing(keyspace string) (retval506 []*TokenRange, ire *InvalidRequestException, err error)
	/**
	 * get the mapping between token->node ip
	 * without taking replication into consideration
	 * https://issues.apache.org/jira/browse/CASSANDRA-4092
	 */
	DescribeTokenMap() (retval507 map[string]string, ire *InvalidRequestException, err error)
	/**
	 * returns the partitioner used by this cluster
	 */
	DescribePartitioner() (retval508 string, err error)
	/**
	 * returns the snitch used by this cluster
	 */
	DescribeSnitch() (retval509 string, err error)
	/**
	 * describe specified keyspace
	 * 
	 * Parameters:
	 *  - Keyspace
	 */
	DescribeKeyspace(keyspace string) (retval510 *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err error)
	/**
	 * experimental API for hadoop/parallel query support.
	 * may change violently and without warning.
	 * 
	 * returns list of token strings such that first subrange is (list[0], list[1]],
	 * next is (list[1], list[2]], etc.
	 * 
	 * Parameters:
	 *  - CfName
	 *  - StartToken
	 *  - EndToken
	 *  - KeysPerSplit
	 */
	DescribeSplits(cfName string, start_token string, end_token string, keys_per_split int32) (retval511 []string, ire *InvalidRequestException, err error)
	/**
	 * Enables tracing for the next query in this connection and returns the UUID for that trace session
	 * The next query will be traced idependently of trace probability and the returned UUID can be used to query the trace keyspace
	 */
	TraceNextQuery() (retval512 []byte, err error)
	/**
	 * Parameters:
	 *  - CfName
	 *  - StartToken
	 *  - EndToken
	 *  - KeysPerSplit
	 */
	DescribeSplitsEx(cfName string, start_token string, end_token string, keys_per_split int32) (retval513 []*CfSplit, ire *InvalidRequestException, err error)
	/**
	 * adds a column family. returns the new schema id.
	 * 
	 * Parameters:
	 *  - CfDef
	 */
	SystemAddColumnFamily(cf_def *CfDef) (retval514 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)
	/**
	 * drops a column family. returns the new schema id.
	 * 
	 * Parameters:
	 *  - ColumnFamily
	 */
	SystemDropColumnFamily(column_family string) (retval515 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)
	/**
	 * adds a keyspace and any column families that are part of it. returns the new schema id.
	 * 
	 * Parameters:
	 *  - KsDef
	 */
	SystemAddKeyspace(ks_def *KsDef) (retval516 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)
	/**
	 * drops a keyspace and any column families that are part of it. returns the new schema id.
	 * 
	 * Parameters:
	 *  - Keyspace
	 */
	SystemDropKeyspace(keyspace string) (retval517 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)
	/**
	 * updates properties of a keyspace. returns the new schema id.
	 * 
	 * Parameters:
	 *  - KsDef
	 */
	SystemUpdateKeyspace(ks_def *KsDef) (retval518 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)
	/**
	 * updates properties of a column family. returns the new schema id.
	 * 
	 * Parameters:
	 *  - CfDef
	 */
	SystemUpdateColumnFamily(cf_def *CfDef) (retval519 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)
	/**
	 * Executes a CQL (Cassandra Query Language) statement and returns a
	 * CqlResult containing the results.
	 * 
	 * Parameters:
	 *  - Query
	 *  - Compression
	 */
	ExecuteCqlQuery(query []byte, compression Compression) (retval520 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error)
	/**
	 * Parameters:
	 *  - Query
	 *  - Compression
	 *  - Consistency
	 */
	ExecuteCql3Query(query []byte, compression Compression, consistency ConsistencyLevel) (retval521 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error)
	/**
	 * Prepare a CQL (Cassandra Query Language) statement by compiling and returning
	 * - the type of CQL statement
	 * - an id token of the compiled CQL stored on the server side.
	 * - a count of the discovered bound markers in the statement
	 * 
	 * Parameters:
	 *  - Query
	 *  - Compression
	 */
	PrepareCqlQuery(query []byte, compression Compression) (retval522 *CqlPreparedResult, ire *InvalidRequestException, err error)
	/**
	 * Parameters:
	 *  - Query
	 *  - Compression
	 */
	PrepareCql3Query(query []byte, compression Compression) (retval523 *CqlPreparedResult, ire *InvalidRequestException, err error)
	/**
	 * Executes a prepared CQL (Cassandra Query Language) statement by passing an id token and  a list of variables
	 * to bind and returns a CqlResult containing the results.
	 * 
	 * Parameters:
	 *  - ItemId
	 *  - Values
	 */
	ExecutePreparedCqlQuery(itemId int32, values [][]byte) (retval524 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error)
	/**
	 * Parameters:
	 *  - ItemId
	 *  - Values
	 *  - Consistency
	 */
	ExecutePreparedCql3Query(itemId int32, values [][]byte, consistency ConsistencyLevel) (retval525 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error)
	/**
	 * @deprecated This is now a no-op. Please use the CQL3 specific methods instead.
	 * 
	 * Parameters:
	 *  - Version
	 */
	SetCqlVersion(version string) (ire *InvalidRequestException, err error)
}

type CassandraClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCassandraClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CassandraClient {
	return &CassandraClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCassandraClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CassandraClient {
	return &CassandraClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

/**
 * Parameters:
 *  - AuthRequest
 */
func (p *CassandraClient) Login(auth_request *AuthenticationRequest) (authnx *AuthenticationException, authzx *AuthorizationException, err error) {
	err = p.SendLogin(auth_request)
	if err != nil {
		return
	}
	return p.RecvLogin()
}

func (p *CassandraClient) SendLogin(auth_request *AuthenticationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("login", thrift.CALL, p.SeqId)
	args528 := NewLoginArgs()
	args528.AuthRequest = auth_request
	err = args528.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvLogin() (authnx *AuthenticationException, authzx *AuthorizationException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error530 := thrift.NewTApplicationExceptionDefault()
		var error531 error
		error531, err = error530.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error531
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result529 := NewLoginResult()
	err = result529.Read(iprot)
	iprot.ReadMessageEnd()
	if result529.Authnx != nil {
		authnx = result529.Authnx
	}
	if result529.Authzx != nil {
		authzx = result529.Authzx
	}
	return
}

/**
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) SetKeyspace(keyspace string) (ire *InvalidRequestException, err error) {
	err = p.SendSetKeyspace(keyspace)
	if err != nil {
		return
	}
	return p.RecvSetKeyspace()
}

func (p *CassandraClient) SendSetKeyspace(keyspace string) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("set_keyspace", thrift.CALL, p.SeqId)
	args533 := NewSetKeyspaceArgs()
	args533.Keyspace = keyspace
	err = args533.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSetKeyspace() (ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error535 := thrift.NewTApplicationExceptionDefault()
		var error536 error
		error536, err = error535.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error536
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result534 := NewSetKeyspaceResult()
	err = result534.Read(iprot)
	iprot.ReadMessageEnd()
	if result534.Ire != nil {
		ire = result534.Ire
	}
	return
}

/**
 * Get the Column or SuperColumn at the given column_path. If no value is present, NotFoundException is thrown. (This is
 * the only method that can throw an exception under non-failure conditions.)
 * 
 * Parameters:
 *  - Key
 *  - ColumnPath
 *  - ConsistencyLevel
 */
func (p *CassandraClient) Get(key []byte, column_path *ColumnPath, consistency_level ConsistencyLevel) (retval537 *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendGet(key, column_path, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGet()
}

func (p *CassandraClient) SendGet(key []byte, column_path *ColumnPath, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
	args538 := NewGetArgs()
	args538.Key = key
	args538.ColumnPath = column_path
	args538.ConsistencyLevel = consistency_level
	err = args538.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGet() (value *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error540 := thrift.NewTApplicationExceptionDefault()
		var error541 error
		error541, err = error540.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error541
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result539 := NewGetResult()
	err = result539.Read(iprot)
	iprot.ReadMessageEnd()
	value = result539.Success
	if result539.Ire != nil {
		ire = result539.Ire
	}
	if result539.Nfe != nil {
		nfe = result539.Nfe
	}
	if result539.Ue != nil {
		ue = result539.Ue
	}
	if result539.Te != nil {
		te = result539.Te
	}
	return
}

/**
 * Get the group of columns contained by column_parent (either a ColumnFamily name or a ColumnFamily/SuperColumn name
 * pair) specified by the given SlicePredicate. If no matching values are found, an empty list is returned.
 * 
 * Parameters:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetSlice(key []byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval542 []*ColumnOrSuperColumn, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendGetSlice(key, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetSlice()
}

func (p *CassandraClient) SendGetSlice(key []byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_slice", thrift.CALL, p.SeqId)
	args543 := NewGetSliceArgs()
	args543.Key = key
	args543.ColumnParent = column_parent
	args543.Predicate = predicate
	args543.ConsistencyLevel = consistency_level
	err = args543.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetSlice() (value []*ColumnOrSuperColumn, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error545 := thrift.NewTApplicationExceptionDefault()
		var error546 error
		error546, err = error545.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error546
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result544 := NewGetSliceResult()
	err = result544.Read(iprot)
	iprot.ReadMessageEnd()
	value = result544.Success
	if result544.Ire != nil {
		ire = result544.Ire
	}
	if result544.Ue != nil {
		ue = result544.Ue
	}
	if result544.Te != nil {
		te = result544.Te
	}
	return
}

/**
 * returns the number of columns matching <code>predicate</code> for a particular <code>key</code>,
 * <code>ColumnFamily</code> and optionally <code>SuperColumn</code>.
 * 
 * Parameters:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetCount(key []byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval547 int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendGetCount(key, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetCount()
}

func (p *CassandraClient) SendGetCount(key []byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_count", thrift.CALL, p.SeqId)
	args548 := NewGetCountArgs()
	args548.Key = key
	args548.ColumnParent = column_parent
	args548.Predicate = predicate
	args548.ConsistencyLevel = consistency_level
	err = args548.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetCount() (value int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error550 := thrift.NewTApplicationExceptionDefault()
		var error551 error
		error551, err = error550.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error551
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result549 := NewGetCountResult()
	err = result549.Read(iprot)
	iprot.ReadMessageEnd()
	value = result549.Success
	if result549.Ire != nil {
		ire = result549.Ire
	}
	if result549.Ue != nil {
		ue = result549.Ue
	}
	if result549.Te != nil {
		te = result549.Te
	}
	return
}

/**
 * Performs a get_slice for column_parent and predicate for the given keys in parallel.
 * 
 * Parameters:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) MultigetSlice(keys [][]byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval552 map[string][]*ColumnOrSuperColumn, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendMultigetSlice(keys, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvMultigetSlice()
}

func (p *CassandraClient) SendMultigetSlice(keys [][]byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("multiget_slice", thrift.CALL, p.SeqId)
	args553 := NewMultigetSliceArgs()
	args553.Keys = keys
	args553.ColumnParent = column_parent
	args553.Predicate = predicate
	args553.ConsistencyLevel = consistency_level
	err = args553.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvMultigetSlice() (value map[string][]*ColumnOrSuperColumn, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error555 := thrift.NewTApplicationExceptionDefault()
		var error556 error
		error556, err = error555.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error556
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result554 := NewMultigetSliceResult()
	err = result554.Read(iprot)
	iprot.ReadMessageEnd()
	value = result554.Success
	if result554.Ire != nil {
		ire = result554.Ire
	}
	if result554.Ue != nil {
		ue = result554.Ue
	}
	if result554.Te != nil {
		te = result554.Te
	}
	return
}

/**
 * Perform a get_count in parallel on the given list<binary> keys. The return value maps keys to the count found.
 * 
 * Parameters:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) MultigetCount(keys [][]byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval557 map[string]int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendMultigetCount(keys, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvMultigetCount()
}

func (p *CassandraClient) SendMultigetCount(keys [][]byte, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("multiget_count", thrift.CALL, p.SeqId)
	args558 := NewMultigetCountArgs()
	args558.Keys = keys
	args558.ColumnParent = column_parent
	args558.Predicate = predicate
	args558.ConsistencyLevel = consistency_level
	err = args558.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvMultigetCount() (value map[string]int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error560 := thrift.NewTApplicationExceptionDefault()
		var error561 error
		error561, err = error560.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error561
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result559 := NewMultigetCountResult()
	err = result559.Read(iprot)
	iprot.ReadMessageEnd()
	value = result559.Success
	if result559.Ire != nil {
		ire = result559.Ire
	}
	if result559.Ue != nil {
		ue = result559.Ue
	}
	if result559.Te != nil {
		te = result559.Te
	}
	return
}

/**
 * returns a subset of columns for a contiguous range of keys.
 * 
 * Parameters:
 *  - ColumnParent
 *  - Predicate
 *  - RangeA1
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetRangeSlices(column_parent *ColumnParent, predicate *SlicePredicate, range_a1 *KeyRange, consistency_level ConsistencyLevel) (retval562 []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendGetRangeSlices(column_parent, predicate, range_a1, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetRangeSlices()
}

func (p *CassandraClient) SendGetRangeSlices(column_parent *ColumnParent, predicate *SlicePredicate, range_a1 *KeyRange, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_range_slices", thrift.CALL, p.SeqId)
	args563 := NewGetRangeSlicesArgs()
	args563.ColumnParent = column_parent
	args563.Predicate = predicate
	args563.RangeA1 = range_a1
	args563.ConsistencyLevel = consistency_level
	err = args563.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetRangeSlices() (value []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error565 := thrift.NewTApplicationExceptionDefault()
		var error566 error
		error566, err = error565.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error566
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result564 := NewGetRangeSlicesResult()
	err = result564.Read(iprot)
	iprot.ReadMessageEnd()
	value = result564.Success
	if result564.Ire != nil {
		ire = result564.Ire
	}
	if result564.Ue != nil {
		ue = result564.Ue
	}
	if result564.Te != nil {
		te = result564.Te
	}
	return
}

/**
 * returns a range of columns, wrapping to the next rows if necessary to collect max_results.
 * 
 * Parameters:
 *  - ColumnFamily
 *  - RangeA1
 *  - StartColumn
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetPagedSlice(column_family string, range_a1 *KeyRange, start_column []byte, consistency_level ConsistencyLevel) (retval567 []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendGetPagedSlice(column_family, range_a1, start_column, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetPagedSlice()
}

func (p *CassandraClient) SendGetPagedSlice(column_family string, range_a1 *KeyRange, start_column []byte, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_paged_slice", thrift.CALL, p.SeqId)
	args568 := NewGetPagedSliceArgs()
	args568.ColumnFamily = column_family
	args568.RangeA1 = range_a1
	args568.StartColumn = start_column
	args568.ConsistencyLevel = consistency_level
	err = args568.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetPagedSlice() (value []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error570 := thrift.NewTApplicationExceptionDefault()
		var error571 error
		error571, err = error570.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error571
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result569 := NewGetPagedSliceResult()
	err = result569.Read(iprot)
	iprot.ReadMessageEnd()
	value = result569.Success
	if result569.Ire != nil {
		ire = result569.Ire
	}
	if result569.Ue != nil {
		ue = result569.Ue
	}
	if result569.Te != nil {
		te = result569.Te
	}
	return
}

/**
 * Returns the subset of columns specified in SlicePredicate for the rows matching the IndexClause
 * @deprecated use get_range_slices instead with range.row_filter specified
 * 
 * Parameters:
 *  - ColumnParent
 *  - IndexClause
 *  - ColumnPredicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetIndexedSlices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval572 []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendGetIndexedSlices(column_parent, index_clause, column_predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetIndexedSlices()
}

func (p *CassandraClient) SendGetIndexedSlices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_indexed_slices", thrift.CALL, p.SeqId)
	args573 := NewGetIndexedSlicesArgs()
	args573.ColumnParent = column_parent
	args573.IndexClause = index_clause
	args573.ColumnPredicate = column_predicate
	args573.ConsistencyLevel = consistency_level
	err = args573.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetIndexedSlices() (value []*KeySlice, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error575 := thrift.NewTApplicationExceptionDefault()
		var error576 error
		error576, err = error575.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error576
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result574 := NewGetIndexedSlicesResult()
	err = result574.Read(iprot)
	iprot.ReadMessageEnd()
	value = result574.Success
	if result574.Ire != nil {
		ire = result574.Ire
	}
	if result574.Ue != nil {
		ue = result574.Ue
	}
	if result574.Te != nil {
		te = result574.Te
	}
	return
}

/**
 * Insert a Column at the given column_parent.column_family and optional column_parent.super_column.
 * 
 * Parameters:
 *  - Key
 *  - ColumnParent
 *  - Column
 *  - ConsistencyLevel
 */
func (p *CassandraClient) Insert(key []byte, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendInsert(key, column_parent, column, consistency_level)
	if err != nil {
		return
	}
	return p.RecvInsert()
}

func (p *CassandraClient) SendInsert(key []byte, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("insert", thrift.CALL, p.SeqId)
	args578 := NewInsertArgs()
	args578.Key = key
	args578.ColumnParent = column_parent
	args578.Column = column
	args578.ConsistencyLevel = consistency_level
	err = args578.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvInsert() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error580 := thrift.NewTApplicationExceptionDefault()
		var error581 error
		error581, err = error580.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error581
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result579 := NewInsertResult()
	err = result579.Read(iprot)
	iprot.ReadMessageEnd()
	if result579.Ire != nil {
		ire = result579.Ire
	}
	if result579.Ue != nil {
		ue = result579.Ue
	}
	if result579.Te != nil {
		te = result579.Te
	}
	return
}

/**
 * Increment or decrement a counter.
 * 
 * Parameters:
 *  - Key
 *  - ColumnParent
 *  - Column
 *  - ConsistencyLevel
 */
func (p *CassandraClient) Add(key []byte, column_parent *ColumnParent, column *CounterColumn, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendAdd(key, column_parent, column, consistency_level)
	if err != nil {
		return
	}
	return p.RecvAdd()
}

func (p *CassandraClient) SendAdd(key []byte, column_parent *ColumnParent, column *CounterColumn, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("add", thrift.CALL, p.SeqId)
	args583 := NewAddArgs()
	args583.Key = key
	args583.ColumnParent = column_parent
	args583.Column = column
	args583.ConsistencyLevel = consistency_level
	err = args583.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvAdd() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error585 := thrift.NewTApplicationExceptionDefault()
		var error586 error
		error586, err = error585.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error586
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result584 := NewAddResult()
	err = result584.Read(iprot)
	iprot.ReadMessageEnd()
	if result584.Ire != nil {
		ire = result584.Ire
	}
	if result584.Ue != nil {
		ue = result584.Ue
	}
	if result584.Te != nil {
		te = result584.Te
	}
	return
}

/**
 * Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note
 * that all the values in column_path besides column_path.column_family are truly optional: you can remove the entire
 * row by just specifying the ColumnFamily, or you can remove a SuperColumn or a single Column by specifying those levels too.
 * 
 * Parameters:
 *  - Key
 *  - ColumnPath
 *  - Timestamp
 *  - ConsistencyLevel
 */
func (p *CassandraClient) Remove(key []byte, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendRemove(key, column_path, timestamp, consistency_level)
	if err != nil {
		return
	}
	return p.RecvRemove()
}

func (p *CassandraClient) SendRemove(key []byte, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId)
	args588 := NewRemoveArgs()
	args588.Key = key
	args588.ColumnPath = column_path
	args588.Timestamp = timestamp
	args588.ConsistencyLevel = consistency_level
	err = args588.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvRemove() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error590 := thrift.NewTApplicationExceptionDefault()
		var error591 error
		error591, err = error590.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error591
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result589 := NewRemoveResult()
	err = result589.Read(iprot)
	iprot.ReadMessageEnd()
	if result589.Ire != nil {
		ire = result589.Ire
	}
	if result589.Ue != nil {
		ue = result589.Ue
	}
	if result589.Te != nil {
		te = result589.Te
	}
	return
}

/**
 * Remove a counter at the specified location.
 * Note that counters have limited support for deletes: if you remove a counter, you must wait to issue any following update
 * until the delete has reached all the nodes and all of them have been fully compacted.
 * 
 * Parameters:
 *  - Key
 *  - Path
 *  - ConsistencyLevel
 */
func (p *CassandraClient) RemoveCounter(key []byte, path *ColumnPath, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendRemoveCounter(key, path, consistency_level)
	if err != nil {
		return
	}
	return p.RecvRemoveCounter()
}

func (p *CassandraClient) SendRemoveCounter(key []byte, path *ColumnPath, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("remove_counter", thrift.CALL, p.SeqId)
	args593 := NewRemoveCounterArgs()
	args593.Key = key
	args593.Path = path
	args593.ConsistencyLevel = consistency_level
	err = args593.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvRemoveCounter() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error595 := thrift.NewTApplicationExceptionDefault()
		var error596 error
		error596, err = error595.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error596
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result594 := NewRemoveCounterResult()
	err = result594.Read(iprot)
	iprot.ReadMessageEnd()
	if result594.Ire != nil {
		ire = result594.Ire
	}
	if result594.Ue != nil {
		ue = result594.Ue
	}
	if result594.Te != nil {
		te = result594.Te
	}
	return
}

/**
 *   Mutate many columns or super columns for many row keys. See also: Mutation.
 * 
 *   mutation_map maps key to column family to a list of Mutation objects to take place at that scope.
 * *
 * 
 * Parameters:
 *  - MutationMap
 *  - ConsistencyLevel
 */
func (p *CassandraClient) BatchMutate(mutation_map map[string]map[string][]*Mutation, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendBatchMutate(mutation_map, consistency_level)
	if err != nil {
		return
	}
	return p.RecvBatchMutate()
}

func (p *CassandraClient) SendBatchMutate(mutation_map map[string]map[string][]*Mutation, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("batch_mutate", thrift.CALL, p.SeqId)
	args598 := NewBatchMutateArgs()
	args598.MutationMap = mutation_map
	args598.ConsistencyLevel = consistency_level
	err = args598.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvBatchMutate() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error600 := thrift.NewTApplicationExceptionDefault()
		var error601 error
		error601, err = error600.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error601
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result599 := NewBatchMutateResult()
	err = result599.Read(iprot)
	iprot.ReadMessageEnd()
	if result599.Ire != nil {
		ire = result599.Ire
	}
	if result599.Ue != nil {
		ue = result599.Ue
	}
	if result599.Te != nil {
		te = result599.Te
	}
	return
}

/**
 *   Atomically mutate many columns or super columns for many row keys. See also: Mutation.
 * 
 *   mutation_map maps key to column family to a list of Mutation objects to take place at that scope.
 * *
 * 
 * Parameters:
 *  - MutationMap
 *  - ConsistencyLevel
 */
func (p *CassandraClient) AtomicBatchMutate(mutation_map map[string]map[string][]*Mutation, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendAtomicBatchMutate(mutation_map, consistency_level)
	if err != nil {
		return
	}
	return p.RecvAtomicBatchMutate()
}

func (p *CassandraClient) SendAtomicBatchMutate(mutation_map map[string]map[string][]*Mutation, consistency_level ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("atomic_batch_mutate", thrift.CALL, p.SeqId)
	args603 := NewAtomicBatchMutateArgs()
	args603.MutationMap = mutation_map
	args603.ConsistencyLevel = consistency_level
	err = args603.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvAtomicBatchMutate() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error605 := thrift.NewTApplicationExceptionDefault()
		var error606 error
		error606, err = error605.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error606
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result604 := NewAtomicBatchMutateResult()
	err = result604.Read(iprot)
	iprot.ReadMessageEnd()
	if result604.Ire != nil {
		ire = result604.Ire
	}
	if result604.Ue != nil {
		ue = result604.Ue
	}
	if result604.Te != nil {
		te = result604.Te
	}
	return
}

/**
 * Truncate will mark and entire column family as deleted.
 * From the user's perspective a successful call to truncate will result complete data deletion from cfname.
 * Internally, however, disk space will not be immediatily released, as with all deletes in cassandra, this one
 * only marks the data as deleted.
 * The operation succeeds only if all hosts in the cluster at available and will throw an UnavailableException if
 * some hosts are down.
 * 
 * Parameters:
 *  - Cfname
 */
func (p *CassandraClient) Truncate(cfname string) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	err = p.SendTruncate(cfname)
	if err != nil {
		return
	}
	return p.RecvTruncate()
}

func (p *CassandraClient) SendTruncate(cfname string) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("truncate", thrift.CALL, p.SeqId)
	args608 := NewTruncateArgs()
	args608.Cfname = cfname
	err = args608.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvTruncate() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error610 := thrift.NewTApplicationExceptionDefault()
		var error611 error
		error611, err = error610.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error611
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result609 := NewTruncateResult()
	err = result609.Read(iprot)
	iprot.ReadMessageEnd()
	if result609.Ire != nil {
		ire = result609.Ire
	}
	if result609.Ue != nil {
		ue = result609.Ue
	}
	if result609.Te != nil {
		te = result609.Te
	}
	return
}

/**
 * for each schema version present in the cluster, returns a list of nodes at that version.
 * hosts that do not respond will be under the key DatabaseDescriptor.INITIAL_VERSION.
 * the cluster is all on the same version if the size of the map is 1.
 */
func (p *CassandraClient) DescribeSchemaVersions() (retval612 map[string][]string, ire *InvalidRequestException, err error) {
	err = p.SendDescribeSchemaVersions()
	if err != nil {
		return
	}
	return p.RecvDescribeSchemaVersions()
}

func (p *CassandraClient) SendDescribeSchemaVersions() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_schema_versions", thrift.CALL, p.SeqId)
	args613 := NewDescribeSchemaVersionsArgs()
	err = args613.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeSchemaVersions() (value map[string][]string, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error615 := thrift.NewTApplicationExceptionDefault()
		var error616 error
		error616, err = error615.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error616
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result614 := NewDescribeSchemaVersionsResult()
	err = result614.Read(iprot)
	iprot.ReadMessageEnd()
	value = result614.Success
	if result614.Ire != nil {
		ire = result614.Ire
	}
	return
}

/**
 * list the defined keyspaces in this cluster
 */
func (p *CassandraClient) DescribeKeyspaces() (retval617 []*KsDef, ire *InvalidRequestException, err error) {
	err = p.SendDescribeKeyspaces()
	if err != nil {
		return
	}
	return p.RecvDescribeKeyspaces()
}

func (p *CassandraClient) SendDescribeKeyspaces() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_keyspaces", thrift.CALL, p.SeqId)
	args618 := NewDescribeKeyspacesArgs()
	err = args618.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeKeyspaces() (value []*KsDef, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error620 := thrift.NewTApplicationExceptionDefault()
		var error621 error
		error621, err = error620.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error621
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result619 := NewDescribeKeyspacesResult()
	err = result619.Read(iprot)
	iprot.ReadMessageEnd()
	value = result619.Success
	if result619.Ire != nil {
		ire = result619.Ire
	}
	return
}

/**
 * get the cluster name
 */
func (p *CassandraClient) DescribeClusterName() (retval622 string, err error) {
	err = p.SendDescribeClusterName()
	if err != nil {
		return
	}
	return p.RecvDescribeClusterName()
}

func (p *CassandraClient) SendDescribeClusterName() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_cluster_name", thrift.CALL, p.SeqId)
	args623 := NewDescribeClusterNameArgs()
	err = args623.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeClusterName() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error625 := thrift.NewTApplicationExceptionDefault()
		var error626 error
		error626, err = error625.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error626
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result624 := NewDescribeClusterNameResult()
	err = result624.Read(iprot)
	iprot.ReadMessageEnd()
	value = result624.Success
	return
}

/**
 * get the thrift api version
 */
func (p *CassandraClient) DescribeVersion() (retval627 string, err error) {
	err = p.SendDescribeVersion()
	if err != nil {
		return
	}
	return p.RecvDescribeVersion()
}

func (p *CassandraClient) SendDescribeVersion() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_version", thrift.CALL, p.SeqId)
	args628 := NewDescribeVersionArgs()
	err = args628.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeVersion() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error630 := thrift.NewTApplicationExceptionDefault()
		var error631 error
		error631, err = error630.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error631
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result629 := NewDescribeVersionResult()
	err = result629.Read(iprot)
	iprot.ReadMessageEnd()
	value = result629.Success
	return
}

/**
 * get the token ring: a map of ranges to host addresses,
 * represented as a set of TokenRange instead of a map from range
 * to list of endpoints, because you can't use Thrift structs as
 * map keys:
 * https://issues.apache.org/jira/browse/THRIFT-162
 * 
 * for the same reason, we can't return a set here, even though
 * order is neither important nor predictable.
 * 
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) DescribeRing(keyspace string) (retval632 []*TokenRange, ire *InvalidRequestException, err error) {
	err = p.SendDescribeRing(keyspace)
	if err != nil {
		return
	}
	return p.RecvDescribeRing()
}

func (p *CassandraClient) SendDescribeRing(keyspace string) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_ring", thrift.CALL, p.SeqId)
	args633 := NewDescribeRingArgs()
	args633.Keyspace = keyspace
	err = args633.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeRing() (value []*TokenRange, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error635 := thrift.NewTApplicationExceptionDefault()
		var error636 error
		error636, err = error635.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error636
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result634 := NewDescribeRingResult()
	err = result634.Read(iprot)
	iprot.ReadMessageEnd()
	value = result634.Success
	if result634.Ire != nil {
		ire = result634.Ire
	}
	return
}

/**
 * get the mapping between token->node ip
 * without taking replication into consideration
 * https://issues.apache.org/jira/browse/CASSANDRA-4092
 */
func (p *CassandraClient) DescribeTokenMap() (retval637 map[string]string, ire *InvalidRequestException, err error) {
	err = p.SendDescribeTokenMap()
	if err != nil {
		return
	}
	return p.RecvDescribeTokenMap()
}

func (p *CassandraClient) SendDescribeTokenMap() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_token_map", thrift.CALL, p.SeqId)
	args638 := NewDescribeTokenMapArgs()
	err = args638.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeTokenMap() (value map[string]string, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error640 := thrift.NewTApplicationExceptionDefault()
		var error641 error
		error641, err = error640.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error641
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result639 := NewDescribeTokenMapResult()
	err = result639.Read(iprot)
	iprot.ReadMessageEnd()
	value = result639.Success
	if result639.Ire != nil {
		ire = result639.Ire
	}
	return
}

/**
 * returns the partitioner used by this cluster
 */
func (p *CassandraClient) DescribePartitioner() (retval642 string, err error) {
	err = p.SendDescribePartitioner()
	if err != nil {
		return
	}
	return p.RecvDescribePartitioner()
}

func (p *CassandraClient) SendDescribePartitioner() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_partitioner", thrift.CALL, p.SeqId)
	args643 := NewDescribePartitionerArgs()
	err = args643.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribePartitioner() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error645 := thrift.NewTApplicationExceptionDefault()
		var error646 error
		error646, err = error645.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error646
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result644 := NewDescribePartitionerResult()
	err = result644.Read(iprot)
	iprot.ReadMessageEnd()
	value = result644.Success
	return
}

/**
 * returns the snitch used by this cluster
 */
func (p *CassandraClient) DescribeSnitch() (retval647 string, err error) {
	err = p.SendDescribeSnitch()
	if err != nil {
		return
	}
	return p.RecvDescribeSnitch()
}

func (p *CassandraClient) SendDescribeSnitch() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_snitch", thrift.CALL, p.SeqId)
	args648 := NewDescribeSnitchArgs()
	err = args648.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeSnitch() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error650 := thrift.NewTApplicationExceptionDefault()
		var error651 error
		error651, err = error650.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error651
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result649 := NewDescribeSnitchResult()
	err = result649.Read(iprot)
	iprot.ReadMessageEnd()
	value = result649.Success
	return
}

/**
 * describe specified keyspace
 * 
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) DescribeKeyspace(keyspace string) (retval652 *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err error) {
	err = p.SendDescribeKeyspace(keyspace)
	if err != nil {
		return
	}
	return p.RecvDescribeKeyspace()
}

func (p *CassandraClient) SendDescribeKeyspace(keyspace string) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_keyspace", thrift.CALL, p.SeqId)
	args653 := NewDescribeKeyspaceArgs()
	args653.Keyspace = keyspace
	err = args653.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeKeyspace() (value *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error655 := thrift.NewTApplicationExceptionDefault()
		var error656 error
		error656, err = error655.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error656
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result654 := NewDescribeKeyspaceResult()
	err = result654.Read(iprot)
	iprot.ReadMessageEnd()
	value = result654.Success
	if result654.Nfe != nil {
		nfe = result654.Nfe
	}
	if result654.Ire != nil {
		ire = result654.Ire
	}
	return
}

/**
 * experimental API for hadoop/parallel query support.
 * may change violently and without warning.
 * 
 * returns list of token strings such that first subrange is (list[0], list[1]],
 * next is (list[1], list[2]], etc.
 * 
 * Parameters:
 *  - CfName
 *  - StartToken
 *  - EndToken
 *  - KeysPerSplit
 */
func (p *CassandraClient) DescribeSplits(cfName string, start_token string, end_token string, keys_per_split int32) (retval657 []string, ire *InvalidRequestException, err error) {
	err = p.SendDescribeSplits(cfName, start_token, end_token, keys_per_split)
	if err != nil {
		return
	}
	return p.RecvDescribeSplits()
}

func (p *CassandraClient) SendDescribeSplits(cfName string, start_token string, end_token string, keys_per_split int32) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_splits", thrift.CALL, p.SeqId)
	args658 := NewDescribeSplitsArgs()
	args658.CfName = cfName
	args658.StartToken = start_token
	args658.EndToken = end_token
	args658.KeysPerSplit = keys_per_split
	err = args658.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeSplits() (value []string, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error660 := thrift.NewTApplicationExceptionDefault()
		var error661 error
		error661, err = error660.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error661
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result659 := NewDescribeSplitsResult()
	err = result659.Read(iprot)
	iprot.ReadMessageEnd()
	value = result659.Success
	if result659.Ire != nil {
		ire = result659.Ire
	}
	return
}

/**
 * Enables tracing for the next query in this connection and returns the UUID for that trace session
 * The next query will be traced idependently of trace probability and the returned UUID can be used to query the trace keyspace
 */
func (p *CassandraClient) TraceNextQuery() (retval662 []byte, err error) {
	err = p.SendTraceNextQuery()
	if err != nil {
		return
	}
	return p.RecvTraceNextQuery()
}

func (p *CassandraClient) SendTraceNextQuery() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("trace_next_query", thrift.CALL, p.SeqId)
	args663 := NewTraceNextQueryArgs()
	err = args663.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvTraceNextQuery() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error665 := thrift.NewTApplicationExceptionDefault()
		var error666 error
		error666, err = error665.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error666
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result664 := NewTraceNextQueryResult()
	err = result664.Read(iprot)
	iprot.ReadMessageEnd()
	value = result664.Success
	return
}

/**
 * Parameters:
 *  - CfName
 *  - StartToken
 *  - EndToken
 *  - KeysPerSplit
 */
func (p *CassandraClient) DescribeSplitsEx(cfName string, start_token string, end_token string, keys_per_split int32) (retval667 []*CfSplit, ire *InvalidRequestException, err error) {
	err = p.SendDescribeSplitsEx(cfName, start_token, end_token, keys_per_split)
	if err != nil {
		return
	}
	return p.RecvDescribeSplitsEx()
}

func (p *CassandraClient) SendDescribeSplitsEx(cfName string, start_token string, end_token string, keys_per_split int32) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_splits_ex", thrift.CALL, p.SeqId)
	args668 := NewDescribeSplitsExArgs()
	args668.CfName = cfName
	args668.StartToken = start_token
	args668.EndToken = end_token
	args668.KeysPerSplit = keys_per_split
	err = args668.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeSplitsEx() (value []*CfSplit, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error670 := thrift.NewTApplicationExceptionDefault()
		var error671 error
		error671, err = error670.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error671
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result669 := NewDescribeSplitsExResult()
	err = result669.Read(iprot)
	iprot.ReadMessageEnd()
	value = result669.Success
	if result669.Ire != nil {
		ire = result669.Ire
	}
	return
}

/**
 * adds a column family. returns the new schema id.
 * 
 * Parameters:
 *  - CfDef
 */
func (p *CassandraClient) SystemAddColumnFamily(cf_def *CfDef) (retval672 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	err = p.SendSystemAddColumnFamily(cf_def)
	if err != nil {
		return
	}
	return p.RecvSystemAddColumnFamily()
}

func (p *CassandraClient) SendSystemAddColumnFamily(cf_def *CfDef) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_add_column_family", thrift.CALL, p.SeqId)
	args673 := NewSystemAddColumnFamilyArgs()
	args673.CfDef = cf_def
	err = args673.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemAddColumnFamily() (value string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error675 := thrift.NewTApplicationExceptionDefault()
		var error676 error
		error676, err = error675.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error676
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result674 := NewSystemAddColumnFamilyResult()
	err = result674.Read(iprot)
	iprot.ReadMessageEnd()
	value = result674.Success
	if result674.Ire != nil {
		ire = result674.Ire
	}
	if result674.Sde != nil {
		sde = result674.Sde
	}
	return
}

/**
 * drops a column family. returns the new schema id.
 * 
 * Parameters:
 *  - ColumnFamily
 */
func (p *CassandraClient) SystemDropColumnFamily(column_family string) (retval677 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	err = p.SendSystemDropColumnFamily(column_family)
	if err != nil {
		return
	}
	return p.RecvSystemDropColumnFamily()
}

func (p *CassandraClient) SendSystemDropColumnFamily(column_family string) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_drop_column_family", thrift.CALL, p.SeqId)
	args678 := NewSystemDropColumnFamilyArgs()
	args678.ColumnFamily = column_family
	err = args678.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemDropColumnFamily() (value string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error680 := thrift.NewTApplicationExceptionDefault()
		var error681 error
		error681, err = error680.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error681
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result679 := NewSystemDropColumnFamilyResult()
	err = result679.Read(iprot)
	iprot.ReadMessageEnd()
	value = result679.Success
	if result679.Ire != nil {
		ire = result679.Ire
	}
	if result679.Sde != nil {
		sde = result679.Sde
	}
	return
}

/**
 * adds a keyspace and any column families that are part of it. returns the new schema id.
 * 
 * Parameters:
 *  - KsDef
 */
func (p *CassandraClient) SystemAddKeyspace(ks_def *KsDef) (retval682 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	err = p.SendSystemAddKeyspace(ks_def)
	if err != nil {
		return
	}
	return p.RecvSystemAddKeyspace()
}

func (p *CassandraClient) SendSystemAddKeyspace(ks_def *KsDef) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_add_keyspace", thrift.CALL, p.SeqId)
	args683 := NewSystemAddKeyspaceArgs()
	args683.KsDef = ks_def
	err = args683.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemAddKeyspace() (value string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error685 := thrift.NewTApplicationExceptionDefault()
		var error686 error
		error686, err = error685.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error686
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result684 := NewSystemAddKeyspaceResult()
	err = result684.Read(iprot)
	iprot.ReadMessageEnd()
	value = result684.Success
	if result684.Ire != nil {
		ire = result684.Ire
	}
	if result684.Sde != nil {
		sde = result684.Sde
	}
	return
}

/**
 * drops a keyspace and any column families that are part of it. returns the new schema id.
 * 
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) SystemDropKeyspace(keyspace string) (retval687 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	err = p.SendSystemDropKeyspace(keyspace)
	if err != nil {
		return
	}
	return p.RecvSystemDropKeyspace()
}

func (p *CassandraClient) SendSystemDropKeyspace(keyspace string) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_drop_keyspace", thrift.CALL, p.SeqId)
	args688 := NewSystemDropKeyspaceArgs()
	args688.Keyspace = keyspace
	err = args688.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemDropKeyspace() (value string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error690 := thrift.NewTApplicationExceptionDefault()
		var error691 error
		error691, err = error690.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error691
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result689 := NewSystemDropKeyspaceResult()
	err = result689.Read(iprot)
	iprot.ReadMessageEnd()
	value = result689.Success
	if result689.Ire != nil {
		ire = result689.Ire
	}
	if result689.Sde != nil {
		sde = result689.Sde
	}
	return
}

/**
 * updates properties of a keyspace. returns the new schema id.
 * 
 * Parameters:
 *  - KsDef
 */
func (p *CassandraClient) SystemUpdateKeyspace(ks_def *KsDef) (retval692 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	err = p.SendSystemUpdateKeyspace(ks_def)
	if err != nil {
		return
	}
	return p.RecvSystemUpdateKeyspace()
}

func (p *CassandraClient) SendSystemUpdateKeyspace(ks_def *KsDef) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_update_keyspace", thrift.CALL, p.SeqId)
	args693 := NewSystemUpdateKeyspaceArgs()
	args693.KsDef = ks_def
	err = args693.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemUpdateKeyspace() (value string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error695 := thrift.NewTApplicationExceptionDefault()
		var error696 error
		error696, err = error695.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error696
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result694 := NewSystemUpdateKeyspaceResult()
	err = result694.Read(iprot)
	iprot.ReadMessageEnd()
	value = result694.Success
	if result694.Ire != nil {
		ire = result694.Ire
	}
	if result694.Sde != nil {
		sde = result694.Sde
	}
	return
}

/**
 * updates properties of a column family. returns the new schema id.
 * 
 * Parameters:
 *  - CfDef
 */
func (p *CassandraClient) SystemUpdateColumnFamily(cf_def *CfDef) (retval697 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	err = p.SendSystemUpdateColumnFamily(cf_def)
	if err != nil {
		return
	}
	return p.RecvSystemUpdateColumnFamily()
}

func (p *CassandraClient) SendSystemUpdateColumnFamily(cf_def *CfDef) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_update_column_family", thrift.CALL, p.SeqId)
	args698 := NewSystemUpdateColumnFamilyArgs()
	args698.CfDef = cf_def
	err = args698.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemUpdateColumnFamily() (value string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error700 := thrift.NewTApplicationExceptionDefault()
		var error701 error
		error701, err = error700.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error701
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result699 := NewSystemUpdateColumnFamilyResult()
	err = result699.Read(iprot)
	iprot.ReadMessageEnd()
	value = result699.Success
	if result699.Ire != nil {
		ire = result699.Ire
	}
	if result699.Sde != nil {
		sde = result699.Sde
	}
	return
}

/**
 * Executes a CQL (Cassandra Query Language) statement and returns a
 * CqlResult containing the results.
 * 
 * Parameters:
 *  - Query
 *  - Compression
 */
func (p *CassandraClient) ExecuteCqlQuery(query []byte, compression Compression) (retval702 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	err = p.SendExecuteCqlQuery(query, compression)
	if err != nil {
		return
	}
	return p.RecvExecuteCqlQuery()
}

func (p *CassandraClient) SendExecuteCqlQuery(query []byte, compression Compression) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("execute_cql_query", thrift.CALL, p.SeqId)
	args703 := NewExecuteCqlQueryArgs()
	args703.Query = query
	args703.Compression = compression
	err = args703.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvExecuteCqlQuery() (value *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error705 := thrift.NewTApplicationExceptionDefault()
		var error706 error
		error706, err = error705.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error706
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result704 := NewExecuteCqlQueryResult()
	err = result704.Read(iprot)
	iprot.ReadMessageEnd()
	value = result704.Success
	if result704.Ire != nil {
		ire = result704.Ire
	}
	if result704.Ue != nil {
		ue = result704.Ue
	}
	if result704.Te != nil {
		te = result704.Te
	}
	if result704.Sde != nil {
		sde = result704.Sde
	}
	return
}

/**
 * Parameters:
 *  - Query
 *  - Compression
 *  - Consistency
 */
func (p *CassandraClient) ExecuteCql3Query(query []byte, compression Compression, consistency ConsistencyLevel) (retval707 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	err = p.SendExecuteCql3Query(query, compression, consistency)
	if err != nil {
		return
	}
	return p.RecvExecuteCql3Query()
}

func (p *CassandraClient) SendExecuteCql3Query(query []byte, compression Compression, consistency ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("execute_cql3_query", thrift.CALL, p.SeqId)
	args708 := NewExecuteCql3QueryArgs()
	args708.Query = query
	args708.Compression = compression
	args708.Consistency = consistency
	err = args708.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvExecuteCql3Query() (value *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error710 := thrift.NewTApplicationExceptionDefault()
		var error711 error
		error711, err = error710.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error711
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result709 := NewExecuteCql3QueryResult()
	err = result709.Read(iprot)
	iprot.ReadMessageEnd()
	value = result709.Success
	if result709.Ire != nil {
		ire = result709.Ire
	}
	if result709.Ue != nil {
		ue = result709.Ue
	}
	if result709.Te != nil {
		te = result709.Te
	}
	if result709.Sde != nil {
		sde = result709.Sde
	}
	return
}

/**
 * Prepare a CQL (Cassandra Query Language) statement by compiling and returning
 * - the type of CQL statement
 * - an id token of the compiled CQL stored on the server side.
 * - a count of the discovered bound markers in the statement
 * 
 * Parameters:
 *  - Query
 *  - Compression
 */
func (p *CassandraClient) PrepareCqlQuery(query []byte, compression Compression) (retval712 *CqlPreparedResult, ire *InvalidRequestException, err error) {
	err = p.SendPrepareCqlQuery(query, compression)
	if err != nil {
		return
	}
	return p.RecvPrepareCqlQuery()
}

func (p *CassandraClient) SendPrepareCqlQuery(query []byte, compression Compression) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("prepare_cql_query", thrift.CALL, p.SeqId)
	args713 := NewPrepareCqlQueryArgs()
	args713.Query = query
	args713.Compression = compression
	err = args713.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvPrepareCqlQuery() (value *CqlPreparedResult, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error715 := thrift.NewTApplicationExceptionDefault()
		var error716 error
		error716, err = error715.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error716
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result714 := NewPrepareCqlQueryResult()
	err = result714.Read(iprot)
	iprot.ReadMessageEnd()
	value = result714.Success
	if result714.Ire != nil {
		ire = result714.Ire
	}
	return
}

/**
 * Parameters:
 *  - Query
 *  - Compression
 */
func (p *CassandraClient) PrepareCql3Query(query []byte, compression Compression) (retval717 *CqlPreparedResult, ire *InvalidRequestException, err error) {
	err = p.SendPrepareCql3Query(query, compression)
	if err != nil {
		return
	}
	return p.RecvPrepareCql3Query()
}

func (p *CassandraClient) SendPrepareCql3Query(query []byte, compression Compression) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("prepare_cql3_query", thrift.CALL, p.SeqId)
	args718 := NewPrepareCql3QueryArgs()
	args718.Query = query
	args718.Compression = compression
	err = args718.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvPrepareCql3Query() (value *CqlPreparedResult, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error720 := thrift.NewTApplicationExceptionDefault()
		var error721 error
		error721, err = error720.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error721
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result719 := NewPrepareCql3QueryResult()
	err = result719.Read(iprot)
	iprot.ReadMessageEnd()
	value = result719.Success
	if result719.Ire != nil {
		ire = result719.Ire
	}
	return
}

/**
 * Executes a prepared CQL (Cassandra Query Language) statement by passing an id token and  a list of variables
 * to bind and returns a CqlResult containing the results.
 * 
 * Parameters:
 *  - ItemId
 *  - Values
 */
func (p *CassandraClient) ExecutePreparedCqlQuery(itemId int32, values [][]byte) (retval722 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	err = p.SendExecutePreparedCqlQuery(itemId, values)
	if err != nil {
		return
	}
	return p.RecvExecutePreparedCqlQuery()
}

func (p *CassandraClient) SendExecutePreparedCqlQuery(itemId int32, values [][]byte) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("execute_prepared_cql_query", thrift.CALL, p.SeqId)
	args723 := NewExecutePreparedCqlQueryArgs()
	args723.ItemId = itemId
	args723.Values = values
	err = args723.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvExecutePreparedCqlQuery() (value *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error725 := thrift.NewTApplicationExceptionDefault()
		var error726 error
		error726, err = error725.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error726
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result724 := NewExecutePreparedCqlQueryResult()
	err = result724.Read(iprot)
	iprot.ReadMessageEnd()
	value = result724.Success
	if result724.Ire != nil {
		ire = result724.Ire
	}
	if result724.Ue != nil {
		ue = result724.Ue
	}
	if result724.Te != nil {
		te = result724.Te
	}
	if result724.Sde != nil {
		sde = result724.Sde
	}
	return
}

/**
 * Parameters:
 *  - ItemId
 *  - Values
 *  - Consistency
 */
func (p *CassandraClient) ExecutePreparedCql3Query(itemId int32, values [][]byte, consistency ConsistencyLevel) (retval727 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	err = p.SendExecutePreparedCql3Query(itemId, values, consistency)
	if err != nil {
		return
	}
	return p.RecvExecutePreparedCql3Query()
}

func (p *CassandraClient) SendExecutePreparedCql3Query(itemId int32, values [][]byte, consistency ConsistencyLevel) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("execute_prepared_cql3_query", thrift.CALL, p.SeqId)
	args728 := NewExecutePreparedCql3QueryArgs()
	args728.ItemId = itemId
	args728.Values = values
	args728.Consistency = consistency
	err = args728.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvExecutePreparedCql3Query() (value *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error730 := thrift.NewTApplicationExceptionDefault()
		var error731 error
		error731, err = error730.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error731
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result729 := NewExecutePreparedCql3QueryResult()
	err = result729.Read(iprot)
	iprot.ReadMessageEnd()
	value = result729.Success
	if result729.Ire != nil {
		ire = result729.Ire
	}
	if result729.Ue != nil {
		ue = result729.Ue
	}
	if result729.Te != nil {
		te = result729.Te
	}
	if result729.Sde != nil {
		sde = result729.Sde
	}
	return
}

/**
 * @deprecated This is now a no-op. Please use the CQL3 specific methods instead.
 * 
 * Parameters:
 *  - Version
 */
func (p *CassandraClient) SetCqlVersion(version string) (ire *InvalidRequestException, err error) {
	err = p.SendSetCqlVersion(version)
	if err != nil {
		return
	}
	return p.RecvSetCqlVersion()
}

func (p *CassandraClient) SendSetCqlVersion(version string) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("set_cql_version", thrift.CALL, p.SeqId)
	args733 := NewSetCqlVersionArgs()
	args733.Version = version
	err = args733.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSetCqlVersion() (ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error735 := thrift.NewTApplicationExceptionDefault()
		var error736 error
		error736, err = error735.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error736
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result734 := NewSetCqlVersionResult()
	err = result734.Read(iprot)
	iprot.ReadMessageEnd()
	if result734.Ire != nil {
		ire = result734.Ire
	}
	return
}

type CassandraProcessor struct {
	handler      ICassandra
	processorMap map[string]thrift.TProcessorFunction
}

func (p *CassandraProcessor) Handler() ICassandra {
	return p.handler
}

func (p *CassandraProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CassandraProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *CassandraProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCassandraProcessor(handler ICassandra) *CassandraProcessor {

	self737 := &CassandraProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self737.processorMap["login"] = &cassandraProcessorLogin{handler: handler}
	self737.processorMap["set_keyspace"] = &cassandraProcessorSetKeyspace{handler: handler}
	self737.processorMap["get"] = &cassandraProcessorGet{handler: handler}
	self737.processorMap["get_slice"] = &cassandraProcessorGetSlice{handler: handler}
	self737.processorMap["get_count"] = &cassandraProcessorGetCount{handler: handler}
	self737.processorMap["multiget_slice"] = &cassandraProcessorMultigetSlice{handler: handler}
	self737.processorMap["multiget_count"] = &cassandraProcessorMultigetCount{handler: handler}
	self737.processorMap["get_range_slices"] = &cassandraProcessorGetRangeSlices{handler: handler}
	self737.processorMap["get_paged_slice"] = &cassandraProcessorGetPagedSlice{handler: handler}
	self737.processorMap["get_indexed_slices"] = &cassandraProcessorGetIndexedSlices{handler: handler}
	self737.processorMap["insert"] = &cassandraProcessorInsert{handler: handler}
	self737.processorMap["add"] = &cassandraProcessorAdd{handler: handler}
	self737.processorMap["remove"] = &cassandraProcessorRemove{handler: handler}
	self737.processorMap["remove_counter"] = &cassandraProcessorRemoveCounter{handler: handler}
	self737.processorMap["batch_mutate"] = &cassandraProcessorBatchMutate{handler: handler}
	self737.processorMap["atomic_batch_mutate"] = &cassandraProcessorAtomicBatchMutate{handler: handler}
	self737.processorMap["truncate"] = &cassandraProcessorTruncate{handler: handler}
	self737.processorMap["describe_schema_versions"] = &cassandraProcessorDescribeSchemaVersions{handler: handler}
	self737.processorMap["describe_keyspaces"] = &cassandraProcessorDescribeKeyspaces{handler: handler}
	self737.processorMap["describe_cluster_name"] = &cassandraProcessorDescribeClusterName{handler: handler}
	self737.processorMap["describe_version"] = &cassandraProcessorDescribeVersion{handler: handler}
	self737.processorMap["describe_ring"] = &cassandraProcessorDescribeRing{handler: handler}
	self737.processorMap["describe_token_map"] = &cassandraProcessorDescribeTokenMap{handler: handler}
	self737.processorMap["describe_partitioner"] = &cassandraProcessorDescribePartitioner{handler: handler}
	self737.processorMap["describe_snitch"] = &cassandraProcessorDescribeSnitch{handler: handler}
	self737.processorMap["describe_keyspace"] = &cassandraProcessorDescribeKeyspace{handler: handler}
	self737.processorMap["describe_splits"] = &cassandraProcessorDescribeSplits{handler: handler}
	self737.processorMap["trace_next_query"] = &cassandraProcessorTraceNextQuery{handler: handler}
	self737.processorMap["describe_splits_ex"] = &cassandraProcessorDescribeSplitsEx{handler: handler}
	self737.processorMap["system_add_column_family"] = &cassandraProcessorSystemAddColumnFamily{handler: handler}
	self737.processorMap["system_drop_column_family"] = &cassandraProcessorSystemDropColumnFamily{handler: handler}
	self737.processorMap["system_add_keyspace"] = &cassandraProcessorSystemAddKeyspace{handler: handler}
	self737.processorMap["system_drop_keyspace"] = &cassandraProcessorSystemDropKeyspace{handler: handler}
	self737.processorMap["system_update_keyspace"] = &cassandraProcessorSystemUpdateKeyspace{handler: handler}
	self737.processorMap["system_update_column_family"] = &cassandraProcessorSystemUpdateColumnFamily{handler: handler}
	self737.processorMap["execute_cql_query"] = &cassandraProcessorExecuteCqlQuery{handler: handler}
	self737.processorMap["execute_cql3_query"] = &cassandraProcessorExecuteCql3Query{handler: handler}
	self737.processorMap["prepare_cql_query"] = &cassandraProcessorPrepareCqlQuery{handler: handler}
	self737.processorMap["prepare_cql3_query"] = &cassandraProcessorPrepareCql3Query{handler: handler}
	self737.processorMap["execute_prepared_cql_query"] = &cassandraProcessorExecutePreparedCqlQuery{handler: handler}
	self737.processorMap["execute_prepared_cql3_query"] = &cassandraProcessorExecutePreparedCql3Query{handler: handler}
	self737.processorMap["set_cql_version"] = &cassandraProcessorSetCqlVersion{handler: handler}
	return self737
}

func (p *CassandraProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x738 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x738.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x738
	}
	return process.Process(seqId, iprot, oprot)
}

type cassandraProcessorLogin struct {
	handler ICassandra
}

func (p *cassandraProcessorLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewLoginArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewLoginResult()
	if result.Authnx, result.Authzx, err = p.handler.Login(args.AuthRequest); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: "+err.Error())
		oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("login", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSetKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSetKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetKeyspaceResult()
	if result.Ire, err = p.handler.SetKeyspace(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_keyspace: "+err.Error())
		oprot.WriteMessageBegin("set_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("set_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGet struct {
	handler ICassandra
}

func (p *cassandraProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResult()
	if result.Success, result.Ire, result.Nfe, result.Ue, result.Te, err = p.handler.Get(args.Key, args.ColumnPath, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetSlice struct {
	handler ICassandra
}

func (p *cassandraProcessorGetSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSliceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSliceResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetSlice(args.Key, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_slice: "+err.Error())
		oprot.WriteMessageBegin("get_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_slice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetCount struct {
	handler ICassandra
}

func (p *cassandraProcessorGetCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetCountArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetCountResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetCount(args.Key, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_count: "+err.Error())
		oprot.WriteMessageBegin("get_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_count", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorMultigetSlice struct {
	handler ICassandra
}

func (p *cassandraProcessorMultigetSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMultigetSliceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("multiget_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMultigetSliceResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.MultigetSlice(args.Keys, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiget_slice: "+err.Error())
		oprot.WriteMessageBegin("multiget_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("multiget_slice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorMultigetCount struct {
	handler ICassandra
}

func (p *cassandraProcessorMultigetCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMultigetCountArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("multiget_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMultigetCountResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.MultigetCount(args.Keys, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiget_count: "+err.Error())
		oprot.WriteMessageBegin("multiget_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("multiget_count", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetRangeSlices struct {
	handler ICassandra
}

func (p *cassandraProcessorGetRangeSlices) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRangeSlicesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_range_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRangeSlicesResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetRangeSlices(args.ColumnParent, args.Predicate, args.RangeA1, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_range_slices: "+err.Error())
		oprot.WriteMessageBegin("get_range_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_range_slices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetPagedSlice struct {
	handler ICassandra
}

func (p *cassandraProcessorGetPagedSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPagedSliceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_paged_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPagedSliceResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetPagedSlice(args.ColumnFamily, args.RangeA1, args.StartColumn, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_paged_slice: "+err.Error())
		oprot.WriteMessageBegin("get_paged_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_paged_slice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetIndexedSlices struct {
	handler ICassandra
}

func (p *cassandraProcessorGetIndexedSlices) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetIndexedSlicesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_indexed_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetIndexedSlicesResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetIndexedSlices(args.ColumnParent, args.IndexClause, args.ColumnPredicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexed_slices: "+err.Error())
		oprot.WriteMessageBegin("get_indexed_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_indexed_slices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorInsert struct {
	handler ICassandra
}

func (p *cassandraProcessorInsert) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewInsertArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewInsertResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.Insert(args.Key, args.ColumnParent, args.Column, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insert: "+err.Error())
		oprot.WriteMessageBegin("insert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("insert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorAdd struct {
	handler ICassandra
}

func (p *cassandraProcessorAdd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAddArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAddResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.Add(args.Key, args.ColumnParent, args.Column, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add: "+err.Error())
		oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("add", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorRemove struct {
	handler ICassandra
}

func (p *cassandraProcessorRemove) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRemoveArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRemoveResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.Remove(args.Key, args.ColumnPath, args.Timestamp, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: "+err.Error())
		oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("remove", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorRemoveCounter struct {
	handler ICassandra
}

func (p *cassandraProcessorRemoveCounter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRemoveCounterArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remove_counter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRemoveCounterResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.RemoveCounter(args.Key, args.Path, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove_counter: "+err.Error())
		oprot.WriteMessageBegin("remove_counter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("remove_counter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorBatchMutate struct {
	handler ICassandra
}

func (p *cassandraProcessorBatchMutate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewBatchMutateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("batch_mutate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewBatchMutateResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.BatchMutate(args.MutationMap, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batch_mutate: "+err.Error())
		oprot.WriteMessageBegin("batch_mutate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("batch_mutate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorAtomicBatchMutate struct {
	handler ICassandra
}

func (p *cassandraProcessorAtomicBatchMutate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAtomicBatchMutateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("atomic_batch_mutate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAtomicBatchMutateResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.AtomicBatchMutate(args.MutationMap, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing atomic_batch_mutate: "+err.Error())
		oprot.WriteMessageBegin("atomic_batch_mutate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("atomic_batch_mutate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorTruncate struct {
	handler ICassandra
}

func (p *cassandraProcessorTruncate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewTruncateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("truncate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewTruncateResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.Truncate(args.Cfname); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing truncate: "+err.Error())
		oprot.WriteMessageBegin("truncate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("truncate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeSchemaVersions struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeSchemaVersions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeSchemaVersionsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_schema_versions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeSchemaVersionsResult()
	if result.Success, result.Ire, err = p.handler.DescribeSchemaVersions(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_schema_versions: "+err.Error())
		oprot.WriteMessageBegin("describe_schema_versions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_schema_versions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeKeyspaces struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeKeyspaces) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeKeyspacesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_keyspaces", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeKeyspacesResult()
	if result.Success, result.Ire, err = p.handler.DescribeKeyspaces(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_keyspaces: "+err.Error())
		oprot.WriteMessageBegin("describe_keyspaces", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_keyspaces", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeClusterName struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeClusterName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeClusterNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_cluster_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeClusterNameResult()
	if result.Success, err = p.handler.DescribeClusterName(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_cluster_name: "+err.Error())
		oprot.WriteMessageBegin("describe_cluster_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_cluster_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeVersion struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeVersionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_version", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeVersionResult()
	if result.Success, err = p.handler.DescribeVersion(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_version: "+err.Error())
		oprot.WriteMessageBegin("describe_version", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_version", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeRing struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeRing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeRingArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_ring", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeRingResult()
	if result.Success, result.Ire, err = p.handler.DescribeRing(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_ring: "+err.Error())
		oprot.WriteMessageBegin("describe_ring", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_ring", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeTokenMap struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeTokenMap) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeTokenMapArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_token_map", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeTokenMapResult()
	if result.Success, result.Ire, err = p.handler.DescribeTokenMap(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_token_map: "+err.Error())
		oprot.WriteMessageBegin("describe_token_map", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_token_map", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribePartitioner struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribePartitioner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribePartitionerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_partitioner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribePartitionerResult()
	if result.Success, err = p.handler.DescribePartitioner(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_partitioner: "+err.Error())
		oprot.WriteMessageBegin("describe_partitioner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_partitioner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeSnitch struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeSnitch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeSnitchArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_snitch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeSnitchResult()
	if result.Success, err = p.handler.DescribeSnitch(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_snitch: "+err.Error())
		oprot.WriteMessageBegin("describe_snitch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_snitch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeKeyspaceResult()
	if result.Success, result.Nfe, result.Ire, err = p.handler.DescribeKeyspace(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_keyspace: "+err.Error())
		oprot.WriteMessageBegin("describe_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeSplits struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeSplits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeSplitsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_splits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeSplitsResult()
	if result.Success, result.Ire, err = p.handler.DescribeSplits(args.CfName, args.StartToken, args.EndToken, args.KeysPerSplit); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_splits: "+err.Error())
		oprot.WriteMessageBegin("describe_splits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_splits", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorTraceNextQuery struct {
	handler ICassandra
}

func (p *cassandraProcessorTraceNextQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewTraceNextQueryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("trace_next_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewTraceNextQueryResult()
	if result.Success, err = p.handler.TraceNextQuery(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing trace_next_query: "+err.Error())
		oprot.WriteMessageBegin("trace_next_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("trace_next_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeSplitsEx struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeSplitsEx) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeSplitsExArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describe_splits_ex", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeSplitsExResult()
	if result.Success, result.Ire, err = p.handler.DescribeSplitsEx(args.CfName, args.StartToken, args.EndToken, args.KeysPerSplit); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_splits_ex: "+err.Error())
		oprot.WriteMessageBegin("describe_splits_ex", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_splits_ex", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemAddColumnFamily struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemAddColumnFamily) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemAddColumnFamilyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("system_add_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemAddColumnFamilyResult()
	if result.Success, result.Ire, result.Sde, err = p.handler.SystemAddColumnFamily(args.CfDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_add_column_family: "+err.Error())
		oprot.WriteMessageBegin("system_add_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_add_column_family", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemDropColumnFamily struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemDropColumnFamily) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemDropColumnFamilyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("system_drop_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemDropColumnFamilyResult()
	if result.Success, result.Ire, result.Sde, err = p.handler.SystemDropColumnFamily(args.ColumnFamily); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_drop_column_family: "+err.Error())
		oprot.WriteMessageBegin("system_drop_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_drop_column_family", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemAddKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemAddKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemAddKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("system_add_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemAddKeyspaceResult()
	if result.Success, result.Ire, result.Sde, err = p.handler.SystemAddKeyspace(args.KsDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_add_keyspace: "+err.Error())
		oprot.WriteMessageBegin("system_add_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_add_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemDropKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemDropKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemDropKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("system_drop_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemDropKeyspaceResult()
	if result.Success, result.Ire, result.Sde, err = p.handler.SystemDropKeyspace(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_drop_keyspace: "+err.Error())
		oprot.WriteMessageBegin("system_drop_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_drop_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemUpdateKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemUpdateKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemUpdateKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("system_update_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemUpdateKeyspaceResult()
	if result.Success, result.Ire, result.Sde, err = p.handler.SystemUpdateKeyspace(args.KsDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_update_keyspace: "+err.Error())
		oprot.WriteMessageBegin("system_update_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_update_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemUpdateColumnFamily struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemUpdateColumnFamily) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemUpdateColumnFamilyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("system_update_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemUpdateColumnFamilyResult()
	if result.Success, result.Ire, result.Sde, err = p.handler.SystemUpdateColumnFamily(args.CfDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_update_column_family: "+err.Error())
		oprot.WriteMessageBegin("system_update_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_update_column_family", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorExecuteCqlQuery struct {
	handler ICassandra
}

func (p *cassandraProcessorExecuteCqlQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExecuteCqlQueryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute_cql_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExecuteCqlQueryResult()
	if result.Success, result.Ire, result.Ue, result.Te, result.Sde, err = p.handler.ExecuteCqlQuery(args.Query, args.Compression); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_cql_query: "+err.Error())
		oprot.WriteMessageBegin("execute_cql_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("execute_cql_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorExecuteCql3Query struct {
	handler ICassandra
}

func (p *cassandraProcessorExecuteCql3Query) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExecuteCql3QueryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute_cql3_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExecuteCql3QueryResult()
	if result.Success, result.Ire, result.Ue, result.Te, result.Sde, err = p.handler.ExecuteCql3Query(args.Query, args.Compression, args.Consistency); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_cql3_query: "+err.Error())
		oprot.WriteMessageBegin("execute_cql3_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("execute_cql3_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorPrepareCqlQuery struct {
	handler ICassandra
}

func (p *cassandraProcessorPrepareCqlQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewPrepareCqlQueryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("prepare_cql_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewPrepareCqlQueryResult()
	if result.Success, result.Ire, err = p.handler.PrepareCqlQuery(args.Query, args.Compression); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prepare_cql_query: "+err.Error())
		oprot.WriteMessageBegin("prepare_cql_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("prepare_cql_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorPrepareCql3Query struct {
	handler ICassandra
}

func (p *cassandraProcessorPrepareCql3Query) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewPrepareCql3QueryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("prepare_cql3_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewPrepareCql3QueryResult()
	if result.Success, result.Ire, err = p.handler.PrepareCql3Query(args.Query, args.Compression); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prepare_cql3_query: "+err.Error())
		oprot.WriteMessageBegin("prepare_cql3_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("prepare_cql3_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorExecutePreparedCqlQuery struct {
	handler ICassandra
}

func (p *cassandraProcessorExecutePreparedCqlQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExecutePreparedCqlQueryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute_prepared_cql_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExecutePreparedCqlQueryResult()
	if result.Success, result.Ire, result.Ue, result.Te, result.Sde, err = p.handler.ExecutePreparedCqlQuery(args.ItemId, args.Values); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_prepared_cql_query: "+err.Error())
		oprot.WriteMessageBegin("execute_prepared_cql_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("execute_prepared_cql_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorExecutePreparedCql3Query struct {
	handler ICassandra
}

func (p *cassandraProcessorExecutePreparedCql3Query) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExecutePreparedCql3QueryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute_prepared_cql3_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExecutePreparedCql3QueryResult()
	if result.Success, result.Ire, result.Ue, result.Te, result.Sde, err = p.handler.ExecutePreparedCql3Query(args.ItemId, args.Values, args.Consistency); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_prepared_cql3_query: "+err.Error())
		oprot.WriteMessageBegin("execute_prepared_cql3_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("execute_prepared_cql3_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSetCqlVersion struct {
	handler ICassandra
}

func (p *cassandraProcessorSetCqlVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetCqlVersionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_cql_version", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetCqlVersionResult()
	if result.Ire, err = p.handler.SetCqlVersion(args.Version); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_cql_version: "+err.Error())
		oprot.WriteMessageBegin("set_cql_version", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("set_cql_version", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - AuthRequest
 */
type LoginArgs struct {
	AuthRequest *AuthenticationRequest "auth_request" // 1
}

var tstructLoginArgs = thrift.NewTStruct("login_args", []thrift.TField{
	thrift.NewTField("auth_request", thrift.STRUCT, 1),
})

func (*LoginArgs) GetTStruct() thrift.TStruct { return tstructLoginArgs }
func NewLoginArgs() *LoginArgs {
	output := &LoginArgs{}
	{
	}
	return output
}

func (p *LoginArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructLoginArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructLoginArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //AuthenticationRequest
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.AuthRequest = NewAuthenticationRequest()
	err741 := p.AuthRequest.Read(iprot)
	if err741 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.AuthRequestAuthenticationRequest", err741)
	}
	return err
}

func (p *LoginArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("login_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.AuthRequest != nil {
		err = oprot.WriteFieldBegin("auth_request", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "auth_request", p.ThriftName(), err)
		}
		err = p.AuthRequest.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AuthenticationRequest", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "auth_request", p.ThriftName(), err)
		}
	}
	return err
}

func (p *LoginArgs) TStructName() string {
	return "LoginArgs"
}

func (p *LoginArgs) ThriftName() string {
	return "login_args"
}

func (p *LoginArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.AuthRequest
	}
	return nil
}

func (p *LoginArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("auth_request", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Authnx
 *  - Authzx
 */
type LoginResult struct {
	Authnx *AuthenticationException "authnx" // 1
	Authzx *AuthorizationException  "authzx" // 2
}

var tstructLoginResult = thrift.NewTStruct("login_result", []thrift.TField{
	thrift.NewTField("authnx", thrift.STRUCT, 1),
	thrift.NewTField("authzx", thrift.STRUCT, 2),
})

func (*LoginResult) GetTStruct() thrift.TStruct { return tstructLoginResult }
func NewLoginResult() *LoginResult {
	output := &LoginResult{}
	{
	}
	return output
}

func (p *LoginResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructLoginResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructLoginResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //AuthenticationException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //AuthorizationException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Authnx = NewAuthenticationException()
	err744 := p.Authnx.Read(iprot)
	if err744 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.AuthnxAuthenticationException", err744)
	}
	return err
}

func (p *LoginResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Authzx = NewAuthorizationException()
	err747 := p.Authzx.Read(iprot)
	if err747 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.AuthzxAuthorizationException", err747)
	}
	return err
}

func (p *LoginResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("login_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Authzx != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Authnx != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Authnx != nil {
		err = oprot.WriteFieldBegin("authnx", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "authnx", p.ThriftName(), err)
		}
		err = p.Authnx.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AuthenticationException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "authnx", p.ThriftName(), err)
		}
	}
	return err
}

func (p *LoginResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Authzx != nil {
		err = oprot.WriteFieldBegin("authzx", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "authzx", p.ThriftName(), err)
		}
		err = p.Authzx.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AuthorizationException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "authzx", p.ThriftName(), err)
		}
	}
	return err
}

func (p *LoginResult) TStructName() string {
	return "LoginResult"
}

func (p *LoginResult) ThriftName() string {
	return "login_result"
}

func (p *LoginResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Authnx
	case 2:
		return p.Authzx
	}
	return nil
}

func (p *LoginResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("authnx", thrift.STRUCT, 1),
		thrift.NewTField("authzx", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type SetKeyspaceArgs struct {
	Keyspace string "keyspace" // 1
}

var tstructSetKeyspaceArgs = thrift.NewTStruct("set_keyspace_args", []thrift.TField{
	thrift.NewTField("keyspace", thrift.STRING, 1),
})

func (*SetKeyspaceArgs) GetTStruct() thrift.TStruct { return tstructSetKeyspaceArgs }
func NewSetKeyspaceArgs() *SetKeyspaceArgs {
	output := &SetKeyspaceArgs{}
	{
	}
	return output
}

func (p *SetKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSetKeyspaceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSetKeyspaceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v748, err749 := iprot.ReadString()
	if err749 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err749)
	}
	p.Keyspace = v748
	return err
}

func (p *SetKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("set_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Keyspace)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceArgs) TStructName() string {
	return "SetKeyspaceArgs"
}

func (p *SetKeyspaceArgs) ThriftName() string {
	return "set_keyspace_args"
}

func (p *SetKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *SetKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Ire
 */
type SetKeyspaceResult struct {
	Ire *InvalidRequestException "ire" // 1
}

var tstructSetKeyspaceResult = thrift.NewTStruct("set_keyspace_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*SetKeyspaceResult) GetTStruct() thrift.TStruct { return tstructSetKeyspaceResult }
func NewSetKeyspaceResult() *SetKeyspaceResult {
	output := &SetKeyspaceResult{}
	{
	}
	return output
}

func (p *SetKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSetKeyspaceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSetKeyspaceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err752 := p.Ire.Read(iprot)
	if err752 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err752)
	}
	return err
}

func (p *SetKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("set_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SetKeyspaceResult) TStructName() string {
	return "SetKeyspaceResult"
}

func (p *SetKeyspaceResult) ThriftName() string {
	return "set_keyspace_result"
}

func (p *SetKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SetKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnPath
 *  - ConsistencyLevel
 */
type GetArgs struct {
	Key              []byte           "key"               // 1
	ColumnPath       *ColumnPath      "column_path"       // 2
	ConsistencyLevel ConsistencyLevel "consistency_level" // 3
}

var tstructGetArgs = thrift.NewTStruct("get_args", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("column_path", thrift.STRUCT, 2),
	thrift.NewTField("consistency_level", thrift.I32, 3),
})

func (*GetArgs) GetTStruct() thrift.TStruct { return tstructGetArgs }
func NewGetArgs() *GetArgs {
	output := &GetArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnPath
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v753, err754 := iprot.ReadBinary()
	if err754 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err754)
	}
	p.Key = v753
	return err
}

func (p *GetArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnPath = NewColumnPath()
	err757 := p.ColumnPath.Read(iprot)
	if err757 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnPathColumnPath", err757)
	}
	return err
}

func (p *GetArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v758, err759 := iprot.ReadI32()
	if err759 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "consistency_level", p.ThriftName(), err759)
	}
	p.ConsistencyLevel = ConsistencyLevel(v758)
	return err
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnPath != nil {
		err = oprot.WriteFieldBegin("column_path", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
		err = p.ColumnPath.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnPath", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) TStructName() string {
	return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
	return "get_args"
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnPath
	case 3:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_path", thrift.STRUCT, 2),
		thrift.NewTField("consistency_level", thrift.I32, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Nfe
 *  - Ue
 *  - Te
 */
type GetResult struct {
	Success *ColumnOrSuperColumn     "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Nfe     *NotFoundException       "nfe"     // 2
	Ue      *UnavailableException    "ue"      // 3
	Te      *TimedOutException       "te"      // 4
}

var tstructGetResult = thrift.NewTStruct("get_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("nfe", thrift.STRUCT, 2),
	thrift.NewTField("ue", thrift.STRUCT, 3),
	thrift.NewTField("te", thrift.STRUCT, 4),
})

func (*GetResult) GetTStruct() thrift.TStruct { return tstructGetResult }
func NewGetResult() *GetResult {
	output := &GetResult{}
	{
	}
	return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ColumnOrSuperColumn
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //NotFoundException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewColumnOrSuperColumn()
	err762 := p.Success.Read(iprot)
	if err762 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessColumnOrSuperColumn", err762)
	}
	return err
}

func (p *GetResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err765 := p.Ire.Read(iprot)
	if err765 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err765)
	}
	return err
}

func (p *GetResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Nfe = NewNotFoundException()
	err768 := p.Nfe.Read(iprot)
	if err768 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.NfeNotFoundException", err768)
	}
	return err
}

func (p *GetResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err771 := p.Ue.Read(iprot)
	if err771 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err771)
	}
	return err
}

func (p *GetResult) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err774 := p.Te.Read(iprot)
	if err774 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err774)
	}
	return err
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField4(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Nfe != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Nfe != nil {
		err = oprot.WriteFieldBegin("nfe", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "nfe", p.ThriftName(), err)
		}
		err = p.Nfe.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("NotFoundException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "nfe", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) TStructName() string {
	return "GetResult"
}

func (p *GetResult) ThriftName() string {
	return "get_result"
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Nfe
	case 3:
		return p.Ue
	case 4:
		return p.Te
	}
	return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("nfe", thrift.STRUCT, 2),
		thrift.NewTField("ue", thrift.STRUCT, 3),
		thrift.NewTField("te", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type GetSliceArgs struct {
	Key              []byte           "key"               // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructGetSliceArgs = thrift.NewTStruct("get_slice_args", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("column_parent", thrift.STRUCT, 2),
	thrift.NewTField("predicate", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*GetSliceArgs) GetTStruct() thrift.TStruct { return tstructGetSliceArgs }
func NewGetSliceArgs() *GetSliceArgs {
	output := &GetSliceArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetSliceArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *GetSliceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetSliceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetSliceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //SlicePredicate
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v775, err776 := iprot.ReadBinary()
	if err776 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err776)
	}
	p.Key = v775
	return err
}

func (p *GetSliceArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err779 := p.ColumnParent.Read(iprot)
	if err779 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err779)
	}
	return err
}

func (p *GetSliceArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err782 := p.Predicate.Read(iprot)
	if err782 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err782)
	}
	return err
}

func (p *GetSliceArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v783, err784 := iprot.ReadI32()
	if err784 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err784)
	}
	p.ConsistencyLevel = ConsistencyLevel(v783)
	return err
}

func (p *GetSliceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_slice_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceArgs) TStructName() string {
	return "GetSliceArgs"
}

func (p *GetSliceArgs) ThriftName() string {
	return "get_slice_args"
}

func (p *GetSliceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetSliceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetSliceResult struct {
	Success []*ColumnOrSuperColumn   "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

var tstructGetSliceResult = thrift.NewTStruct("get_slice_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*GetSliceResult) GetTStruct() thrift.TStruct { return tstructGetSliceResult }
func NewGetSliceResult() *GetSliceResult {
	output := &GetSliceResult{}
	{
	}
	return output
}

func (p *GetSliceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetSliceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetSliceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype790, _size787, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype790
	p.Success = make([]*ColumnOrSuperColumn, _size787, _size787)
	for i := 0; i < _size787; i++ {
		_elem792 := NewColumnOrSuperColumn()
		err795 := _elem792.Read(iprot)
		if err795 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem792ColumnOrSuperColumn", err795)
		}
		p.Success[i] = _elem792
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetSliceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err798 := p.Ire.Read(iprot)
	if err798 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err798)
	}
	return err
}

func (p *GetSliceResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err801 := p.Ue.Read(iprot)
	if err801 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err801)
	}
	return err
}

func (p *GetSliceResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err804 := p.Te.Read(iprot)
	if err804 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err804)
	}
	return err
}

func (p *GetSliceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_slice_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter805 := range p.Success {
			err = Iter805.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) TStructName() string {
	return "GetSliceResult"
}

func (p *GetSliceResult) ThriftName() string {
	return "get_slice_result"
}

func (p *GetSliceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetSliceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type GetCountArgs struct {
	Key              []byte           "key"               // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructGetCountArgs = thrift.NewTStruct("get_count_args", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("column_parent", thrift.STRUCT, 2),
	thrift.NewTField("predicate", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*GetCountArgs) GetTStruct() thrift.TStruct { return tstructGetCountArgs }
func NewGetCountArgs() *GetCountArgs {
	output := &GetCountArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetCountArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *GetCountArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetCountArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetCountArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //SlicePredicate
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v806, err807 := iprot.ReadBinary()
	if err807 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err807)
	}
	p.Key = v806
	return err
}

func (p *GetCountArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err810 := p.ColumnParent.Read(iprot)
	if err810 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err810)
	}
	return err
}

func (p *GetCountArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err813 := p.Predicate.Read(iprot)
	if err813 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err813)
	}
	return err
}

func (p *GetCountArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v814, err815 := iprot.ReadI32()
	if err815 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err815)
	}
	p.ConsistencyLevel = ConsistencyLevel(v814)
	return err
}

func (p *GetCountArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_count_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountArgs) TStructName() string {
	return "GetCountArgs"
}

func (p *GetCountArgs) ThriftName() string {
	return "get_count_args"
}

func (p *GetCountArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetCountArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetCountResult struct {
	Success int32                    "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

var tstructGetCountResult = thrift.NewTStruct("get_count_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*GetCountResult) GetTStruct() thrift.TStruct { return tstructGetCountResult }
func NewGetCountResult() *GetCountResult {
	output := &GetCountResult{}
	{
	}
	return output
}

func (p *GetCountResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetCountResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetCountResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v816, err817 := iprot.ReadI32()
	if err817 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err817)
	}
	p.Success = v816
	return err
}

func (p *GetCountResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err820 := p.Ire.Read(iprot)
	if err820 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err820)
	}
	return err
}

func (p *GetCountResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err823 := p.Ue.Read(iprot)
	if err823 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err823)
	}
	return err
}

func (p *GetCountResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err826 := p.Te.Read(iprot)
	if err826 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err826)
	}
	return err
}

func (p *GetCountResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_count_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *GetCountResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountResult) TStructName() string {
	return "GetCountResult"
}

func (p *GetCountResult) ThriftName() string {
	return "get_count_result"
}

func (p *GetCountResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetCountResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type MultigetSliceArgs struct {
	Keys             [][]byte         "keys"              // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructMultigetSliceArgs = thrift.NewTStruct("multiget_slice_args", []thrift.TField{
	thrift.NewTField("keys", thrift.LIST, 1),
	thrift.NewTField("column_parent", thrift.STRUCT, 2),
	thrift.NewTField("predicate", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*MultigetSliceArgs) GetTStruct() thrift.TStruct { return tstructMultigetSliceArgs }
func NewMultigetSliceArgs() *MultigetSliceArgs {
	output := &MultigetSliceArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *MultigetSliceArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *MultigetSliceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMultigetSliceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMultigetSliceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.LIST {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //SlicePredicate
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype832, _size829, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Keys", "", err)
	}
	_ = _etype832
	p.Keys = make([][]byte, _size829, _size829)
	for i := 0; i < _size829; i++ {
		v835, err836 := iprot.ReadBinary()
		if err836 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem834", "", err836)
		}
		_elem834 := v835
		p.Keys[i] = _elem834
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MultigetSliceArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err839 := p.ColumnParent.Read(iprot)
	if err839 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err839)
	}
	return err
}

func (p *MultigetSliceArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err842 := p.Predicate.Read(iprot)
	if err842 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err842)
	}
	return err
}

func (p *MultigetSliceArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v843, err844 := iprot.ReadI32()
	if err844 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err844)
	}
	p.ConsistencyLevel = ConsistencyLevel(v843)
	return err
}

func (p *MultigetSliceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_slice_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Keys != nil {
		err = oprot.WriteFieldBegin("keys", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Keys))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter845 := range p.Keys {
			err = oprot.WriteBinary(Iter845)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter845", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceArgs) TStructName() string {
	return "MultigetSliceArgs"
}

func (p *MultigetSliceArgs) ThriftName() string {
	return "multiget_slice_args"
}

func (p *MultigetSliceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keys
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *MultigetSliceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keys", thrift.LIST, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type MultigetSliceResult struct {
	Success map[string][]*ColumnOrSuperColumn "success" // 0
	Ire     *InvalidRequestException          "ire"     // 1
	Ue      *UnavailableException             "ue"      // 2
	Te      *TimedOutException                "te"      // 3
}

var tstructMultigetSliceResult = thrift.NewTStruct("multiget_slice_result", []thrift.TField{
	thrift.NewTField("success", thrift.MAP, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*MultigetSliceResult) GetTStruct() thrift.TStruct { return tstructMultigetSliceResult }
func NewMultigetSliceResult() *MultigetSliceResult {
	output := &MultigetSliceResult{}
	{
	}
	return output
}

func (p *MultigetSliceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMultigetSliceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMultigetSliceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.MAP {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype849, _vtype850, _size848, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_, _ = _ktype849, _vtype850
	p.Success = make(map[string][]*ColumnOrSuperColumn, _size848)
	for i := 0; i < _size848; i++ {
		v855, err856 := iprot.ReadString()
		if err856 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key853", "", err856)
		}
		_key853 := v855
		_etype862, _size859, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val854", "", err)
		}
		_ = _etype862
		_val854 := make([]*ColumnOrSuperColumn, _size859, _size859)
		for i := 0; i < _size859; i++ {
			_elem864 := NewColumnOrSuperColumn()
			err867 := _elem864.Read(iprot)
			if err867 != nil {
				return thrift.NewTProtocolExceptionReadStruct("_elem864ColumnOrSuperColumn", err867)
			}
			_val854[i] = _elem864
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.Success[_key853] = _val854
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MultigetSliceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err870 := p.Ire.Read(iprot)
	if err870 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err870)
	}
	return err
}

func (p *MultigetSliceResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err873 := p.Ue.Read(iprot)
	if err873 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err873)
	}
	return err
}

func (p *MultigetSliceResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err876 := p.Te.Read(iprot)
	if err876 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err876)
	}
	return err
}

func (p *MultigetSliceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_slice_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter877, Viter878 := range p.Success {
			err = oprot.WriteString(Kiter877)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter877", "", err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, len(Viter878))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter879 := range Viter878 {
				err = Iter879.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) TStructName() string {
	return "MultigetSliceResult"
}

func (p *MultigetSliceResult) ThriftName() string {
	return "multiget_slice_result"
}

func (p *MultigetSliceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *MultigetSliceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type MultigetCountArgs struct {
	Keys             [][]byte         "keys"              // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructMultigetCountArgs = thrift.NewTStruct("multiget_count_args", []thrift.TField{
	thrift.NewTField("keys", thrift.LIST, 1),
	thrift.NewTField("column_parent", thrift.STRUCT, 2),
	thrift.NewTField("predicate", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*MultigetCountArgs) GetTStruct() thrift.TStruct { return tstructMultigetCountArgs }
func NewMultigetCountArgs() *MultigetCountArgs {
	output := &MultigetCountArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *MultigetCountArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *MultigetCountArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMultigetCountArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMultigetCountArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.LIST {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //SlicePredicate
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype885, _size882, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Keys", "", err)
	}
	_ = _etype885
	p.Keys = make([][]byte, _size882, _size882)
	for i := 0; i < _size882; i++ {
		v888, err889 := iprot.ReadBinary()
		if err889 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem887", "", err889)
		}
		_elem887 := v888
		p.Keys[i] = _elem887
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MultigetCountArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err892 := p.ColumnParent.Read(iprot)
	if err892 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err892)
	}
	return err
}

func (p *MultigetCountArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err895 := p.Predicate.Read(iprot)
	if err895 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err895)
	}
	return err
}

func (p *MultigetCountArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v896, err897 := iprot.ReadI32()
	if err897 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err897)
	}
	p.ConsistencyLevel = ConsistencyLevel(v896)
	return err
}

func (p *MultigetCountArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_count_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Keys != nil {
		err = oprot.WriteFieldBegin("keys", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Keys))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter898 := range p.Keys {
			err = oprot.WriteBinary(Iter898)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter898", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountArgs) TStructName() string {
	return "MultigetCountArgs"
}

func (p *MultigetCountArgs) ThriftName() string {
	return "multiget_count_args"
}

func (p *MultigetCountArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keys
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *MultigetCountArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keys", thrift.LIST, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type MultigetCountResult struct {
	Success map[string]int32         "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

var tstructMultigetCountResult = thrift.NewTStruct("multiget_count_result", []thrift.TField{
	thrift.NewTField("success", thrift.MAP, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*MultigetCountResult) GetTStruct() thrift.TStruct { return tstructMultigetCountResult }
func NewMultigetCountResult() *MultigetCountResult {
	output := &MultigetCountResult{}
	{
	}
	return output
}

func (p *MultigetCountResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMultigetCountResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMultigetCountResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.MAP {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype902, _vtype903, _size901, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_, _ = _ktype902, _vtype903
	p.Success = make(map[string]int32, _size901)
	for i := 0; i < _size901; i++ {
		v908, err909 := iprot.ReadString()
		if err909 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key906", "", err909)
		}
		_key906 := v908
		v910, err911 := iprot.ReadI32()
		if err911 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val907", "", err911)
		}
		_val907 := v910
		p.Success[_key906] = _val907
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MultigetCountResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err914 := p.Ire.Read(iprot)
	if err914 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err914)
	}
	return err
}

func (p *MultigetCountResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err917 := p.Ue.Read(iprot)
	if err917 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err917)
	}
	return err
}

func (p *MultigetCountResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err920 := p.Te.Read(iprot)
	if err920 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err920)
	}
	return err
}

func (p *MultigetCountResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_count_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter921, Viter922 := range p.Success {
			err = oprot.WriteString(Kiter921)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter921", "", err)
			}
			err = oprot.WriteI32(int32(Viter922))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter922", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) TStructName() string {
	return "MultigetCountResult"
}

func (p *MultigetCountResult) ThriftName() string {
	return "multiget_count_result"
}

func (p *MultigetCountResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *MultigetCountResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - ColumnParent
 *  - Predicate
 *  - RangeA1
 *  - ConsistencyLevel
 */
type GetRangeSlicesArgs struct {
	ColumnParent     *ColumnParent    "column_parent"     // 1
	Predicate        *SlicePredicate  "predicate"         // 2
	RangeA1          *KeyRange        "range"             // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructGetRangeSlicesArgs = thrift.NewTStruct("get_range_slices_args", []thrift.TField{
	thrift.NewTField("column_parent", thrift.STRUCT, 1),
	thrift.NewTField("predicate", thrift.STRUCT, 2),
	thrift.NewTField("range", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*GetRangeSlicesArgs) GetTStruct() thrift.TStruct { return tstructGetRangeSlicesArgs }
func NewGetRangeSlicesArgs() *GetRangeSlicesArgs {
	output := &GetRangeSlicesArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetRangeSlicesArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *GetRangeSlicesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRangeSlicesArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRangeSlicesArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SlicePredicate
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //KeyRange
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err925 := p.ColumnParent.Read(iprot)
	if err925 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err925)
	}
	return err
}

func (p *GetRangeSlicesArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err928 := p.Predicate.Read(iprot)
	if err928 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err928)
	}
	return err
}

func (p *GetRangeSlicesArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.RangeA1 = NewKeyRange()
	err931 := p.RangeA1.Read(iprot)
	if err931 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.RangeA1KeyRange", err931)
	}
	return err
}

func (p *GetRangeSlicesArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v932, err933 := iprot.ReadI32()
	if err933 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err933)
	}
	p.ConsistencyLevel = ConsistencyLevel(v932)
	return err
}

func (p *GetRangeSlicesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_range_slices_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RangeA1 != nil {
		err = oprot.WriteFieldBegin("range", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "range", p.ThriftName(), err)
		}
		err = p.RangeA1.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KeyRange", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "range", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesArgs) TStructName() string {
	return "GetRangeSlicesArgs"
}

func (p *GetRangeSlicesArgs) ThriftName() string {
	return "get_range_slices_args"
}

func (p *GetRangeSlicesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnParent
	case 2:
		return p.Predicate
	case 3:
		return p.RangeA1
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetRangeSlicesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_parent", thrift.STRUCT, 1),
		thrift.NewTField("predicate", thrift.STRUCT, 2),
		thrift.NewTField("range", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetRangeSlicesResult struct {
	Success []*KeySlice              "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

var tstructGetRangeSlicesResult = thrift.NewTStruct("get_range_slices_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*GetRangeSlicesResult) GetTStruct() thrift.TStruct { return tstructGetRangeSlicesResult }
func NewGetRangeSlicesResult() *GetRangeSlicesResult {
	output := &GetRangeSlicesResult{}
	{
	}
	return output
}

func (p *GetRangeSlicesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRangeSlicesResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRangeSlicesResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype939, _size936, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype939
	p.Success = make([]*KeySlice, _size936, _size936)
	for i := 0; i < _size936; i++ {
		_elem941 := NewKeySlice()
		err944 := _elem941.Read(iprot)
		if err944 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem941KeySlice", err944)
		}
		p.Success[i] = _elem941
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRangeSlicesResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err947 := p.Ire.Read(iprot)
	if err947 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err947)
	}
	return err
}

func (p *GetRangeSlicesResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err950 := p.Ue.Read(iprot)
	if err950 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err950)
	}
	return err
}

func (p *GetRangeSlicesResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err953 := p.Te.Read(iprot)
	if err953 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err953)
	}
	return err
}

func (p *GetRangeSlicesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_range_slices_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter954 := range p.Success {
			err = Iter954.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("KeySlice", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) TStructName() string {
	return "GetRangeSlicesResult"
}

func (p *GetRangeSlicesResult) ThriftName() string {
	return "get_range_slices_result"
}

func (p *GetRangeSlicesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetRangeSlicesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - ColumnFamily
 *  - RangeA1
 *  - StartColumn
 *  - ConsistencyLevel
 */
type GetPagedSliceArgs struct {
	ColumnFamily     string           "column_family"     // 1
	RangeA1          *KeyRange        "range"             // 2
	StartColumn      []byte           "start_column"      // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructGetPagedSliceArgs = thrift.NewTStruct("get_paged_slice_args", []thrift.TField{
	thrift.NewTField("column_family", thrift.STRING, 1),
	thrift.NewTField("range", thrift.STRUCT, 2),
	thrift.NewTField("start_column", thrift.STRING, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*GetPagedSliceArgs) GetTStruct() thrift.TStruct { return tstructGetPagedSliceArgs }
func NewGetPagedSliceArgs() *GetPagedSliceArgs {
	output := &GetPagedSliceArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetPagedSliceArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *GetPagedSliceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetPagedSliceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetPagedSliceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //KeyRange
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetPagedSliceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v955, err956 := iprot.ReadString()
	if err956 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "column_family", p.ThriftName(), err956)
	}
	p.ColumnFamily = v955
	return err
}

func (p *GetPagedSliceArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.RangeA1 = NewKeyRange()
	err959 := p.RangeA1.Read(iprot)
	if err959 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.RangeA1KeyRange", err959)
	}
	return err
}

func (p *GetPagedSliceArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v960, err961 := iprot.ReadBinary()
	if err961 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "start_column", p.ThriftName(), err961)
	}
	p.StartColumn = v960
	return err
}

func (p *GetPagedSliceArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v962, err963 := iprot.ReadI32()
	if err963 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err963)
	}
	p.ConsistencyLevel = ConsistencyLevel(v962)
	return err
}

func (p *GetPagedSliceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_paged_slice_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetPagedSliceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("column_family", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.ColumnFamily)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	return err
}

func (p *GetPagedSliceArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RangeA1 != nil {
		err = oprot.WriteFieldBegin("range", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "range", p.ThriftName(), err)
		}
		err = p.RangeA1.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KeyRange", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "range", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetPagedSliceArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartColumn != nil {
		err = oprot.WriteFieldBegin("start_column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartColumn)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetPagedSliceArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetPagedSliceArgs) TStructName() string {
	return "GetPagedSliceArgs"
}

func (p *GetPagedSliceArgs) ThriftName() string {
	return "get_paged_slice_args"
}

func (p *GetPagedSliceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnFamily
	case 2:
		return p.RangeA1
	case 3:
		return p.StartColumn
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetPagedSliceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_family", thrift.STRING, 1),
		thrift.NewTField("range", thrift.STRUCT, 2),
		thrift.NewTField("start_column", thrift.STRING, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetPagedSliceResult struct {
	Success []*KeySlice              "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

var tstructGetPagedSliceResult = thrift.NewTStruct("get_paged_slice_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*GetPagedSliceResult) GetTStruct() thrift.TStruct { return tstructGetPagedSliceResult }
func NewGetPagedSliceResult() *GetPagedSliceResult {
	output := &GetPagedSliceResult{}
	{
	}
	return output
}

func (p *GetPagedSliceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetPagedSliceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetPagedSliceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetPagedSliceResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype969, _size966, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype969
	p.Success = make([]*KeySlice, _size966, _size966)
	for i := 0; i < _size966; i++ {
		_elem971 := NewKeySlice()
		err974 := _elem971.Read(iprot)
		if err974 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem971KeySlice", err974)
		}
		p.Success[i] = _elem971
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetPagedSliceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err977 := p.Ire.Read(iprot)
	if err977 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err977)
	}
	return err
}

func (p *GetPagedSliceResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err980 := p.Ue.Read(iprot)
	if err980 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err980)
	}
	return err
}

func (p *GetPagedSliceResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err983 := p.Te.Read(iprot)
	if err983 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err983)
	}
	return err
}

func (p *GetPagedSliceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_paged_slice_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetPagedSliceResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter984 := range p.Success {
			err = Iter984.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("KeySlice", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetPagedSliceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetPagedSliceResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetPagedSliceResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetPagedSliceResult) TStructName() string {
	return "GetPagedSliceResult"
}

func (p *GetPagedSliceResult) ThriftName() string {
	return "get_paged_slice_result"
}

func (p *GetPagedSliceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetPagedSliceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - ColumnParent
 *  - IndexClause
 *  - ColumnPredicate
 *  - ConsistencyLevel
 */
type GetIndexedSlicesArgs struct {
	ColumnParent     *ColumnParent    "column_parent"     // 1
	IndexClause      *IndexClause     "index_clause"      // 2
	ColumnPredicate  *SlicePredicate  "column_predicate"  // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructGetIndexedSlicesArgs = thrift.NewTStruct("get_indexed_slices_args", []thrift.TField{
	thrift.NewTField("column_parent", thrift.STRUCT, 1),
	thrift.NewTField("index_clause", thrift.STRUCT, 2),
	thrift.NewTField("column_predicate", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*GetIndexedSlicesArgs) GetTStruct() thrift.TStruct { return tstructGetIndexedSlicesArgs }
func NewGetIndexedSlicesArgs() *GetIndexedSlicesArgs {
	output := &GetIndexedSlicesArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetIndexedSlicesArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *GetIndexedSlicesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetIndexedSlicesArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetIndexedSlicesArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IndexClause
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //SlicePredicate
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err987 := p.ColumnParent.Read(iprot)
	if err987 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err987)
	}
	return err
}

func (p *GetIndexedSlicesArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.IndexClause = NewIndexClause()
	err990 := p.IndexClause.Read(iprot)
	if err990 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IndexClauseIndexClause", err990)
	}
	return err
}

func (p *GetIndexedSlicesArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnPredicate = NewSlicePredicate()
	err993 := p.ColumnPredicate.Read(iprot)
	if err993 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnPredicateSlicePredicate", err993)
	}
	return err
}

func (p *GetIndexedSlicesArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v994, err995 := iprot.ReadI32()
	if err995 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err995)
	}
	p.ConsistencyLevel = ConsistencyLevel(v994)
	return err
}

func (p *GetIndexedSlicesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_indexed_slices_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IndexClause != nil {
		err = oprot.WriteFieldBegin("index_clause", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "index_clause", p.ThriftName(), err)
		}
		err = p.IndexClause.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IndexClause", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "index_clause", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnPredicate != nil {
		err = oprot.WriteFieldBegin("column_predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_predicate", p.ThriftName(), err)
		}
		err = p.ColumnPredicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesArgs) TStructName() string {
	return "GetIndexedSlicesArgs"
}

func (p *GetIndexedSlicesArgs) ThriftName() string {
	return "get_indexed_slices_args"
}

func (p *GetIndexedSlicesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnParent
	case 2:
		return p.IndexClause
	case 3:
		return p.ColumnPredicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetIndexedSlicesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_parent", thrift.STRUCT, 1),
		thrift.NewTField("index_clause", thrift.STRUCT, 2),
		thrift.NewTField("column_predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetIndexedSlicesResult struct {
	Success []*KeySlice              "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

var tstructGetIndexedSlicesResult = thrift.NewTStruct("get_indexed_slices_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*GetIndexedSlicesResult) GetTStruct() thrift.TStruct { return tstructGetIndexedSlicesResult }
func NewGetIndexedSlicesResult() *GetIndexedSlicesResult {
	output := &GetIndexedSlicesResult{}
	{
	}
	return output
}

func (p *GetIndexedSlicesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetIndexedSlicesResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetIndexedSlicesResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1001, _size998, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1001
	p.Success = make([]*KeySlice, _size998, _size998)
	for i := 0; i < _size998; i++ {
		_elem1003 := NewKeySlice()
		err1006 := _elem1003.Read(iprot)
		if err1006 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1003KeySlice", err1006)
		}
		p.Success[i] = _elem1003
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetIndexedSlicesResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1009 := p.Ire.Read(iprot)
	if err1009 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1009)
	}
	return err
}

func (p *GetIndexedSlicesResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1012 := p.Ue.Read(iprot)
	if err1012 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1012)
	}
	return err
}

func (p *GetIndexedSlicesResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1015 := p.Te.Read(iprot)
	if err1015 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1015)
	}
	return err
}

func (p *GetIndexedSlicesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_indexed_slices_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1016 := range p.Success {
			err = Iter1016.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("KeySlice", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) TStructName() string {
	return "GetIndexedSlicesResult"
}

func (p *GetIndexedSlicesResult) ThriftName() string {
	return "get_indexed_slices_result"
}

func (p *GetIndexedSlicesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetIndexedSlicesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnParent
 *  - Column
 *  - ConsistencyLevel
 */
type InsertArgs struct {
	Key              []byte           "key"               // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Column           *Column          "column"            // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructInsertArgs = thrift.NewTStruct("insert_args", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("column_parent", thrift.STRUCT, 2),
	thrift.NewTField("column", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*InsertArgs) GetTStruct() thrift.TStruct { return tstructInsertArgs }
func NewInsertArgs() *InsertArgs {
	output := &InsertArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *InsertArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *InsertArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructInsertArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructInsertArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Column
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1017, err1018 := iprot.ReadBinary()
	if err1018 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err1018)
	}
	p.Key = v1017
	return err
}

func (p *InsertArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err1021 := p.ColumnParent.Read(iprot)
	if err1021 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err1021)
	}
	return err
}

func (p *InsertArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Column = NewColumn()
	err1024 := p.Column.Read(iprot)
	if err1024 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnColumn", err1024)
	}
	return err
}

func (p *InsertArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1025, err1026 := iprot.ReadI32()
	if err1026 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err1026)
	}
	p.ConsistencyLevel = ConsistencyLevel(v1025)
	return err
}

func (p *InsertArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("insert_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = p.Column.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Column", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertArgs) TStructName() string {
	return "InsertArgs"
}

func (p *InsertArgs) ThriftName() string {
	return "insert_args"
}

func (p *InsertArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnParent
	case 3:
		return p.Column
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *InsertArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("column", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type InsertResult struct {
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

var tstructInsertResult = thrift.NewTStruct("insert_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*InsertResult) GetTStruct() thrift.TStruct { return tstructInsertResult }
func NewInsertResult() *InsertResult {
	output := &InsertResult{}
	{
	}
	return output
}

func (p *InsertResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructInsertResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructInsertResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1029 := p.Ire.Read(iprot)
	if err1029 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1029)
	}
	return err
}

func (p *InsertResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1032 := p.Ue.Read(iprot)
	if err1032 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1032)
	}
	return err
}

func (p *InsertResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1035 := p.Te.Read(iprot)
	if err1035 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1035)
	}
	return err
}

func (p *InsertResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("insert_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertResult) TStructName() string {
	return "InsertResult"
}

func (p *InsertResult) ThriftName() string {
	return "insert_result"
}

func (p *InsertResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *InsertResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnParent
 *  - Column
 *  - ConsistencyLevel
 */
type AddArgs struct {
	Key              []byte           "key"               // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Column           *CounterColumn   "column"            // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructAddArgs = thrift.NewTStruct("add_args", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("column_parent", thrift.STRUCT, 2),
	thrift.NewTField("column", thrift.STRUCT, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*AddArgs) GetTStruct() thrift.TStruct { return tstructAddArgs }
func NewAddArgs() *AddArgs {
	output := &AddArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *AddArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *AddArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAddArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAddArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnParent
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //CounterColumn
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AddArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1036, err1037 := iprot.ReadBinary()
	if err1037 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err1037)
	}
	p.Key = v1036
	return err
}

func (p *AddArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err1040 := p.ColumnParent.Read(iprot)
	if err1040 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err1040)
	}
	return err
}

func (p *AddArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Column = NewCounterColumn()
	err1043 := p.Column.Read(iprot)
	if err1043 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnCounterColumn", err1043)
	}
	return err
}

func (p *AddArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1044, err1045 := iprot.ReadI32()
	if err1045 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err1045)
	}
	p.ConsistencyLevel = ConsistencyLevel(v1044)
	return err
}

func (p *AddArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("add_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AddArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AddArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AddArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = p.Column.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CounterColumn", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AddArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AddArgs) TStructName() string {
	return "AddArgs"
}

func (p *AddArgs) ThriftName() string {
	return "add_args"
}

func (p *AddArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnParent
	case 3:
		return p.Column
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *AddArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("column", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type AddResult struct {
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

var tstructAddResult = thrift.NewTStruct("add_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*AddResult) GetTStruct() thrift.TStruct { return tstructAddResult }
func NewAddResult() *AddResult {
	output := &AddResult{}
	{
	}
	return output
}

func (p *AddResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAddResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAddResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AddResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1048 := p.Ire.Read(iprot)
	if err1048 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1048)
	}
	return err
}

func (p *AddResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1051 := p.Ue.Read(iprot)
	if err1051 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1051)
	}
	return err
}

func (p *AddResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1054 := p.Te.Read(iprot)
	if err1054 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1054)
	}
	return err
}

func (p *AddResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("add_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AddResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AddResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AddResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AddResult) TStructName() string {
	return "AddResult"
}

func (p *AddResult) ThriftName() string {
	return "add_result"
}

func (p *AddResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *AddResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnPath
 *  - Timestamp
 *  - ConsistencyLevel
 */
type RemoveArgs struct {
	Key              []byte           "key"               // 1
	ColumnPath       *ColumnPath      "column_path"       // 2
	Timestamp        int64            "timestamp"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

var tstructRemoveArgs = thrift.NewTStruct("remove_args", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("column_path", thrift.STRUCT, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("consistency_level", thrift.I32, 4),
})

func (*RemoveArgs) GetTStruct() thrift.TStruct { return tstructRemoveArgs }
func NewRemoveArgs() *RemoveArgs {
	output := &RemoveArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *RemoveArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *RemoveArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructRemoveArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructRemoveArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnPath
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1055, err1056 := iprot.ReadBinary()
	if err1056 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err1056)
	}
	p.Key = v1055
	return err
}

func (p *RemoveArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnPath = NewColumnPath()
	err1059 := p.ColumnPath.Read(iprot)
	if err1059 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnPathColumnPath", err1059)
	}
	return err
}

func (p *RemoveArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1060, err1061 := iprot.ReadI64()
	if err1061 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1061)
	}
	p.Timestamp = v1060
	return err
}

func (p *RemoveArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1062, err1063 := iprot.ReadI32()
	if err1063 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err1063)
	}
	p.ConsistencyLevel = ConsistencyLevel(v1062)
	return err
}

func (p *RemoveArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("remove_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnPath != nil {
		err = oprot.WriteFieldBegin("column_path", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
		err = p.ColumnPath.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnPath", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveArgs) TStructName() string {
	return "RemoveArgs"
}

func (p *RemoveArgs) ThriftName() string {
	return "remove_args"
}

func (p *RemoveArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnPath
	case 3:
		return p.Timestamp
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *RemoveArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_path", thrift.STRUCT, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type RemoveResult struct {
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

var tstructRemoveResult = thrift.NewTStruct("remove_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*RemoveResult) GetTStruct() thrift.TStruct { return tstructRemoveResult }
func NewRemoveResult() *RemoveResult {
	output := &RemoveResult{}
	{
	}
	return output
}

func (p *RemoveResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructRemoveResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructRemoveResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1066 := p.Ire.Read(iprot)
	if err1066 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1066)
	}
	return err
}

func (p *RemoveResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1069 := p.Ue.Read(iprot)
	if err1069 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1069)
	}
	return err
}

func (p *RemoveResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1072 := p.Te.Read(iprot)
	if err1072 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1072)
	}
	return err
}

func (p *RemoveResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("remove_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveResult) TStructName() string {
	return "RemoveResult"
}

func (p *RemoveResult) ThriftName() string {
	return "remove_result"
}

func (p *RemoveResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *RemoveResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - Path
 *  - ConsistencyLevel
 */
type RemoveCounterArgs struct {
	Key              []byte           "key"               // 1
	Path             *ColumnPath      "path"              // 2
	ConsistencyLevel ConsistencyLevel "consistency_level" // 3
}

var tstructRemoveCounterArgs = thrift.NewTStruct("remove_counter_args", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("path", thrift.STRUCT, 2),
	thrift.NewTField("consistency_level", thrift.I32, 3),
})

func (*RemoveCounterArgs) GetTStruct() thrift.TStruct { return tstructRemoveCounterArgs }
func NewRemoveCounterArgs() *RemoveCounterArgs {
	output := &RemoveCounterArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *RemoveCounterArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *RemoveCounterArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructRemoveCounterArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructRemoveCounterArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ColumnPath
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveCounterArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1073, err1074 := iprot.ReadBinary()
	if err1074 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err1074)
	}
	p.Key = v1073
	return err
}

func (p *RemoveCounterArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Path = NewColumnPath()
	err1077 := p.Path.Read(iprot)
	if err1077 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PathColumnPath", err1077)
	}
	return err
}

func (p *RemoveCounterArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1078, err1079 := iprot.ReadI32()
	if err1079 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "consistency_level", p.ThriftName(), err1079)
	}
	p.ConsistencyLevel = ConsistencyLevel(v1078)
	return err
}

func (p *RemoveCounterArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("remove_counter_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveCounterArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveCounterArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Path != nil {
		err = oprot.WriteFieldBegin("path", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "path", p.ThriftName(), err)
		}
		err = p.Path.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnPath", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "path", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveCounterArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveCounterArgs) TStructName() string {
	return "RemoveCounterArgs"
}

func (p *RemoveCounterArgs) ThriftName() string {
	return "remove_counter_args"
}

func (p *RemoveCounterArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.Path
	case 3:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *RemoveCounterArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("path", thrift.STRUCT, 2),
		thrift.NewTField("consistency_level", thrift.I32, 3),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type RemoveCounterResult struct {
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

var tstructRemoveCounterResult = thrift.NewTStruct("remove_counter_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*RemoveCounterResult) GetTStruct() thrift.TStruct { return tstructRemoveCounterResult }
func NewRemoveCounterResult() *RemoveCounterResult {
	output := &RemoveCounterResult{}
	{
	}
	return output
}

func (p *RemoveCounterResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructRemoveCounterResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructRemoveCounterResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveCounterResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1082 := p.Ire.Read(iprot)
	if err1082 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1082)
	}
	return err
}

func (p *RemoveCounterResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1085 := p.Ue.Read(iprot)
	if err1085 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1085)
	}
	return err
}

func (p *RemoveCounterResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1088 := p.Te.Read(iprot)
	if err1088 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1088)
	}
	return err
}

func (p *RemoveCounterResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("remove_counter_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveCounterResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveCounterResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveCounterResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveCounterResult) TStructName() string {
	return "RemoveCounterResult"
}

func (p *RemoveCounterResult) ThriftName() string {
	return "remove_counter_result"
}

func (p *RemoveCounterResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *RemoveCounterResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - MutationMap
 *  - ConsistencyLevel
 */
type BatchMutateArgs struct {
	MutationMap      map[string]map[string][]*Mutation "mutation_map"      // 1
	ConsistencyLevel ConsistencyLevel                  "consistency_level" // 2
}

var tstructBatchMutateArgs = thrift.NewTStruct("batch_mutate_args", []thrift.TField{
	thrift.NewTField("mutation_map", thrift.MAP, 1),
	thrift.NewTField("consistency_level", thrift.I32, 2),
})

func (*BatchMutateArgs) GetTStruct() thrift.TStruct { return tstructBatchMutateArgs }
func NewBatchMutateArgs() *BatchMutateArgs {
	output := &BatchMutateArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *BatchMutateArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *BatchMutateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBatchMutateArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBatchMutateArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.MAP {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1092, _vtype1093, _size1091, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.MutationMap", "", err)
	}
	_, _ = _ktype1092, _vtype1093
	p.MutationMap = make(map[string]map[string][]*Mutation, _size1091)
	for i := 0; i < _size1091; i++ {
		v1098, err1099 := iprot.ReadString()
		if err1099 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1096", "", err1099)
		}
		_key1096 := v1098
		_ktype1103, _vtype1104, _size1102, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val1097", "", err)
		}
		_, _ = _ktype1103, _vtype1104
		_val1097 := make(map[string][]*Mutation, _size1102)
		for i := 0; i < _size1102; i++ {
			v1109, err1110 := iprot.ReadString()
			if err1110 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_key1107", "", err1110)
			}
			_key1107 := v1109
			_etype1116, _size1113, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "_val1108", "", err)
			}
			_ = _etype1116
			_val1108 := make([]*Mutation, _size1113, _size1113)
			for i := 0; i < _size1113; i++ {
				_elem1118 := NewMutation()
				err1121 := _elem1118.Read(iprot)
				if err1121 != nil {
					return thrift.NewTProtocolExceptionReadStruct("_elem1118Mutation", err1121)
				}
				_val1108[i] = _elem1118
			}
			err = iprot.ReadListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
			}
			_val1097[_key1107] = _val1108
		}
		err = iprot.ReadMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
		}
		p.MutationMap[_key1096] = _val1097
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *BatchMutateArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1122, err1123 := iprot.ReadI32()
	if err1123 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "consistency_level", p.ThriftName(), err1123)
	}
	p.ConsistencyLevel = ConsistencyLevel(v1122)
	return err
}

func (p *BatchMutateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("batch_mutate_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MutationMap != nil {
		err = oprot.WriteFieldBegin("mutation_map", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "mutation_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MutationMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1124, Viter1125 := range p.MutationMap {
			err = oprot.WriteString(Kiter1124)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1124", "", err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(Viter1125))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter1126, Viter1127 := range Viter1125 {
				err = oprot.WriteString(Kiter1126)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter1126", "", err)
				}
				err = oprot.WriteListBegin(thrift.STRUCT, len(Viter1127))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
				}
				for _, Iter1128 := range Viter1127 {
					err = Iter1128.Write(oprot)
					if err != nil {
						return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
					}
				}
				err = oprot.WriteListEnd()
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "mutation_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateArgs) TStructName() string {
	return "BatchMutateArgs"
}

func (p *BatchMutateArgs) ThriftName() string {
	return "batch_mutate_args"
}

func (p *BatchMutateArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.MutationMap
	case 2:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *BatchMutateArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("mutation_map", thrift.MAP, 1),
		thrift.NewTField("consistency_level", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type BatchMutateResult struct {
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

var tstructBatchMutateResult = thrift.NewTStruct("batch_mutate_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*BatchMutateResult) GetTStruct() thrift.TStruct { return tstructBatchMutateResult }
func NewBatchMutateResult() *BatchMutateResult {
	output := &BatchMutateResult{}
	{
	}
	return output
}

func (p *BatchMutateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBatchMutateResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBatchMutateResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1131 := p.Ire.Read(iprot)
	if err1131 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1131)
	}
	return err
}

func (p *BatchMutateResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1134 := p.Ue.Read(iprot)
	if err1134 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1134)
	}
	return err
}

func (p *BatchMutateResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1137 := p.Te.Read(iprot)
	if err1137 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1137)
	}
	return err
}

func (p *BatchMutateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("batch_mutate_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateResult) TStructName() string {
	return "BatchMutateResult"
}

func (p *BatchMutateResult) ThriftName() string {
	return "batch_mutate_result"
}

func (p *BatchMutateResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *BatchMutateResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - MutationMap
 *  - ConsistencyLevel
 */
type AtomicBatchMutateArgs struct {
	MutationMap      map[string]map[string][]*Mutation "mutation_map"      // 1
	ConsistencyLevel ConsistencyLevel                  "consistency_level" // 2
}

var tstructAtomicBatchMutateArgs = thrift.NewTStruct("atomic_batch_mutate_args", []thrift.TField{
	thrift.NewTField("mutation_map", thrift.MAP, 1),
	thrift.NewTField("consistency_level", thrift.I32, 2),
})

func (*AtomicBatchMutateArgs) GetTStruct() thrift.TStruct { return tstructAtomicBatchMutateArgs }
func NewAtomicBatchMutateArgs() *AtomicBatchMutateArgs {
	output := &AtomicBatchMutateArgs{}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *AtomicBatchMutateArgs) IsSetConsistencyLevel() bool {
	return int64(p.ConsistencyLevel) != math.MinInt32-1
}

func (p *AtomicBatchMutateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAtomicBatchMutateArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAtomicBatchMutateArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.MAP {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicBatchMutateArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1141, _vtype1142, _size1140, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.MutationMap", "", err)
	}
	_, _ = _ktype1141, _vtype1142
	p.MutationMap = make(map[string]map[string][]*Mutation, _size1140)
	for i := 0; i < _size1140; i++ {
		v1147, err1148 := iprot.ReadString()
		if err1148 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1145", "", err1148)
		}
		_key1145 := v1147
		_ktype1152, _vtype1153, _size1151, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val1146", "", err)
		}
		_, _ = _ktype1152, _vtype1153
		_val1146 := make(map[string][]*Mutation, _size1151)
		for i := 0; i < _size1151; i++ {
			v1158, err1159 := iprot.ReadString()
			if err1159 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_key1156", "", err1159)
			}
			_key1156 := v1158
			_etype1165, _size1162, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "_val1157", "", err)
			}
			_ = _etype1165
			_val1157 := make([]*Mutation, _size1162, _size1162)
			for i := 0; i < _size1162; i++ {
				_elem1167 := NewMutation()
				err1170 := _elem1167.Read(iprot)
				if err1170 != nil {
					return thrift.NewTProtocolExceptionReadStruct("_elem1167Mutation", err1170)
				}
				_val1157[i] = _elem1167
			}
			err = iprot.ReadListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
			}
			_val1146[_key1156] = _val1157
		}
		err = iprot.ReadMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
		}
		p.MutationMap[_key1145] = _val1146
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *AtomicBatchMutateArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1171, err1172 := iprot.ReadI32()
	if err1172 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "consistency_level", p.ThriftName(), err1172)
	}
	p.ConsistencyLevel = ConsistencyLevel(v1171)
	return err
}

func (p *AtomicBatchMutateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomic_batch_mutate_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicBatchMutateArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MutationMap != nil {
		err = oprot.WriteFieldBegin("mutation_map", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "mutation_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MutationMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1173, Viter1174 := range p.MutationMap {
			err = oprot.WriteString(Kiter1173)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1173", "", err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(Viter1174))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter1175, Viter1176 := range Viter1174 {
				err = oprot.WriteString(Kiter1175)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter1175", "", err)
				}
				err = oprot.WriteListBegin(thrift.STRUCT, len(Viter1176))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
				}
				for _, Iter1177 := range Viter1176 {
					err = Iter1177.Write(oprot)
					if err != nil {
						return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
					}
				}
				err = oprot.WriteListEnd()
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "mutation_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicBatchMutateArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistencyLevel() {
		err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ConsistencyLevel))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicBatchMutateArgs) TStructName() string {
	return "AtomicBatchMutateArgs"
}

func (p *AtomicBatchMutateArgs) ThriftName() string {
	return "atomic_batch_mutate_args"
}

func (p *AtomicBatchMutateArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.MutationMap
	case 2:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *AtomicBatchMutateArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("mutation_map", thrift.MAP, 1),
		thrift.NewTField("consistency_level", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type AtomicBatchMutateResult struct {
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

var tstructAtomicBatchMutateResult = thrift.NewTStruct("atomic_batch_mutate_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*AtomicBatchMutateResult) GetTStruct() thrift.TStruct { return tstructAtomicBatchMutateResult }
func NewAtomicBatchMutateResult() *AtomicBatchMutateResult {
	output := &AtomicBatchMutateResult{}
	{
	}
	return output
}

func (p *AtomicBatchMutateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAtomicBatchMutateResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAtomicBatchMutateResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicBatchMutateResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1180 := p.Ire.Read(iprot)
	if err1180 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1180)
	}
	return err
}

func (p *AtomicBatchMutateResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1183 := p.Ue.Read(iprot)
	if err1183 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1183)
	}
	return err
}

func (p *AtomicBatchMutateResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1186 := p.Te.Read(iprot)
	if err1186 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1186)
	}
	return err
}

func (p *AtomicBatchMutateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomic_batch_mutate_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicBatchMutateResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicBatchMutateResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicBatchMutateResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicBatchMutateResult) TStructName() string {
	return "AtomicBatchMutateResult"
}

func (p *AtomicBatchMutateResult) ThriftName() string {
	return "atomic_batch_mutate_result"
}

func (p *AtomicBatchMutateResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *AtomicBatchMutateResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Cfname
 */
type TruncateArgs struct {
	Cfname string "cfname" // 1
}

var tstructTruncateArgs = thrift.NewTStruct("truncate_args", []thrift.TField{
	thrift.NewTField("cfname", thrift.STRING, 1),
})

func (*TruncateArgs) GetTStruct() thrift.TStruct { return tstructTruncateArgs }
func NewTruncateArgs() *TruncateArgs {
	output := &TruncateArgs{}
	{
	}
	return output
}

func (p *TruncateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTruncateArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTruncateArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1187, err1188 := iprot.ReadString()
	if err1188 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "cfname", p.ThriftName(), err1188)
	}
	p.Cfname = v1187
	return err
}

func (p *TruncateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("truncate_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("cfname", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfname", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Cfname)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfname", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfname", p.ThriftName(), err)
	}
	return err
}

func (p *TruncateArgs) TStructName() string {
	return "TruncateArgs"
}

func (p *TruncateArgs) ThriftName() string {
	return "truncate_args"
}

func (p *TruncateArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Cfname
	}
	return nil
}

func (p *TruncateArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cfname", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type TruncateResult struct {
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

var tstructTruncateResult = thrift.NewTStruct("truncate_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
})

func (*TruncateResult) GetTStruct() thrift.TStruct { return tstructTruncateResult }
func NewTruncateResult() *TruncateResult {
	output := &TruncateResult{}
	{
	}
	return output
}

func (p *TruncateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTruncateResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTruncateResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1191 := p.Ire.Read(iprot)
	if err1191 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1191)
	}
	return err
}

func (p *TruncateResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1194 := p.Ue.Read(iprot)
	if err1194 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1194)
	}
	return err
}

func (p *TruncateResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1197 := p.Te.Read(iprot)
	if err1197 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1197)
	}
	return err
}

func (p *TruncateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("truncate_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TruncateResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TruncateResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TruncateResult) TStructName() string {
	return "TruncateResult"
}

func (p *TruncateResult) ThriftName() string {
	return "truncate_result"
}

func (p *TruncateResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *TruncateResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

type DescribeSchemaVersionsArgs struct {
}

var tstructDescribeSchemaVersionsArgs = thrift.NewTStruct("describe_schema_versions_args", []thrift.TField{})

func (*DescribeSchemaVersionsArgs) GetTStruct() thrift.TStruct {
	return tstructDescribeSchemaVersionsArgs
}
func NewDescribeSchemaVersionsArgs() *DescribeSchemaVersionsArgs {
	output := &DescribeSchemaVersionsArgs{}
	{
	}
	return output
}

func (p *DescribeSchemaVersionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSchemaVersionsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSchemaVersionsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_schema_versions_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsArgs) TStructName() string {
	return "DescribeSchemaVersionsArgs"
}

func (p *DescribeSchemaVersionsArgs) ThriftName() string {
	return "describe_schema_versions_args"
}

func (p *DescribeSchemaVersionsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeSchemaVersionsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeSchemaVersionsResult struct {
	Success map[string][]string      "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructDescribeSchemaVersionsResult = thrift.NewTStruct("describe_schema_versions_result", []thrift.TField{
	thrift.NewTField("success", thrift.MAP, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*DescribeSchemaVersionsResult) GetTStruct() thrift.TStruct {
	return tstructDescribeSchemaVersionsResult
}
func NewDescribeSchemaVersionsResult() *DescribeSchemaVersionsResult {
	output := &DescribeSchemaVersionsResult{}
	{
	}
	return output
}

func (p *DescribeSchemaVersionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSchemaVersionsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSchemaVersionsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.MAP {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1201, _vtype1202, _size1200, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_, _ = _ktype1201, _vtype1202
	p.Success = make(map[string][]string, _size1200)
	for i := 0; i < _size1200; i++ {
		v1207, err1208 := iprot.ReadString()
		if err1208 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1205", "", err1208)
		}
		_key1205 := v1207
		_etype1214, _size1211, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val1206", "", err)
		}
		_ = _etype1214
		_val1206 := make([]string, _size1211, _size1211)
		for i := 0; i < _size1211; i++ {
			v1217, err1218 := iprot.ReadString()
			if err1218 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem1216", "", err1218)
			}
			_elem1216 := v1217
			_val1206[i] = _elem1216
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.Success[_key1205] = _val1206
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1221 := p.Ire.Read(iprot)
	if err1221 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1221)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_schema_versions_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1222, Viter1223 := range p.Success {
			err = oprot.WriteString(Kiter1222)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1222", "", err)
			}
			err = oprot.WriteListBegin(thrift.STRING, len(Viter1223))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter1224 := range Viter1223 {
				err = oprot.WriteString(Iter1224)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter1224", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSchemaVersionsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSchemaVersionsResult) TStructName() string {
	return "DescribeSchemaVersionsResult"
}

func (p *DescribeSchemaVersionsResult) ThriftName() string {
	return "describe_schema_versions_result"
}

func (p *DescribeSchemaVersionsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeSchemaVersionsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type DescribeKeyspacesArgs struct {
}

var tstructDescribeKeyspacesArgs = thrift.NewTStruct("describe_keyspaces_args", []thrift.TField{})

func (*DescribeKeyspacesArgs) GetTStruct() thrift.TStruct { return tstructDescribeKeyspacesArgs }
func NewDescribeKeyspacesArgs() *DescribeKeyspacesArgs {
	output := &DescribeKeyspacesArgs{}
	{
	}
	return output
}

func (p *DescribeKeyspacesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeKeyspacesArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeKeyspacesArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspaces_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesArgs) TStructName() string {
	return "DescribeKeyspacesArgs"
}

func (p *DescribeKeyspacesArgs) ThriftName() string {
	return "describe_keyspaces_args"
}

func (p *DescribeKeyspacesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeKeyspacesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeKeyspacesResult struct {
	Success []*KsDef                 "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructDescribeKeyspacesResult = thrift.NewTStruct("describe_keyspaces_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*DescribeKeyspacesResult) GetTStruct() thrift.TStruct { return tstructDescribeKeyspacesResult }
func NewDescribeKeyspacesResult() *DescribeKeyspacesResult {
	output := &DescribeKeyspacesResult{}
	{
	}
	return output
}

func (p *DescribeKeyspacesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeKeyspacesResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeKeyspacesResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1230, _size1227, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1230
	p.Success = make([]*KsDef, _size1227, _size1227)
	for i := 0; i < _size1227; i++ {
		_elem1232 := NewKsDef()
		err1235 := _elem1232.Read(iprot)
		if err1235 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1232KsDef", err1235)
		}
		p.Success[i] = _elem1232
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *DescribeKeyspacesResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1238 := p.Ire.Read(iprot)
	if err1238 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1238)
	}
	return err
}

func (p *DescribeKeyspacesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspaces_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1239 := range p.Success {
			err = Iter1239.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspacesResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspacesResult) TStructName() string {
	return "DescribeKeyspacesResult"
}

func (p *DescribeKeyspacesResult) ThriftName() string {
	return "describe_keyspaces_result"
}

func (p *DescribeKeyspacesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeKeyspacesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type DescribeClusterNameArgs struct {
}

var tstructDescribeClusterNameArgs = thrift.NewTStruct("describe_cluster_name_args", []thrift.TField{})

func (*DescribeClusterNameArgs) GetTStruct() thrift.TStruct { return tstructDescribeClusterNameArgs }
func NewDescribeClusterNameArgs() *DescribeClusterNameArgs {
	output := &DescribeClusterNameArgs{}
	{
	}
	return output
}

func (p *DescribeClusterNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeClusterNameArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeClusterNameArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_cluster_name_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameArgs) TStructName() string {
	return "DescribeClusterNameArgs"
}

func (p *DescribeClusterNameArgs) ThriftName() string {
	return "describe_cluster_name_args"
}

func (p *DescribeClusterNameArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeClusterNameArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribeClusterNameResult struct {
	Success string "success" // 0
}

var tstructDescribeClusterNameResult = thrift.NewTStruct("describe_cluster_name_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
})

func (*DescribeClusterNameResult) GetTStruct() thrift.TStruct { return tstructDescribeClusterNameResult }
func NewDescribeClusterNameResult() *DescribeClusterNameResult {
	output := &DescribeClusterNameResult{}
	{
	}
	return output
}

func (p *DescribeClusterNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeClusterNameResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeClusterNameResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1240, err1241 := iprot.ReadString()
	if err1241 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1241)
	}
	p.Success = v1240
	return err
}

func (p *DescribeClusterNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_cluster_name_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameResult) TStructName() string {
	return "DescribeClusterNameResult"
}

func (p *DescribeClusterNameResult) ThriftName() string {
	return "describe_cluster_name_result"
}

func (p *DescribeClusterNameResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribeClusterNameResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

type DescribeVersionArgs struct {
}

var tstructDescribeVersionArgs = thrift.NewTStruct("describe_version_args", []thrift.TField{})

func (*DescribeVersionArgs) GetTStruct() thrift.TStruct { return tstructDescribeVersionArgs }
func NewDescribeVersionArgs() *DescribeVersionArgs {
	output := &DescribeVersionArgs{}
	{
	}
	return output
}

func (p *DescribeVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeVersionArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeVersionArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_version_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionArgs) TStructName() string {
	return "DescribeVersionArgs"
}

func (p *DescribeVersionArgs) ThriftName() string {
	return "describe_version_args"
}

func (p *DescribeVersionArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeVersionArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribeVersionResult struct {
	Success string "success" // 0
}

var tstructDescribeVersionResult = thrift.NewTStruct("describe_version_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
})

func (*DescribeVersionResult) GetTStruct() thrift.TStruct { return tstructDescribeVersionResult }
func NewDescribeVersionResult() *DescribeVersionResult {
	output := &DescribeVersionResult{}
	{
	}
	return output
}

func (p *DescribeVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeVersionResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeVersionResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1242, err1243 := iprot.ReadString()
	if err1243 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1243)
	}
	p.Success = v1242
	return err
}

func (p *DescribeVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_version_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionResult) TStructName() string {
	return "DescribeVersionResult"
}

func (p *DescribeVersionResult) ThriftName() string {
	return "describe_version_result"
}

func (p *DescribeVersionResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribeVersionResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type DescribeRingArgs struct {
	Keyspace string "keyspace" // 1
}

var tstructDescribeRingArgs = thrift.NewTStruct("describe_ring_args", []thrift.TField{
	thrift.NewTField("keyspace", thrift.STRING, 1),
})

func (*DescribeRingArgs) GetTStruct() thrift.TStruct { return tstructDescribeRingArgs }
func NewDescribeRingArgs() *DescribeRingArgs {
	output := &DescribeRingArgs{}
	{
	}
	return output
}

func (p *DescribeRingArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeRingArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeRingArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1244, err1245 := iprot.ReadString()
	if err1245 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err1245)
	}
	p.Keyspace = v1244
	return err
}

func (p *DescribeRingArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_ring_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Keyspace)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingArgs) TStructName() string {
	return "DescribeRingArgs"
}

func (p *DescribeRingArgs) ThriftName() string {
	return "describe_ring_args"
}

func (p *DescribeRingArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *DescribeRingArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeRingResult struct {
	Success []*TokenRange            "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructDescribeRingResult = thrift.NewTStruct("describe_ring_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*DescribeRingResult) GetTStruct() thrift.TStruct { return tstructDescribeRingResult }
func NewDescribeRingResult() *DescribeRingResult {
	output := &DescribeRingResult{}
	{
	}
	return output
}

func (p *DescribeRingResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeRingResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeRingResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1251, _size1248, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1251
	p.Success = make([]*TokenRange, _size1248, _size1248)
	for i := 0; i < _size1248; i++ {
		_elem1253 := NewTokenRange()
		err1256 := _elem1253.Read(iprot)
		if err1256 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1253TokenRange", err1256)
		}
		p.Success[i] = _elem1253
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *DescribeRingResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1259 := p.Ire.Read(iprot)
	if err1259 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1259)
	}
	return err
}

func (p *DescribeRingResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_ring_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1260 := range p.Success {
			err = Iter1260.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TokenRange", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeRingResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeRingResult) TStructName() string {
	return "DescribeRingResult"
}

func (p *DescribeRingResult) ThriftName() string {
	return "describe_ring_result"
}

func (p *DescribeRingResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeRingResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type DescribeTokenMapArgs struct {
}

var tstructDescribeTokenMapArgs = thrift.NewTStruct("describe_token_map_args", []thrift.TField{})

func (*DescribeTokenMapArgs) GetTStruct() thrift.TStruct { return tstructDescribeTokenMapArgs }
func NewDescribeTokenMapArgs() *DescribeTokenMapArgs {
	output := &DescribeTokenMapArgs{}
	{
	}
	return output
}

func (p *DescribeTokenMapArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeTokenMapArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeTokenMapArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeTokenMapArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_token_map_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeTokenMapArgs) TStructName() string {
	return "DescribeTokenMapArgs"
}

func (p *DescribeTokenMapArgs) ThriftName() string {
	return "describe_token_map_args"
}

func (p *DescribeTokenMapArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeTokenMapArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeTokenMapResult struct {
	Success map[string]string        "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructDescribeTokenMapResult = thrift.NewTStruct("describe_token_map_result", []thrift.TField{
	thrift.NewTField("success", thrift.MAP, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*DescribeTokenMapResult) GetTStruct() thrift.TStruct { return tstructDescribeTokenMapResult }
func NewDescribeTokenMapResult() *DescribeTokenMapResult {
	output := &DescribeTokenMapResult{}
	{
	}
	return output
}

func (p *DescribeTokenMapResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeTokenMapResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeTokenMapResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.MAP {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeTokenMapResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1264, _vtype1265, _size1263, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_, _ = _ktype1264, _vtype1265
	p.Success = make(map[string]string, _size1263)
	for i := 0; i < _size1263; i++ {
		v1270, err1271 := iprot.ReadString()
		if err1271 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1268", "", err1271)
		}
		_key1268 := v1270
		v1272, err1273 := iprot.ReadString()
		if err1273 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1269", "", err1273)
		}
		_val1269 := v1272
		p.Success[_key1268] = _val1269
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DescribeTokenMapResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1276 := p.Ire.Read(iprot)
	if err1276 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1276)
	}
	return err
}

func (p *DescribeTokenMapResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_token_map_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeTokenMapResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1277, Viter1278 := range p.Success {
			err = oprot.WriteString(Kiter1277)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1277", "", err)
			}
			err = oprot.WriteString(Viter1278)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1278", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeTokenMapResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeTokenMapResult) TStructName() string {
	return "DescribeTokenMapResult"
}

func (p *DescribeTokenMapResult) ThriftName() string {
	return "describe_token_map_result"
}

func (p *DescribeTokenMapResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeTokenMapResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type DescribePartitionerArgs struct {
}

var tstructDescribePartitionerArgs = thrift.NewTStruct("describe_partitioner_args", []thrift.TField{})

func (*DescribePartitionerArgs) GetTStruct() thrift.TStruct { return tstructDescribePartitionerArgs }
func NewDescribePartitionerArgs() *DescribePartitionerArgs {
	output := &DescribePartitionerArgs{}
	{
	}
	return output
}

func (p *DescribePartitionerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribePartitionerArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribePartitionerArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_partitioner_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerArgs) TStructName() string {
	return "DescribePartitionerArgs"
}

func (p *DescribePartitionerArgs) ThriftName() string {
	return "describe_partitioner_args"
}

func (p *DescribePartitionerArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribePartitionerArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribePartitionerResult struct {
	Success string "success" // 0
}

var tstructDescribePartitionerResult = thrift.NewTStruct("describe_partitioner_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
})

func (*DescribePartitionerResult) GetTStruct() thrift.TStruct { return tstructDescribePartitionerResult }
func NewDescribePartitionerResult() *DescribePartitionerResult {
	output := &DescribePartitionerResult{}
	{
	}
	return output
}

func (p *DescribePartitionerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribePartitionerResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribePartitionerResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1279, err1280 := iprot.ReadString()
	if err1280 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1280)
	}
	p.Success = v1279
	return err
}

func (p *DescribePartitionerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_partitioner_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerResult) TStructName() string {
	return "DescribePartitionerResult"
}

func (p *DescribePartitionerResult) ThriftName() string {
	return "describe_partitioner_result"
}

func (p *DescribePartitionerResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribePartitionerResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

type DescribeSnitchArgs struct {
}

var tstructDescribeSnitchArgs = thrift.NewTStruct("describe_snitch_args", []thrift.TField{})

func (*DescribeSnitchArgs) GetTStruct() thrift.TStruct { return tstructDescribeSnitchArgs }
func NewDescribeSnitchArgs() *DescribeSnitchArgs {
	output := &DescribeSnitchArgs{}
	{
	}
	return output
}

func (p *DescribeSnitchArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSnitchArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSnitchArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_snitch_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchArgs) TStructName() string {
	return "DescribeSnitchArgs"
}

func (p *DescribeSnitchArgs) ThriftName() string {
	return "describe_snitch_args"
}

func (p *DescribeSnitchArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeSnitchArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribeSnitchResult struct {
	Success string "success" // 0
}

var tstructDescribeSnitchResult = thrift.NewTStruct("describe_snitch_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
})

func (*DescribeSnitchResult) GetTStruct() thrift.TStruct { return tstructDescribeSnitchResult }
func NewDescribeSnitchResult() *DescribeSnitchResult {
	output := &DescribeSnitchResult{}
	{
	}
	return output
}

func (p *DescribeSnitchResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSnitchResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSnitchResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1281, err1282 := iprot.ReadString()
	if err1282 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1282)
	}
	p.Success = v1281
	return err
}

func (p *DescribeSnitchResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_snitch_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchResult) TStructName() string {
	return "DescribeSnitchResult"
}

func (p *DescribeSnitchResult) ThriftName() string {
	return "describe_snitch_result"
}

func (p *DescribeSnitchResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribeSnitchResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type DescribeKeyspaceArgs struct {
	Keyspace string "keyspace" // 1
}

var tstructDescribeKeyspaceArgs = thrift.NewTStruct("describe_keyspace_args", []thrift.TField{
	thrift.NewTField("keyspace", thrift.STRING, 1),
})

func (*DescribeKeyspaceArgs) GetTStruct() thrift.TStruct { return tstructDescribeKeyspaceArgs }
func NewDescribeKeyspaceArgs() *DescribeKeyspaceArgs {
	output := &DescribeKeyspaceArgs{}
	{
	}
	return output
}

func (p *DescribeKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeKeyspaceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeKeyspaceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1283, err1284 := iprot.ReadString()
	if err1284 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err1284)
	}
	p.Keyspace = v1283
	return err
}

func (p *DescribeKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Keyspace)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceArgs) TStructName() string {
	return "DescribeKeyspaceArgs"
}

func (p *DescribeKeyspaceArgs) ThriftName() string {
	return "describe_keyspace_args"
}

func (p *DescribeKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *DescribeKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Nfe
 *  - Ire
 */
type DescribeKeyspaceResult struct {
	Success *KsDef                   "success" // 0
	Nfe     *NotFoundException       "nfe"     // 1
	Ire     *InvalidRequestException "ire"     // 2
}

var tstructDescribeKeyspaceResult = thrift.NewTStruct("describe_keyspace_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("nfe", thrift.STRUCT, 1),
	thrift.NewTField("ire", thrift.STRUCT, 2),
})

func (*DescribeKeyspaceResult) GetTStruct() thrift.TStruct { return tstructDescribeKeyspaceResult }
func NewDescribeKeyspaceResult() *DescribeKeyspaceResult {
	output := &DescribeKeyspaceResult{}
	{
	}
	return output
}

func (p *DescribeKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeKeyspaceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeKeyspaceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //KsDef
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //NotFoundException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewKsDef()
	err1287 := p.Success.Read(iprot)
	if err1287 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessKsDef", err1287)
	}
	return err
}

func (p *DescribeKeyspaceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Nfe = NewNotFoundException()
	err1290 := p.Nfe.Read(iprot)
	if err1290 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.NfeNotFoundException", err1290)
	}
	return err
}

func (p *DescribeKeyspaceResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1293 := p.Ire.Read(iprot)
	if err1293 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1293)
	}
	return err
}

func (p *DescribeKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Nfe != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspaceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Nfe != nil {
		err = oprot.WriteFieldBegin("nfe", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "nfe", p.ThriftName(), err)
		}
		err = p.Nfe.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("NotFoundException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "nfe", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspaceResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspaceResult) TStructName() string {
	return "DescribeKeyspaceResult"
}

func (p *DescribeKeyspaceResult) ThriftName() string {
	return "describe_keyspace_result"
}

func (p *DescribeKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Nfe
	case 2:
		return p.Ire
	}
	return nil
}

func (p *DescribeKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("nfe", thrift.STRUCT, 1),
		thrift.NewTField("ire", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - CfName
 *  - StartToken
 *  - EndToken
 *  - KeysPerSplit
 */
type DescribeSplitsArgs struct {
	CfName       string "cfName"         // 1
	StartToken   string "start_token"    // 2
	EndToken     string "end_token"      // 3
	KeysPerSplit int32  "keys_per_split" // 4
}

var tstructDescribeSplitsArgs = thrift.NewTStruct("describe_splits_args", []thrift.TField{
	thrift.NewTField("cfName", thrift.STRING, 1),
	thrift.NewTField("start_token", thrift.STRING, 2),
	thrift.NewTField("end_token", thrift.STRING, 3),
	thrift.NewTField("keys_per_split", thrift.I32, 4),
})

func (*DescribeSplitsArgs) GetTStruct() thrift.TStruct { return tstructDescribeSplitsArgs }
func NewDescribeSplitsArgs() *DescribeSplitsArgs {
	output := &DescribeSplitsArgs{}
	{
	}
	return output
}

func (p *DescribeSplitsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSplitsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSplitsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1294, err1295 := iprot.ReadString()
	if err1295 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "cfName", p.ThriftName(), err1295)
	}
	p.CfName = v1294
	return err
}

func (p *DescribeSplitsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1296, err1297 := iprot.ReadString()
	if err1297 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "start_token", p.ThriftName(), err1297)
	}
	p.StartToken = v1296
	return err
}

func (p *DescribeSplitsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1298, err1299 := iprot.ReadString()
	if err1299 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "end_token", p.ThriftName(), err1299)
	}
	p.EndToken = v1298
	return err
}

func (p *DescribeSplitsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1300, err1301 := iprot.ReadI32()
	if err1301 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "keys_per_split", p.ThriftName(), err1301)
	}
	p.KeysPerSplit = v1300
	return err
}

func (p *DescribeSplitsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_splits_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("cfName", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.CfName)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("start_token", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.StartToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("end_token", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.EndToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keys_per_split", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.KeysPerSplit))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) TStructName() string {
	return "DescribeSplitsArgs"
}

func (p *DescribeSplitsArgs) ThriftName() string {
	return "describe_splits_args"
}

func (p *DescribeSplitsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.CfName
	case 2:
		return p.StartToken
	case 3:
		return p.EndToken
	case 4:
		return p.KeysPerSplit
	}
	return nil
}

func (p *DescribeSplitsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cfName", thrift.STRING, 1),
		thrift.NewTField("start_token", thrift.STRING, 2),
		thrift.NewTField("end_token", thrift.STRING, 3),
		thrift.NewTField("keys_per_split", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeSplitsResult struct {
	Success []string                 "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructDescribeSplitsResult = thrift.NewTStruct("describe_splits_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*DescribeSplitsResult) GetTStruct() thrift.TStruct { return tstructDescribeSplitsResult }
func NewDescribeSplitsResult() *DescribeSplitsResult {
	output := &DescribeSplitsResult{}
	{
	}
	return output
}

func (p *DescribeSplitsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSplitsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSplitsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1307, _size1304, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1307
	p.Success = make([]string, _size1304, _size1304)
	for i := 0; i < _size1304; i++ {
		v1310, err1311 := iprot.ReadString()
		if err1311 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1309", "", err1311)
		}
		_elem1309 := v1310
		p.Success[i] = _elem1309
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *DescribeSplitsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1314 := p.Ire.Read(iprot)
	if err1314 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1314)
	}
	return err
}

func (p *DescribeSplitsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_splits_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1315 := range p.Success {
			err = oprot.WriteString(Iter1315)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1315", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSplitsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSplitsResult) TStructName() string {
	return "DescribeSplitsResult"
}

func (p *DescribeSplitsResult) ThriftName() string {
	return "describe_splits_result"
}

func (p *DescribeSplitsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeSplitsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type TraceNextQueryArgs struct {
}

var tstructTraceNextQueryArgs = thrift.NewTStruct("trace_next_query_args", []thrift.TField{})

func (*TraceNextQueryArgs) GetTStruct() thrift.TStruct { return tstructTraceNextQueryArgs }
func NewTraceNextQueryArgs() *TraceNextQueryArgs {
	output := &TraceNextQueryArgs{}
	{
	}
	return output
}

func (p *TraceNextQueryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTraceNextQueryArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTraceNextQueryArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TraceNextQueryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("trace_next_query_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TraceNextQueryArgs) TStructName() string {
	return "TraceNextQueryArgs"
}

func (p *TraceNextQueryArgs) ThriftName() string {
	return "trace_next_query_args"
}

func (p *TraceNextQueryArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *TraceNextQueryArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type TraceNextQueryResult struct {
	Success []byte "success" // 0
}

var tstructTraceNextQueryResult = thrift.NewTStruct("trace_next_query_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
})

func (*TraceNextQueryResult) GetTStruct() thrift.TStruct { return tstructTraceNextQueryResult }
func NewTraceNextQueryResult() *TraceNextQueryResult {
	output := &TraceNextQueryResult{}
	{
	}
	return output
}

func (p *TraceNextQueryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTraceNextQueryResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTraceNextQueryResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TraceNextQueryResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1316, err1317 := iprot.ReadBinary()
	if err1317 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1317)
	}
	p.Success = v1316
	return err
}

func (p *TraceNextQueryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("trace_next_query_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TraceNextQueryResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Success)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TraceNextQueryResult) TStructName() string {
	return "TraceNextQueryResult"
}

func (p *TraceNextQueryResult) ThriftName() string {
	return "trace_next_query_result"
}

func (p *TraceNextQueryResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *TraceNextQueryResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

/**
 * Attributes:
 *  - CfName
 *  - StartToken
 *  - EndToken
 *  - KeysPerSplit
 */
type DescribeSplitsExArgs struct {
	CfName       string "cfName"         // 1
	StartToken   string "start_token"    // 2
	EndToken     string "end_token"      // 3
	KeysPerSplit int32  "keys_per_split" // 4
}

var tstructDescribeSplitsExArgs = thrift.NewTStruct("describe_splits_ex_args", []thrift.TField{
	thrift.NewTField("cfName", thrift.STRING, 1),
	thrift.NewTField("start_token", thrift.STRING, 2),
	thrift.NewTField("end_token", thrift.STRING, 3),
	thrift.NewTField("keys_per_split", thrift.I32, 4),
})

func (*DescribeSplitsExArgs) GetTStruct() thrift.TStruct { return tstructDescribeSplitsExArgs }
func NewDescribeSplitsExArgs() *DescribeSplitsExArgs {
	output := &DescribeSplitsExArgs{}
	{
	}
	return output
}

func (p *DescribeSplitsExArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSplitsExArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSplitsExArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1318, err1319 := iprot.ReadString()
	if err1319 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "cfName", p.ThriftName(), err1319)
	}
	p.CfName = v1318
	return err
}

func (p *DescribeSplitsExArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1320, err1321 := iprot.ReadString()
	if err1321 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "start_token", p.ThriftName(), err1321)
	}
	p.StartToken = v1320
	return err
}

func (p *DescribeSplitsExArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1322, err1323 := iprot.ReadString()
	if err1323 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "end_token", p.ThriftName(), err1323)
	}
	p.EndToken = v1322
	return err
}

func (p *DescribeSplitsExArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1324, err1325 := iprot.ReadI32()
	if err1325 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "keys_per_split", p.ThriftName(), err1325)
	}
	p.KeysPerSplit = v1324
	return err
}

func (p *DescribeSplitsExArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_splits_ex_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("cfName", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.CfName)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("start_token", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.StartToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("end_token", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.EndToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keys_per_split", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.KeysPerSplit))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExArgs) TStructName() string {
	return "DescribeSplitsExArgs"
}

func (p *DescribeSplitsExArgs) ThriftName() string {
	return "describe_splits_ex_args"
}

func (p *DescribeSplitsExArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.CfName
	case 2:
		return p.StartToken
	case 3:
		return p.EndToken
	case 4:
		return p.KeysPerSplit
	}
	return nil
}

func (p *DescribeSplitsExArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cfName", thrift.STRING, 1),
		thrift.NewTField("start_token", thrift.STRING, 2),
		thrift.NewTField("end_token", thrift.STRING, 3),
		thrift.NewTField("keys_per_split", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeSplitsExResult struct {
	Success []*CfSplit               "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructDescribeSplitsExResult = thrift.NewTStruct("describe_splits_ex_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*DescribeSplitsExResult) GetTStruct() thrift.TStruct { return tstructDescribeSplitsExResult }
func NewDescribeSplitsExResult() *DescribeSplitsExResult {
	output := &DescribeSplitsExResult{}
	{
	}
	return output
}

func (p *DescribeSplitsExResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDescribeSplitsExResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDescribeSplitsExResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1331, _size1328, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1331
	p.Success = make([]*CfSplit, _size1328, _size1328)
	for i := 0; i < _size1328; i++ {
		_elem1333 := NewCfSplit()
		err1336 := _elem1333.Read(iprot)
		if err1336 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1333CfSplit", err1336)
		}
		p.Success[i] = _elem1333
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *DescribeSplitsExResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1339 := p.Ire.Read(iprot)
	if err1339 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1339)
	}
	return err
}

func (p *DescribeSplitsExResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_splits_ex_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsExResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1340 := range p.Success {
			err = Iter1340.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CfSplit", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSplitsExResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSplitsExResult) TStructName() string {
	return "DescribeSplitsExResult"
}

func (p *DescribeSplitsExResult) ThriftName() string {
	return "describe_splits_ex_result"
}

func (p *DescribeSplitsExResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeSplitsExResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - CfDef
 */
type SystemAddColumnFamilyArgs struct {
	CfDef *CfDef "cf_def" // 1
}

var tstructSystemAddColumnFamilyArgs = thrift.NewTStruct("system_add_column_family_args", []thrift.TField{
	thrift.NewTField("cf_def", thrift.STRUCT, 1),
})

func (*SystemAddColumnFamilyArgs) GetTStruct() thrift.TStruct { return tstructSystemAddColumnFamilyArgs }
func NewSystemAddColumnFamilyArgs() *SystemAddColumnFamilyArgs {
	output := &SystemAddColumnFamilyArgs{}
	{
	}
	return output
}

func (p *SystemAddColumnFamilyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemAddColumnFamilyArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemAddColumnFamilyArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //CfDef
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CfDef = NewCfDef()
	err1343 := p.CfDef.Read(iprot)
	if err1343 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CfDefCfDef", err1343)
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_column_family_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CfDef != nil {
		err = oprot.WriteFieldBegin("cf_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
		err = p.CfDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CfDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) TStructName() string {
	return "SystemAddColumnFamilyArgs"
}

func (p *SystemAddColumnFamilyArgs) ThriftName() string {
	return "system_add_column_family_args"
}

func (p *SystemAddColumnFamilyArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.CfDef
	}
	return nil
}

func (p *SystemAddColumnFamilyArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cf_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Sde
 */
type SystemAddColumnFamilyResult struct {
	Success string                       "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Sde     *SchemaDisagreementException "sde"     // 2
}

var tstructSystemAddColumnFamilyResult = thrift.NewTStruct("system_add_column_family_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("sde", thrift.STRUCT, 2),
})

func (*SystemAddColumnFamilyResult) GetTStruct() thrift.TStruct {
	return tstructSystemAddColumnFamilyResult
}
func NewSystemAddColumnFamilyResult() *SystemAddColumnFamilyResult {
	output := &SystemAddColumnFamilyResult{}
	{
	}
	return output
}

func (p *SystemAddColumnFamilyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemAddColumnFamilyResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemAddColumnFamilyResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1344, err1345 := iprot.ReadString()
	if err1345 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1345)
	}
	p.Success = v1344
	return err
}

func (p *SystemAddColumnFamilyResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1348 := p.Ire.Read(iprot)
	if err1348 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1348)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1351 := p.Sde.Read(iprot)
	if err1351 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1351)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_column_family_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddColumnFamilyResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddColumnFamilyResult) TStructName() string {
	return "SystemAddColumnFamilyResult"
}

func (p *SystemAddColumnFamilyResult) ThriftName() string {
	return "system_add_column_family_result"
}

func (p *SystemAddColumnFamilyResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Sde
	}
	return nil
}

func (p *SystemAddColumnFamilyResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("sde", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - ColumnFamily
 */
type SystemDropColumnFamilyArgs struct {
	ColumnFamily string "column_family" // 1
}

var tstructSystemDropColumnFamilyArgs = thrift.NewTStruct("system_drop_column_family_args", []thrift.TField{
	thrift.NewTField("column_family", thrift.STRING, 1),
})

func (*SystemDropColumnFamilyArgs) GetTStruct() thrift.TStruct {
	return tstructSystemDropColumnFamilyArgs
}
func NewSystemDropColumnFamilyArgs() *SystemDropColumnFamilyArgs {
	output := &SystemDropColumnFamilyArgs{}
	{
	}
	return output
}

func (p *SystemDropColumnFamilyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemDropColumnFamilyArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemDropColumnFamilyArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1352, err1353 := iprot.ReadString()
	if err1353 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "column_family", p.ThriftName(), err1353)
	}
	p.ColumnFamily = v1352
	return err
}

func (p *SystemDropColumnFamilyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_column_family_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("column_family", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.ColumnFamily)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyArgs) TStructName() string {
	return "SystemDropColumnFamilyArgs"
}

func (p *SystemDropColumnFamilyArgs) ThriftName() string {
	return "system_drop_column_family_args"
}

func (p *SystemDropColumnFamilyArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnFamily
	}
	return nil
}

func (p *SystemDropColumnFamilyArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_family", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Sde
 */
type SystemDropColumnFamilyResult struct {
	Success string                       "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Sde     *SchemaDisagreementException "sde"     // 2
}

var tstructSystemDropColumnFamilyResult = thrift.NewTStruct("system_drop_column_family_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("sde", thrift.STRUCT, 2),
})

func (*SystemDropColumnFamilyResult) GetTStruct() thrift.TStruct {
	return tstructSystemDropColumnFamilyResult
}
func NewSystemDropColumnFamilyResult() *SystemDropColumnFamilyResult {
	output := &SystemDropColumnFamilyResult{}
	{
	}
	return output
}

func (p *SystemDropColumnFamilyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemDropColumnFamilyResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemDropColumnFamilyResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1354, err1355 := iprot.ReadString()
	if err1355 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1355)
	}
	p.Success = v1354
	return err
}

func (p *SystemDropColumnFamilyResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1358 := p.Ire.Read(iprot)
	if err1358 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1358)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1361 := p.Sde.Read(iprot)
	if err1361 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1361)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_column_family_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemDropColumnFamilyResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemDropColumnFamilyResult) TStructName() string {
	return "SystemDropColumnFamilyResult"
}

func (p *SystemDropColumnFamilyResult) ThriftName() string {
	return "system_drop_column_family_result"
}

func (p *SystemDropColumnFamilyResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Sde
	}
	return nil
}

func (p *SystemDropColumnFamilyResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("sde", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - KsDef
 */
type SystemAddKeyspaceArgs struct {
	KsDef *KsDef "ks_def" // 1
}

var tstructSystemAddKeyspaceArgs = thrift.NewTStruct("system_add_keyspace_args", []thrift.TField{
	thrift.NewTField("ks_def", thrift.STRUCT, 1),
})

func (*SystemAddKeyspaceArgs) GetTStruct() thrift.TStruct { return tstructSystemAddKeyspaceArgs }
func NewSystemAddKeyspaceArgs() *SystemAddKeyspaceArgs {
	output := &SystemAddKeyspaceArgs{}
	{
	}
	return output
}

func (p *SystemAddKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemAddKeyspaceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemAddKeyspaceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //KsDef
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.KsDef = NewKsDef()
	err1364 := p.KsDef.Read(iprot)
	if err1364 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.KsDefKsDef", err1364)
	}
	return err
}

func (p *SystemAddKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.KsDef != nil {
		err = oprot.WriteFieldBegin("ks_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
		err = p.KsDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddKeyspaceArgs) TStructName() string {
	return "SystemAddKeyspaceArgs"
}

func (p *SystemAddKeyspaceArgs) ThriftName() string {
	return "system_add_keyspace_args"
}

func (p *SystemAddKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.KsDef
	}
	return nil
}

func (p *SystemAddKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ks_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Sde
 */
type SystemAddKeyspaceResult struct {
	Success string                       "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Sde     *SchemaDisagreementException "sde"     // 2
}

var tstructSystemAddKeyspaceResult = thrift.NewTStruct("system_add_keyspace_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("sde", thrift.STRUCT, 2),
})

func (*SystemAddKeyspaceResult) GetTStruct() thrift.TStruct { return tstructSystemAddKeyspaceResult }
func NewSystemAddKeyspaceResult() *SystemAddKeyspaceResult {
	output := &SystemAddKeyspaceResult{}
	{
	}
	return output
}

func (p *SystemAddKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemAddKeyspaceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemAddKeyspaceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1365, err1366 := iprot.ReadString()
	if err1366 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1366)
	}
	p.Success = v1365
	return err
}

func (p *SystemAddKeyspaceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1369 := p.Ire.Read(iprot)
	if err1369 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1369)
	}
	return err
}

func (p *SystemAddKeyspaceResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1372 := p.Sde.Read(iprot)
	if err1372 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1372)
	}
	return err
}

func (p *SystemAddKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddKeyspaceResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddKeyspaceResult) TStructName() string {
	return "SystemAddKeyspaceResult"
}

func (p *SystemAddKeyspaceResult) ThriftName() string {
	return "system_add_keyspace_result"
}

func (p *SystemAddKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Sde
	}
	return nil
}

func (p *SystemAddKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("sde", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type SystemDropKeyspaceArgs struct {
	Keyspace string "keyspace" // 1
}

var tstructSystemDropKeyspaceArgs = thrift.NewTStruct("system_drop_keyspace_args", []thrift.TField{
	thrift.NewTField("keyspace", thrift.STRING, 1),
})

func (*SystemDropKeyspaceArgs) GetTStruct() thrift.TStruct { return tstructSystemDropKeyspaceArgs }
func NewSystemDropKeyspaceArgs() *SystemDropKeyspaceArgs {
	output := &SystemDropKeyspaceArgs{}
	{
	}
	return output
}

func (p *SystemDropKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemDropKeyspaceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemDropKeyspaceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1373, err1374 := iprot.ReadString()
	if err1374 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err1374)
	}
	p.Keyspace = v1373
	return err
}

func (p *SystemDropKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Keyspace)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceArgs) TStructName() string {
	return "SystemDropKeyspaceArgs"
}

func (p *SystemDropKeyspaceArgs) ThriftName() string {
	return "system_drop_keyspace_args"
}

func (p *SystemDropKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *SystemDropKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Sde
 */
type SystemDropKeyspaceResult struct {
	Success string                       "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Sde     *SchemaDisagreementException "sde"     // 2
}

var tstructSystemDropKeyspaceResult = thrift.NewTStruct("system_drop_keyspace_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("sde", thrift.STRUCT, 2),
})

func (*SystemDropKeyspaceResult) GetTStruct() thrift.TStruct { return tstructSystemDropKeyspaceResult }
func NewSystemDropKeyspaceResult() *SystemDropKeyspaceResult {
	output := &SystemDropKeyspaceResult{}
	{
	}
	return output
}

func (p *SystemDropKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemDropKeyspaceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemDropKeyspaceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1375, err1376 := iprot.ReadString()
	if err1376 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1376)
	}
	p.Success = v1375
	return err
}

func (p *SystemDropKeyspaceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1379 := p.Ire.Read(iprot)
	if err1379 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1379)
	}
	return err
}

func (p *SystemDropKeyspaceResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1382 := p.Sde.Read(iprot)
	if err1382 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1382)
	}
	return err
}

func (p *SystemDropKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemDropKeyspaceResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemDropKeyspaceResult) TStructName() string {
	return "SystemDropKeyspaceResult"
}

func (p *SystemDropKeyspaceResult) ThriftName() string {
	return "system_drop_keyspace_result"
}

func (p *SystemDropKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Sde
	}
	return nil
}

func (p *SystemDropKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("sde", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - KsDef
 */
type SystemUpdateKeyspaceArgs struct {
	KsDef *KsDef "ks_def" // 1
}

var tstructSystemUpdateKeyspaceArgs = thrift.NewTStruct("system_update_keyspace_args", []thrift.TField{
	thrift.NewTField("ks_def", thrift.STRUCT, 1),
})

func (*SystemUpdateKeyspaceArgs) GetTStruct() thrift.TStruct { return tstructSystemUpdateKeyspaceArgs }
func NewSystemUpdateKeyspaceArgs() *SystemUpdateKeyspaceArgs {
	output := &SystemUpdateKeyspaceArgs{}
	{
	}
	return output
}

func (p *SystemUpdateKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemUpdateKeyspaceArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemUpdateKeyspaceArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //KsDef
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.KsDef = NewKsDef()
	err1385 := p.KsDef.Read(iprot)
	if err1385 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.KsDefKsDef", err1385)
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.KsDef != nil {
		err = oprot.WriteFieldBegin("ks_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
		err = p.KsDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) TStructName() string {
	return "SystemUpdateKeyspaceArgs"
}

func (p *SystemUpdateKeyspaceArgs) ThriftName() string {
	return "system_update_keyspace_args"
}

func (p *SystemUpdateKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.KsDef
	}
	return nil
}

func (p *SystemUpdateKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ks_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Sde
 */
type SystemUpdateKeyspaceResult struct {
	Success string                       "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Sde     *SchemaDisagreementException "sde"     // 2
}

var tstructSystemUpdateKeyspaceResult = thrift.NewTStruct("system_update_keyspace_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("sde", thrift.STRUCT, 2),
})

func (*SystemUpdateKeyspaceResult) GetTStruct() thrift.TStruct {
	return tstructSystemUpdateKeyspaceResult
}
func NewSystemUpdateKeyspaceResult() *SystemUpdateKeyspaceResult {
	output := &SystemUpdateKeyspaceResult{}
	{
	}
	return output
}

func (p *SystemUpdateKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemUpdateKeyspaceResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemUpdateKeyspaceResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1386, err1387 := iprot.ReadString()
	if err1387 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1387)
	}
	p.Success = v1386
	return err
}

func (p *SystemUpdateKeyspaceResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1390 := p.Ire.Read(iprot)
	if err1390 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1390)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1393 := p.Sde.Read(iprot)
	if err1393 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1393)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) TStructName() string {
	return "SystemUpdateKeyspaceResult"
}

func (p *SystemUpdateKeyspaceResult) ThriftName() string {
	return "system_update_keyspace_result"
}

func (p *SystemUpdateKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Sde
	}
	return nil
}

func (p *SystemUpdateKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("sde", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - CfDef
 */
type SystemUpdateColumnFamilyArgs struct {
	CfDef *CfDef "cf_def" // 1
}

var tstructSystemUpdateColumnFamilyArgs = thrift.NewTStruct("system_update_column_family_args", []thrift.TField{
	thrift.NewTField("cf_def", thrift.STRUCT, 1),
})

func (*SystemUpdateColumnFamilyArgs) GetTStruct() thrift.TStruct {
	return tstructSystemUpdateColumnFamilyArgs
}
func NewSystemUpdateColumnFamilyArgs() *SystemUpdateColumnFamilyArgs {
	output := &SystemUpdateColumnFamilyArgs{}
	{
	}
	return output
}

func (p *SystemUpdateColumnFamilyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemUpdateColumnFamilyArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemUpdateColumnFamilyArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //CfDef
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CfDef = NewCfDef()
	err1396 := p.CfDef.Read(iprot)
	if err1396 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CfDefCfDef", err1396)
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_column_family_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CfDef != nil {
		err = oprot.WriteFieldBegin("cf_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
		err = p.CfDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CfDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) TStructName() string {
	return "SystemUpdateColumnFamilyArgs"
}

func (p *SystemUpdateColumnFamilyArgs) ThriftName() string {
	return "system_update_column_family_args"
}

func (p *SystemUpdateColumnFamilyArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.CfDef
	}
	return nil
}

func (p *SystemUpdateColumnFamilyArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cf_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Sde
 */
type SystemUpdateColumnFamilyResult struct {
	Success string                       "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Sde     *SchemaDisagreementException "sde"     // 2
}

var tstructSystemUpdateColumnFamilyResult = thrift.NewTStruct("system_update_column_family_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRING, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("sde", thrift.STRUCT, 2),
})

func (*SystemUpdateColumnFamilyResult) GetTStruct() thrift.TStruct {
	return tstructSystemUpdateColumnFamilyResult
}
func NewSystemUpdateColumnFamilyResult() *SystemUpdateColumnFamilyResult {
	output := &SystemUpdateColumnFamilyResult{}
	{
	}
	return output
}

func (p *SystemUpdateColumnFamilyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSystemUpdateColumnFamilyResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSystemUpdateColumnFamilyResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1397, err1398 := iprot.ReadString()
	if err1398 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1398)
	}
	p.Success = v1397
	return err
}

func (p *SystemUpdateColumnFamilyResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1401 := p.Ire.Read(iprot)
	if err1401 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1401)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1404 := p.Sde.Read(iprot)
	if err1404 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1404)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_column_family_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Success)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) TStructName() string {
	return "SystemUpdateColumnFamilyResult"
}

func (p *SystemUpdateColumnFamilyResult) ThriftName() string {
	return "system_update_column_family_result"
}

func (p *SystemUpdateColumnFamilyResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Sde
	}
	return nil
}

func (p *SystemUpdateColumnFamilyResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("sde", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Query
 *  - Compression
 */
type ExecuteCqlQueryArgs struct {
	Query       []byte      "query"       // 1
	Compression Compression "compression" // 2
}

var tstructExecuteCqlQueryArgs = thrift.NewTStruct("execute_cql_query_args", []thrift.TField{
	thrift.NewTField("query", thrift.STRING, 1),
	thrift.NewTField("compression", thrift.I32, 2),
})

func (*ExecuteCqlQueryArgs) GetTStruct() thrift.TStruct { return tstructExecuteCqlQueryArgs }
func NewExecuteCqlQueryArgs() *ExecuteCqlQueryArgs {
	output := &ExecuteCqlQueryArgs{}
	{
		output.Compression = math.MinInt32 - 1
	}
	return output
}

func (p *ExecuteCqlQueryArgs) IsSetCompression() bool {
	return int64(p.Compression) != math.MinInt32-1
}

func (p *ExecuteCqlQueryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecuteCqlQueryArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecuteCqlQueryArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Compression
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCqlQueryArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1405, err1406 := iprot.ReadBinary()
	if err1406 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "query", p.ThriftName(), err1406)
	}
	p.Query = v1405
	return err
}

func (p *ExecuteCqlQueryArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1407, err1408 := iprot.ReadI32()
	if err1408 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "compression", p.ThriftName(), err1408)
	}
	p.Compression = Compression(v1407)
	return err
}

func (p *ExecuteCqlQueryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_cql_query_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCqlQueryArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Query != nil {
		err = oprot.WriteFieldBegin("query", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Query)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCqlQueryArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCompression() {
		err = oprot.WriteFieldBegin("compression", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Compression))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCqlQueryArgs) TStructName() string {
	return "ExecuteCqlQueryArgs"
}

func (p *ExecuteCqlQueryArgs) ThriftName() string {
	return "execute_cql_query_args"
}

func (p *ExecuteCqlQueryArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Query
	case 2:
		return p.Compression
	}
	return nil
}

func (p *ExecuteCqlQueryArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("query", thrift.STRING, 1),
		thrift.NewTField("compression", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 *  - Sde
 */
type ExecuteCqlQueryResult struct {
	Success *CqlResult                   "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Ue      *UnavailableException        "ue"      // 2
	Te      *TimedOutException           "te"      // 3
	Sde     *SchemaDisagreementException "sde"     // 4
}

var tstructExecuteCqlQueryResult = thrift.NewTStruct("execute_cql_query_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
	thrift.NewTField("sde", thrift.STRUCT, 4),
})

func (*ExecuteCqlQueryResult) GetTStruct() thrift.TStruct { return tstructExecuteCqlQueryResult }
func NewExecuteCqlQueryResult() *ExecuteCqlQueryResult {
	output := &ExecuteCqlQueryResult{}
	{
	}
	return output
}

func (p *ExecuteCqlQueryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecuteCqlQueryResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecuteCqlQueryResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //CqlResult
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCqlQueryResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewCqlResult()
	err1411 := p.Success.Read(iprot)
	if err1411 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessCqlResult", err1411)
	}
	return err
}

func (p *ExecuteCqlQueryResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1414 := p.Ire.Read(iprot)
	if err1414 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1414)
	}
	return err
}

func (p *ExecuteCqlQueryResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1417 := p.Ue.Read(iprot)
	if err1417 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1417)
	}
	return err
}

func (p *ExecuteCqlQueryResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1420 := p.Te.Read(iprot)
	if err1420 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1420)
	}
	return err
}

func (p *ExecuteCqlQueryResult) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1423 := p.Sde.Read(iprot)
	if err1423 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1423)
	}
	return err
}

func (p *ExecuteCqlQueryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_cql_query_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField4(oprot); err != nil {
			return err
		}
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCqlQueryResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CqlResult", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCqlQueryResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCqlQueryResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCqlQueryResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCqlQueryResult) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCqlQueryResult) TStructName() string {
	return "ExecuteCqlQueryResult"
}

func (p *ExecuteCqlQueryResult) ThriftName() string {
	return "execute_cql_query_result"
}

func (p *ExecuteCqlQueryResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	case 4:
		return p.Sde
	}
	return nil
}

func (p *ExecuteCqlQueryResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
		thrift.NewTField("sde", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - Query
 *  - Compression
 *  - Consistency
 */
type ExecuteCql3QueryArgs struct {
	Query       []byte           "query"       // 1
	Compression Compression      "compression" // 2
	Consistency ConsistencyLevel "consistency" // 3
}

var tstructExecuteCql3QueryArgs = thrift.NewTStruct("execute_cql3_query_args", []thrift.TField{
	thrift.NewTField("query", thrift.STRING, 1),
	thrift.NewTField("compression", thrift.I32, 2),
	thrift.NewTField("consistency", thrift.I32, 3),
})

func (*ExecuteCql3QueryArgs) GetTStruct() thrift.TStruct { return tstructExecuteCql3QueryArgs }
func NewExecuteCql3QueryArgs() *ExecuteCql3QueryArgs {
	output := &ExecuteCql3QueryArgs{}
	{
		output.Compression = math.MinInt32 - 1
		output.Consistency = math.MinInt32 - 1
	}
	return output
}

func (p *ExecuteCql3QueryArgs) IsSetCompression() bool {
	return int64(p.Compression) != math.MinInt32-1
}

func (p *ExecuteCql3QueryArgs) IsSetConsistency() bool {
	return int64(p.Consistency) != math.MinInt32-1
}

func (p *ExecuteCql3QueryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecuteCql3QueryArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecuteCql3QueryArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Compression
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCql3QueryArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1424, err1425 := iprot.ReadBinary()
	if err1425 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "query", p.ThriftName(), err1425)
	}
	p.Query = v1424
	return err
}

func (p *ExecuteCql3QueryArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1426, err1427 := iprot.ReadI32()
	if err1427 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "compression", p.ThriftName(), err1427)
	}
	p.Compression = Compression(v1426)
	return err
}

func (p *ExecuteCql3QueryArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1428, err1429 := iprot.ReadI32()
	if err1429 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "consistency", p.ThriftName(), err1429)
	}
	p.Consistency = ConsistencyLevel(v1428)
	return err
}

func (p *ExecuteCql3QueryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_cql3_query_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCql3QueryArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Query != nil {
		err = oprot.WriteFieldBegin("query", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Query)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCompression() {
		err = oprot.WriteFieldBegin("compression", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Compression))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistency() {
		err = oprot.WriteFieldBegin("consistency", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Consistency))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryArgs) TStructName() string {
	return "ExecuteCql3QueryArgs"
}

func (p *ExecuteCql3QueryArgs) ThriftName() string {
	return "execute_cql3_query_args"
}

func (p *ExecuteCql3QueryArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Query
	case 2:
		return p.Compression
	case 3:
		return p.Consistency
	}
	return nil
}

func (p *ExecuteCql3QueryArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("query", thrift.STRING, 1),
		thrift.NewTField("compression", thrift.I32, 2),
		thrift.NewTField("consistency", thrift.I32, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 *  - Sde
 */
type ExecuteCql3QueryResult struct {
	Success *CqlResult                   "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Ue      *UnavailableException        "ue"      // 2
	Te      *TimedOutException           "te"      // 3
	Sde     *SchemaDisagreementException "sde"     // 4
}

var tstructExecuteCql3QueryResult = thrift.NewTStruct("execute_cql3_query_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
	thrift.NewTField("sde", thrift.STRUCT, 4),
})

func (*ExecuteCql3QueryResult) GetTStruct() thrift.TStruct { return tstructExecuteCql3QueryResult }
func NewExecuteCql3QueryResult() *ExecuteCql3QueryResult {
	output := &ExecuteCql3QueryResult{}
	{
	}
	return output
}

func (p *ExecuteCql3QueryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecuteCql3QueryResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecuteCql3QueryResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //CqlResult
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCql3QueryResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewCqlResult()
	err1432 := p.Success.Read(iprot)
	if err1432 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessCqlResult", err1432)
	}
	return err
}

func (p *ExecuteCql3QueryResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1435 := p.Ire.Read(iprot)
	if err1435 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1435)
	}
	return err
}

func (p *ExecuteCql3QueryResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1438 := p.Ue.Read(iprot)
	if err1438 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1438)
	}
	return err
}

func (p *ExecuteCql3QueryResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1441 := p.Te.Read(iprot)
	if err1441 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1441)
	}
	return err
}

func (p *ExecuteCql3QueryResult) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1444 := p.Sde.Read(iprot)
	if err1444 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1444)
	}
	return err
}

func (p *ExecuteCql3QueryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_cql3_query_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField4(oprot); err != nil {
			return err
		}
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecuteCql3QueryResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CqlResult", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryResult) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecuteCql3QueryResult) TStructName() string {
	return "ExecuteCql3QueryResult"
}

func (p *ExecuteCql3QueryResult) ThriftName() string {
	return "execute_cql3_query_result"
}

func (p *ExecuteCql3QueryResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	case 4:
		return p.Sde
	}
	return nil
}

func (p *ExecuteCql3QueryResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
		thrift.NewTField("sde", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - Query
 *  - Compression
 */
type PrepareCqlQueryArgs struct {
	Query       []byte      "query"       // 1
	Compression Compression "compression" // 2
}

var tstructPrepareCqlQueryArgs = thrift.NewTStruct("prepare_cql_query_args", []thrift.TField{
	thrift.NewTField("query", thrift.STRING, 1),
	thrift.NewTField("compression", thrift.I32, 2),
})

func (*PrepareCqlQueryArgs) GetTStruct() thrift.TStruct { return tstructPrepareCqlQueryArgs }
func NewPrepareCqlQueryArgs() *PrepareCqlQueryArgs {
	output := &PrepareCqlQueryArgs{}
	{
		output.Compression = math.MinInt32 - 1
	}
	return output
}

func (p *PrepareCqlQueryArgs) IsSetCompression() bool {
	return int64(p.Compression) != math.MinInt32-1
}

func (p *PrepareCqlQueryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrepareCqlQueryArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructPrepareCqlQueryArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Compression
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCqlQueryArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1445, err1446 := iprot.ReadBinary()
	if err1446 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "query", p.ThriftName(), err1446)
	}
	p.Query = v1445
	return err
}

func (p *PrepareCqlQueryArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1447, err1448 := iprot.ReadI32()
	if err1448 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "compression", p.ThriftName(), err1448)
	}
	p.Compression = Compression(v1447)
	return err
}

func (p *PrepareCqlQueryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("prepare_cql_query_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCqlQueryArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Query != nil {
		err = oprot.WriteFieldBegin("query", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Query)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCqlQueryArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCompression() {
		err = oprot.WriteFieldBegin("compression", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Compression))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCqlQueryArgs) TStructName() string {
	return "PrepareCqlQueryArgs"
}

func (p *PrepareCqlQueryArgs) ThriftName() string {
	return "prepare_cql_query_args"
}

func (p *PrepareCqlQueryArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Query
	case 2:
		return p.Compression
	}
	return nil
}

func (p *PrepareCqlQueryArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("query", thrift.STRING, 1),
		thrift.NewTField("compression", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type PrepareCqlQueryResult struct {
	Success *CqlPreparedResult       "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructPrepareCqlQueryResult = thrift.NewTStruct("prepare_cql_query_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*PrepareCqlQueryResult) GetTStruct() thrift.TStruct { return tstructPrepareCqlQueryResult }
func NewPrepareCqlQueryResult() *PrepareCqlQueryResult {
	output := &PrepareCqlQueryResult{}
	{
	}
	return output
}

func (p *PrepareCqlQueryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrepareCqlQueryResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructPrepareCqlQueryResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //CqlPreparedResult
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCqlQueryResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewCqlPreparedResult()
	err1451 := p.Success.Read(iprot)
	if err1451 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessCqlPreparedResult", err1451)
	}
	return err
}

func (p *PrepareCqlQueryResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1454 := p.Ire.Read(iprot)
	if err1454 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1454)
	}
	return err
}

func (p *PrepareCqlQueryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("prepare_cql_query_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCqlQueryResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CqlPreparedResult", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCqlQueryResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCqlQueryResult) TStructName() string {
	return "PrepareCqlQueryResult"
}

func (p *PrepareCqlQueryResult) ThriftName() string {
	return "prepare_cql_query_result"
}

func (p *PrepareCqlQueryResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *PrepareCqlQueryResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Query
 *  - Compression
 */
type PrepareCql3QueryArgs struct {
	Query       []byte      "query"       // 1
	Compression Compression "compression" // 2
}

var tstructPrepareCql3QueryArgs = thrift.NewTStruct("prepare_cql3_query_args", []thrift.TField{
	thrift.NewTField("query", thrift.STRING, 1),
	thrift.NewTField("compression", thrift.I32, 2),
})

func (*PrepareCql3QueryArgs) GetTStruct() thrift.TStruct { return tstructPrepareCql3QueryArgs }
func NewPrepareCql3QueryArgs() *PrepareCql3QueryArgs {
	output := &PrepareCql3QueryArgs{}
	{
		output.Compression = math.MinInt32 - 1
	}
	return output
}

func (p *PrepareCql3QueryArgs) IsSetCompression() bool {
	return int64(p.Compression) != math.MinInt32-1
}

func (p *PrepareCql3QueryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrepareCql3QueryArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructPrepareCql3QueryArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Compression
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCql3QueryArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1455, err1456 := iprot.ReadBinary()
	if err1456 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "query", p.ThriftName(), err1456)
	}
	p.Query = v1455
	return err
}

func (p *PrepareCql3QueryArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1457, err1458 := iprot.ReadI32()
	if err1458 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "compression", p.ThriftName(), err1458)
	}
	p.Compression = Compression(v1457)
	return err
}

func (p *PrepareCql3QueryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("prepare_cql3_query_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCql3QueryArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Query != nil {
		err = oprot.WriteFieldBegin("query", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Query)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCql3QueryArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCompression() {
		err = oprot.WriteFieldBegin("compression", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Compression))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "compression", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCql3QueryArgs) TStructName() string {
	return "PrepareCql3QueryArgs"
}

func (p *PrepareCql3QueryArgs) ThriftName() string {
	return "prepare_cql3_query_args"
}

func (p *PrepareCql3QueryArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Query
	case 2:
		return p.Compression
	}
	return nil
}

func (p *PrepareCql3QueryArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("query", thrift.STRING, 1),
		thrift.NewTField("compression", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type PrepareCql3QueryResult struct {
	Success *CqlPreparedResult       "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

var tstructPrepareCql3QueryResult = thrift.NewTStruct("prepare_cql3_query_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*PrepareCql3QueryResult) GetTStruct() thrift.TStruct { return tstructPrepareCql3QueryResult }
func NewPrepareCql3QueryResult() *PrepareCql3QueryResult {
	output := &PrepareCql3QueryResult{}
	{
	}
	return output
}

func (p *PrepareCql3QueryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrepareCql3QueryResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructPrepareCql3QueryResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //CqlPreparedResult
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCql3QueryResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewCqlPreparedResult()
	err1461 := p.Success.Read(iprot)
	if err1461 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessCqlPreparedResult", err1461)
	}
	return err
}

func (p *PrepareCql3QueryResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1464 := p.Ire.Read(iprot)
	if err1464 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1464)
	}
	return err
}

func (p *PrepareCql3QueryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("prepare_cql3_query_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrepareCql3QueryResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CqlPreparedResult", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCql3QueryResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrepareCql3QueryResult) TStructName() string {
	return "PrepareCql3QueryResult"
}

func (p *PrepareCql3QueryResult) ThriftName() string {
	return "prepare_cql3_query_result"
}

func (p *PrepareCql3QueryResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *PrepareCql3QueryResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - ItemId
 *  - Values
 */
type ExecutePreparedCqlQueryArgs struct {
	ItemId int32    "itemId" // 1
	Values [][]byte "values" // 2
}

var tstructExecutePreparedCqlQueryArgs = thrift.NewTStruct("execute_prepared_cql_query_args", []thrift.TField{
	thrift.NewTField("itemId", thrift.I32, 1),
	thrift.NewTField("values", thrift.LIST, 2),
})

func (*ExecutePreparedCqlQueryArgs) GetTStruct() thrift.TStruct {
	return tstructExecutePreparedCqlQueryArgs
}
func NewExecutePreparedCqlQueryArgs() *ExecutePreparedCqlQueryArgs {
	output := &ExecutePreparedCqlQueryArgs{}
	{
	}
	return output
}

func (p *ExecutePreparedCqlQueryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecutePreparedCqlQueryArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecutePreparedCqlQueryArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCqlQueryArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1465, err1466 := iprot.ReadI32()
	if err1466 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "itemId", p.ThriftName(), err1466)
	}
	p.ItemId = v1465
	return err
}

func (p *ExecutePreparedCqlQueryArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1472, _size1469, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Values", "", err)
	}
	_ = _etype1472
	p.Values = make([][]byte, _size1469, _size1469)
	for i := 0; i < _size1469; i++ {
		v1475, err1476 := iprot.ReadBinary()
		if err1476 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1474", "", err1476)
		}
		_elem1474 := v1475
		p.Values[i] = _elem1474
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ExecutePreparedCqlQueryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_prepared_cql_query_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCqlQueryArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("itemId", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ItemId))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCqlQueryArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Values != nil {
		err = oprot.WriteFieldBegin("values", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "values", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Values))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1477 := range p.Values {
			err = oprot.WriteBinary(Iter1477)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1477", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "values", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCqlQueryArgs) TStructName() string {
	return "ExecutePreparedCqlQueryArgs"
}

func (p *ExecutePreparedCqlQueryArgs) ThriftName() string {
	return "execute_prepared_cql_query_args"
}

func (p *ExecutePreparedCqlQueryArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ItemId
	case 2:
		return p.Values
	}
	return nil
}

func (p *ExecutePreparedCqlQueryArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("itemId", thrift.I32, 1),
		thrift.NewTField("values", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 *  - Sde
 */
type ExecutePreparedCqlQueryResult struct {
	Success *CqlResult                   "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Ue      *UnavailableException        "ue"      // 2
	Te      *TimedOutException           "te"      // 3
	Sde     *SchemaDisagreementException "sde"     // 4
}

var tstructExecutePreparedCqlQueryResult = thrift.NewTStruct("execute_prepared_cql_query_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
	thrift.NewTField("sde", thrift.STRUCT, 4),
})

func (*ExecutePreparedCqlQueryResult) GetTStruct() thrift.TStruct {
	return tstructExecutePreparedCqlQueryResult
}
func NewExecutePreparedCqlQueryResult() *ExecutePreparedCqlQueryResult {
	output := &ExecutePreparedCqlQueryResult{}
	{
	}
	return output
}

func (p *ExecutePreparedCqlQueryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecutePreparedCqlQueryResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecutePreparedCqlQueryResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //CqlResult
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewCqlResult()
	err1480 := p.Success.Read(iprot)
	if err1480 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessCqlResult", err1480)
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1483 := p.Ire.Read(iprot)
	if err1483 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1483)
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1486 := p.Ue.Read(iprot)
	if err1486 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1486)
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1489 := p.Te.Read(iprot)
	if err1489 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1489)
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1492 := p.Sde.Read(iprot)
	if err1492 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1492)
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_prepared_cql_query_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField4(oprot); err != nil {
			return err
		}
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CqlResult", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCqlQueryResult) TStructName() string {
	return "ExecutePreparedCqlQueryResult"
}

func (p *ExecutePreparedCqlQueryResult) ThriftName() string {
	return "execute_prepared_cql_query_result"
}

func (p *ExecutePreparedCqlQueryResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	case 4:
		return p.Sde
	}
	return nil
}

func (p *ExecutePreparedCqlQueryResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
		thrift.NewTField("sde", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - ItemId
 *  - Values
 *  - Consistency
 */
type ExecutePreparedCql3QueryArgs struct {
	ItemId      int32            "itemId"      // 1
	Values      [][]byte         "values"      // 2
	Consistency ConsistencyLevel "consistency" // 3
}

var tstructExecutePreparedCql3QueryArgs = thrift.NewTStruct("execute_prepared_cql3_query_args", []thrift.TField{
	thrift.NewTField("itemId", thrift.I32, 1),
	thrift.NewTField("values", thrift.LIST, 2),
	thrift.NewTField("consistency", thrift.I32, 3),
})

func (*ExecutePreparedCql3QueryArgs) GetTStruct() thrift.TStruct {
	return tstructExecutePreparedCql3QueryArgs
}
func NewExecutePreparedCql3QueryArgs() *ExecutePreparedCql3QueryArgs {
	output := &ExecutePreparedCql3QueryArgs{}
	{
		output.Consistency = math.MinInt32 - 1
	}
	return output
}

func (p *ExecutePreparedCql3QueryArgs) IsSetConsistency() bool {
	return int64(p.Consistency) != math.MinInt32-1
}

func (p *ExecutePreparedCql3QueryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecutePreparedCql3QueryArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecutePreparedCql3QueryArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //ConsistencyLevel
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCql3QueryArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1493, err1494 := iprot.ReadI32()
	if err1494 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "itemId", p.ThriftName(), err1494)
	}
	p.ItemId = v1493
	return err
}

func (p *ExecutePreparedCql3QueryArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1500, _size1497, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Values", "", err)
	}
	_ = _etype1500
	p.Values = make([][]byte, _size1497, _size1497)
	for i := 0; i < _size1497; i++ {
		v1503, err1504 := iprot.ReadBinary()
		if err1504 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1502", "", err1504)
		}
		_elem1502 := v1503
		p.Values[i] = _elem1502
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ExecutePreparedCql3QueryArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1505, err1506 := iprot.ReadI32()
	if err1506 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "consistency", p.ThriftName(), err1506)
	}
	p.Consistency = ConsistencyLevel(v1505)
	return err
}

func (p *ExecutePreparedCql3QueryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_prepared_cql3_query_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCql3QueryArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("itemId", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ItemId))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCql3QueryArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Values != nil {
		err = oprot.WriteFieldBegin("values", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "values", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Values))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1507 := range p.Values {
			err = oprot.WriteBinary(Iter1507)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1507", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "values", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCql3QueryArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetConsistency() {
		err = oprot.WriteFieldBegin("consistency", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Consistency))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "consistency", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCql3QueryArgs) TStructName() string {
	return "ExecutePreparedCql3QueryArgs"
}

func (p *ExecutePreparedCql3QueryArgs) ThriftName() string {
	return "execute_prepared_cql3_query_args"
}

func (p *ExecutePreparedCql3QueryArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ItemId
	case 2:
		return p.Values
	case 3:
		return p.Consistency
	}
	return nil
}

func (p *ExecutePreparedCql3QueryArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("itemId", thrift.I32, 1),
		thrift.NewTField("values", thrift.LIST, 2),
		thrift.NewTField("consistency", thrift.I32, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 *  - Sde
 */
type ExecutePreparedCql3QueryResult struct {
	Success *CqlResult                   "success" // 0
	Ire     *InvalidRequestException     "ire"     // 1
	Ue      *UnavailableException        "ue"      // 2
	Te      *TimedOutException           "te"      // 3
	Sde     *SchemaDisagreementException "sde"     // 4
}

var tstructExecutePreparedCql3QueryResult = thrift.NewTStruct("execute_prepared_cql3_query_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("ire", thrift.STRUCT, 1),
	thrift.NewTField("ue", thrift.STRUCT, 2),
	thrift.NewTField("te", thrift.STRUCT, 3),
	thrift.NewTField("sde", thrift.STRUCT, 4),
})

func (*ExecutePreparedCql3QueryResult) GetTStruct() thrift.TStruct {
	return tstructExecutePreparedCql3QueryResult
}
func NewExecutePreparedCql3QueryResult() *ExecutePreparedCql3QueryResult {
	output := &ExecutePreparedCql3QueryResult{}
	{
	}
	return output
}

func (p *ExecutePreparedCql3QueryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExecutePreparedCql3QueryResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExecutePreparedCql3QueryResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //CqlResult
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //UnavailableException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //TimedOutException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //SchemaDisagreementException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewCqlResult()
	err1510 := p.Success.Read(iprot)
	if err1510 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessCqlResult", err1510)
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1513 := p.Ire.Read(iprot)
	if err1513 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1513)
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err1516 := p.Ue.Read(iprot)
	if err1516 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err1516)
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err1519 := p.Te.Read(iprot)
	if err1519 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err1519)
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Sde = NewSchemaDisagreementException()
	err1522 := p.Sde.Read(iprot)
	if err1522 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SdeSchemaDisagreementException", err1522)
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("execute_prepared_cql3_query_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Sde != nil:
		if err = p.writeField4(oprot); err != nil {
			return err
		}
	case p.Te != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CqlResult", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Sde != nil {
		err = oprot.WriteFieldBegin("sde", thrift.STRUCT, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
		err = p.Sde.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SchemaDisagreementException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "sde", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExecutePreparedCql3QueryResult) TStructName() string {
	return "ExecutePreparedCql3QueryResult"
}

func (p *ExecutePreparedCql3QueryResult) ThriftName() string {
	return "execute_prepared_cql3_query_result"
}

func (p *ExecutePreparedCql3QueryResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	case 4:
		return p.Sde
	}
	return nil
}

func (p *ExecutePreparedCql3QueryResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
		thrift.NewTField("sde", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - Version
 */
type SetCqlVersionArgs struct {
	Version string "version" // 1
}

var tstructSetCqlVersionArgs = thrift.NewTStruct("set_cql_version_args", []thrift.TField{
	thrift.NewTField("version", thrift.STRING, 1),
})

func (*SetCqlVersionArgs) GetTStruct() thrift.TStruct { return tstructSetCqlVersionArgs }
func NewSetCqlVersionArgs() *SetCqlVersionArgs {
	output := &SetCqlVersionArgs{}
	{
	}
	return output
}

func (p *SetCqlVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSetCqlVersionArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSetCqlVersionArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetCqlVersionArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1523, err1524 := iprot.ReadString()
	if err1524 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "version", p.ThriftName(), err1524)
	}
	p.Version = v1523
	return err
}

func (p *SetCqlVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("set_cql_version_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetCqlVersionArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("version", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Version)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err)
	}
	return err
}

func (p *SetCqlVersionArgs) TStructName() string {
	return "SetCqlVersionArgs"
}

func (p *SetCqlVersionArgs) ThriftName() string {
	return "set_cql_version_args"
}

func (p *SetCqlVersionArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Version
	}
	return nil
}

func (p *SetCqlVersionArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("version", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Ire
 */
type SetCqlVersionResult struct {
	Ire *InvalidRequestException "ire" // 1
}

var tstructSetCqlVersionResult = thrift.NewTStruct("set_cql_version_result", []thrift.TField{
	thrift.NewTField("ire", thrift.STRUCT, 1),
})

func (*SetCqlVersionResult) GetTStruct() thrift.TStruct { return tstructSetCqlVersionResult }
func NewSetCqlVersionResult() *SetCqlVersionResult {
	output := &SetCqlVersionResult{}
	{
	}
	return output
}

func (p *SetCqlVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSetCqlVersionResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSetCqlVersionResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //InvalidRequestException
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetCqlVersionResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err1527 := p.Ire.Read(iprot)
	if err1527 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err1527)
	}
	return err
}

func (p *SetCqlVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("set_cql_version_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetCqlVersionResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SetCqlVersionResult) TStructName() string {
	return "SetCqlVersionResult"
}

func (p *SetCqlVersionResult) ThriftName() string {
	return "set_cql_version_result"
}

func (p *SetCqlVersionResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SetCqlVersionResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}
