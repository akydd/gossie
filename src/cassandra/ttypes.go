/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cassandra

import (
	"fmt"
	"github.com/apesternikov/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

/**
 *The ConsistencyLevel is an enum that controls both read and write
 *behavior based on the ReplicationFactor of the keyspace.  The
 *different consistency levels have different meanings, depending on
 *if you're doing a write or read operation.
 *
 *If W + R > ReplicationFactor, where W is the number of nodes to
 *block for on write, and R the number to block for on reads, you
 *will have strongly consistent behavior; that is, readers will
 *always see the most recent write. Of these, the most interesting is
 *to do QUORUM reads and writes, which gives you consistency while
 *still allowing availability in the face of node failures up to half
 *of <ReplicationFactor>. Of course if latency is more important than
 *consistency then you can use lower values for either or both.
 *
 *Some ConsistencyLevels (ONE, TWO, THREE) refer to a specific number
 *of replicas rather than a logical concept that adjusts
 *automatically with the replication factor.  Of these, only ONE is
 *commonly used; TWO and (even more rarely) THREE are only useful
 *when you care more about guaranteeing a certain level of
 *durability, than consistency.
 *
 *Write consistency levels make the following guarantees before reporting success to the client:
 *  ANY          Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.
 *  ONE          Ensure that the write has been written to at least 1 node's commit log and memory table
 *  TWO          Ensure that the write has been written to at least 2 node's commit log and memory table
 *  THREE        Ensure that the write has been written to at least 3 node's commit log and memory table
 *  QUORUM       Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes
 *  LOCAL_QUORUM Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes, within the local datacenter (requires NetworkTopologyStrategy)
 *  EACH_QUORUM  Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes in each datacenter (requires NetworkTopologyStrategy)
 *  ALL          Ensure that the write is written to <code>&lt;ReplicationFactor&gt;</code> nodes before responding to the client.
 *
 *Read consistency levels make the following guarantees before returning successful results to the client:
 *  ANY          Not supported. You probably want ONE instead.
 *  ONE          Returns the record obtained from a single replica.
 *  TWO          Returns the record with the most recent timestamp once two replicas have replied.
 *  THREE        Returns the record with the most recent timestamp once three replicas have replied.
 *  QUORUM       Returns the record with the most recent timestamp once a majority of replicas have replied.
 *  LOCAL_QUORUM Returns the record with the most recent timestamp once a majority of replicas within the local datacenter have replied.
 *  EACH_QUORUM  Returns the record with the most recent timestamp once a majority of replicas within each datacenter have replied.
 *  ALL          Returns the record with the most recent timestamp once all replicas have replied (implies no replica may be down)..
 */
type ConsistencyLevel int64

const (
	ConsistencyLevel_ONE          ConsistencyLevel = 1
	ConsistencyLevel_QUORUM       ConsistencyLevel = 2
	ConsistencyLevel_LOCAL_QUORUM ConsistencyLevel = 3
	ConsistencyLevel_EACH_QUORUM  ConsistencyLevel = 4
	ConsistencyLevel_ALL          ConsistencyLevel = 5
	ConsistencyLevel_ANY          ConsistencyLevel = 6
	ConsistencyLevel_TWO          ConsistencyLevel = 7
	ConsistencyLevel_THREE        ConsistencyLevel = 8
)

func (p ConsistencyLevel) String() string {
	switch p {
	case ConsistencyLevel_ONE:
		return "ConsistencyLevel_ONE"
	case ConsistencyLevel_QUORUM:
		return "ConsistencyLevel_QUORUM"
	case ConsistencyLevel_LOCAL_QUORUM:
		return "ConsistencyLevel_LOCAL_QUORUM"
	case ConsistencyLevel_EACH_QUORUM:
		return "ConsistencyLevel_EACH_QUORUM"
	case ConsistencyLevel_ALL:
		return "ConsistencyLevel_ALL"
	case ConsistencyLevel_ANY:
		return "ConsistencyLevel_ANY"
	case ConsistencyLevel_TWO:
		return "ConsistencyLevel_TWO"
	case ConsistencyLevel_THREE:
		return "ConsistencyLevel_THREE"
	}
	return "<UNSET>"
}

func FromConsistencyLevelString(s string) ConsistencyLevel {
	switch s {
	case "ConsistencyLevel_ONE":
		return ConsistencyLevel_ONE
	case "ConsistencyLevel_QUORUM":
		return ConsistencyLevel_QUORUM
	case "ConsistencyLevel_LOCAL_QUORUM":
		return ConsistencyLevel_LOCAL_QUORUM
	case "ConsistencyLevel_EACH_QUORUM":
		return ConsistencyLevel_EACH_QUORUM
	case "ConsistencyLevel_ALL":
		return ConsistencyLevel_ALL
	case "ConsistencyLevel_ANY":
		return ConsistencyLevel_ANY
	case "ConsistencyLevel_TWO":
		return ConsistencyLevel_TWO
	case "ConsistencyLevel_THREE":
		return ConsistencyLevel_THREE
	}
	return ConsistencyLevel(-10000)
}

func (p ConsistencyLevel) Value() int {
	return int(p)
}

func (p ConsistencyLevel) IsEnum() bool {
	return true
}

type IndexOperator int64

const (
	IndexOperator_EQ  IndexOperator = 0
	IndexOperator_GTE IndexOperator = 1
	IndexOperator_GT  IndexOperator = 2
	IndexOperator_LTE IndexOperator = 3
	IndexOperator_LT  IndexOperator = 4
)

func (p IndexOperator) String() string {
	switch p {
	case IndexOperator_EQ:
		return "IndexOperator_EQ"
	case IndexOperator_GTE:
		return "IndexOperator_GTE"
	case IndexOperator_GT:
		return "IndexOperator_GT"
	case IndexOperator_LTE:
		return "IndexOperator_LTE"
	case IndexOperator_LT:
		return "IndexOperator_LT"
	}
	return "<UNSET>"
}

func FromIndexOperatorString(s string) IndexOperator {
	switch s {
	case "IndexOperator_EQ":
		return IndexOperator_EQ
	case "IndexOperator_GTE":
		return IndexOperator_GTE
	case "IndexOperator_GT":
		return IndexOperator_GT
	case "IndexOperator_LTE":
		return IndexOperator_LTE
	case "IndexOperator_LT":
		return IndexOperator_LT
	}
	return IndexOperator(-10000)
}

func (p IndexOperator) Value() int {
	return int(p)
}

func (p IndexOperator) IsEnum() bool {
	return true
}

type IndexType int64

const (
	IndexType_KEYS       IndexType = 0
	IndexType_CUSTOM     IndexType = 1
	IndexType_COMPOSITES IndexType = 2
)

func (p IndexType) String() string {
	switch p {
	case IndexType_KEYS:
		return "IndexType_KEYS"
	case IndexType_CUSTOM:
		return "IndexType_CUSTOM"
	case IndexType_COMPOSITES:
		return "IndexType_COMPOSITES"
	}
	return "<UNSET>"
}

func FromIndexTypeString(s string) IndexType {
	switch s {
	case "IndexType_KEYS":
		return IndexType_KEYS
	case "IndexType_CUSTOM":
		return IndexType_CUSTOM
	case "IndexType_COMPOSITES":
		return IndexType_COMPOSITES
	}
	return IndexType(-10000)
}

func (p IndexType) Value() int {
	return int(p)
}

func (p IndexType) IsEnum() bool {
	return true
}

/**
 *CQL query compression
 */
type Compression int64

const (
	Compression_GZIP Compression = 1
	Compression_NONE Compression = 2
)

func (p Compression) String() string {
	switch p {
	case Compression_GZIP:
		return "Compression_GZIP"
	case Compression_NONE:
		return "Compression_NONE"
	}
	return "<UNSET>"
}

func FromCompressionString(s string) Compression {
	switch s {
	case "Compression_GZIP":
		return Compression_GZIP
	case "Compression_NONE":
		return Compression_NONE
	}
	return Compression(-10000)
}

func (p Compression) Value() int {
	return int(p)
}

func (p Compression) IsEnum() bool {
	return true
}

type CqlResultType int64

const (
	CqlResultType_ROWS CqlResultType = 1
	CqlResultType_VOID CqlResultType = 2
	CqlResultType_INT  CqlResultType = 3
)

func (p CqlResultType) String() string {
	switch p {
	case CqlResultType_ROWS:
		return "CqlResultType_ROWS"
	case CqlResultType_VOID:
		return "CqlResultType_VOID"
	case CqlResultType_INT:
		return "CqlResultType_INT"
	}
	return "<UNSET>"
}

func FromCqlResultTypeString(s string) CqlResultType {
	switch s {
	case "CqlResultType_ROWS":
		return CqlResultType_ROWS
	case "CqlResultType_VOID":
		return CqlResultType_VOID
	case "CqlResultType_INT":
		return CqlResultType_INT
	}
	return CqlResultType(-10000)
}

func (p CqlResultType) Value() int {
	return int(p)
}

func (p CqlResultType) IsEnum() bool {
	return true
}

/**
 * Basic unit of data within a ColumnFamily.
 * @param name, the name by which this column is set and retrieved.  Maximum 64KB long.
 * @param value. The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).
 * @param timestamp. The timestamp is used for conflict detection/resolution when two columns with same name need to be compared.
 * @param ttl. An optional, positive delay (in seconds) after which the column will be automatically deleted.
 * 
 * Attributes:
 *  - Name
 *  - Value
 *  - Timestamp
 *  - Ttl
 */
type Column struct {
	Name      []byte "name"      // 1
	Value     []byte "value"     // 2
	Timestamp int64  "timestamp" // 3
	Ttl       int32  "ttl"       // 4
}

var tstructColumn = thrift.NewTStruct("Column", []thrift.TField{
	thrift.NewTField("name", thrift.STRING, 1),
	thrift.NewTField("value", thrift.STRING, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("ttl", thrift.I32, 4),
})

func (*Column) GetTStruct() thrift.TStruct { return tstructColumn }
func NewColumn() *Column {
	output := &Column{}
	{
	}
	return output
}

func (p *Column) IsSetValue() bool {
	return p.Value != nil
}

func (p *Column) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *Column) IsSetTtl() bool {
	return p.Ttl != 0
}

func (p *Column) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructColumn.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructColumn.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Column) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadBinary()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err1)
	}
	p.Name = v0
	return err
}

func (p *Column) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v2, err3 := iprot.ReadBinary()
	if err3 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "value", p.ThriftName(), err3)
	}
	p.Value = v2
	return err
}

func (p *Column) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v4, err5 := iprot.ReadI64()
	if err5 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err5)
	}
	p.Timestamp = v4
	return err
}

func (p *Column) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v6, err7 := iprot.ReadI32()
	if err7 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "ttl", p.ThriftName(), err7)
	}
	p.Ttl = v6
	return err
}

func (p *Column) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Column")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Column) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Column) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		if p.IsSetValue() {
			err = oprot.WriteFieldBegin("value", thrift.STRING, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.Value)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Column) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTimestamp() {
		err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteI64(int64(p.Timestamp))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Column) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTtl() {
		err = oprot.WriteFieldBegin("ttl", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "ttl", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Ttl))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "ttl", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "ttl", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Column) TStructName() string {
	return "Column"
}

func (p *Column) ThriftName() string {
	return "Column"
}

func (p *Column) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Value
	case 3:
		return p.Timestamp
	case 4:
		return p.Ttl
	}
	return nil
}

func (p *Column) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("value", thrift.STRING, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("ttl", thrift.I32, 4),
	})
}

/**
 * A named list of columns.
 * @param name. see Column.name.
 * @param columns. A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.
 *                 Columns within a super column do not have to have matching structures (similarly named child columns).
 * 
 * Attributes:
 *  - Name
 *  - Columns
 */
type SuperColumn struct {
	Name    []byte    "name"    // 1
	Columns []*Column "columns" // 2
}

var tstructSuperColumn = thrift.NewTStruct("SuperColumn", []thrift.TField{
	thrift.NewTField("name", thrift.STRING, 1),
	thrift.NewTField("columns", thrift.LIST, 2),
})

func (*SuperColumn) GetTStruct() thrift.TStruct { return tstructSuperColumn }
func NewSuperColumn() *SuperColumn {
	output := &SuperColumn{}
	{
	}
	return output
}

func (p *SuperColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSuperColumn.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSuperColumn.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SuperColumn) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v8, err9 := iprot.ReadBinary()
	if err9 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err9)
	}
	p.Name = v8
	return err
}

func (p *SuperColumn) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype15, _size12, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype15
	p.Columns = make([]*Column, _size12, _size12)
	for i := 0; i < _size12; i++ {
		_elem17 := NewColumn()
		err20 := _elem17.Read(iprot)
		if err20 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem17Column", err20)
		}
		p.Columns[i] = _elem17
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *SuperColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SuperColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SuperColumn) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SuperColumn) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter21 := range p.Columns {
			err = Iter21.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Column", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SuperColumn) TStructName() string {
	return "SuperColumn"
}

func (p *SuperColumn) ThriftName() string {
	return "SuperColumn"
}

func (p *SuperColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Columns
	}
	return nil
}

func (p *SuperColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Name
 *  - Value
 */
type CounterColumn struct {
	Name  []byte "name"  // 1
	Value int64  "value" // 2
}

var tstructCounterColumn = thrift.NewTStruct("CounterColumn", []thrift.TField{
	thrift.NewTField("name", thrift.STRING, 1),
	thrift.NewTField("value", thrift.I64, 2),
})

func (*CounterColumn) GetTStruct() thrift.TStruct { return tstructCounterColumn }
func NewCounterColumn() *CounterColumn {
	output := &CounterColumn{}
	{
	}
	return output
}

func (p *CounterColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCounterColumn.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCounterColumn.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterColumn) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v22, err23 := iprot.ReadBinary()
	if err23 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err23)
	}
	p.Name = v22
	return err
}

func (p *CounterColumn) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v24, err25 := iprot.ReadI64()
	if err25 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "value", p.ThriftName(), err25)
	}
	p.Value = v24
	return err
}

func (p *CounterColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CounterColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterColumn) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CounterColumn) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("value", thrift.I64, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Value))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
	}
	return err
}

func (p *CounterColumn) TStructName() string {
	return "CounterColumn"
}

func (p *CounterColumn) ThriftName() string {
	return "CounterColumn"
}

func (p *CounterColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Value
	}
	return nil
}

func (p *CounterColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("value", thrift.I64, 2),
	})
}

/**
 * Attributes:
 *  - Name
 *  - Columns
 */
type CounterSuperColumn struct {
	Name    []byte           "name"    // 1
	Columns []*CounterColumn "columns" // 2
}

var tstructCounterSuperColumn = thrift.NewTStruct("CounterSuperColumn", []thrift.TField{
	thrift.NewTField("name", thrift.STRING, 1),
	thrift.NewTField("columns", thrift.LIST, 2),
})

func (*CounterSuperColumn) GetTStruct() thrift.TStruct { return tstructCounterSuperColumn }
func NewCounterSuperColumn() *CounterSuperColumn {
	output := &CounterSuperColumn{}
	{
	}
	return output
}

func (p *CounterSuperColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCounterSuperColumn.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCounterSuperColumn.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterSuperColumn) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v26, err27 := iprot.ReadBinary()
	if err27 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err27)
	}
	p.Name = v26
	return err
}

func (p *CounterSuperColumn) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype33, _size30, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype33
	p.Columns = make([]*CounterColumn, _size30, _size30)
	for i := 0; i < _size30; i++ {
		_elem35 := NewCounterColumn()
		err38 := _elem35.Read(iprot)
		if err38 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem35CounterColumn", err38)
		}
		p.Columns[i] = _elem35
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CounterSuperColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CounterSuperColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterSuperColumn) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CounterSuperColumn) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter39 := range p.Columns {
			err = Iter39.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CounterColumn", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CounterSuperColumn) TStructName() string {
	return "CounterSuperColumn"
}

func (p *CounterSuperColumn) ThriftName() string {
	return "CounterSuperColumn"
}

func (p *CounterSuperColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Columns
	}
	return nil
}

func (p *CounterSuperColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Methods for fetching rows/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list
 * of ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting
 * instances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting
 * in Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on
 * single query methods that may return either a SuperColumn or Column.
 * 
 * If the query was on a counter column family, you will either get a counter_column (instead of a column) or a
 * counter_super_column (instead of a super_column)
 * 
 * @param column. The Column returned by get() or get_slice().
 * @param super_column. The SuperColumn returned by get() or get_slice().
 * @param counter_column. The Counterolumn returned by get() or get_slice().
 * @param counter_super_column. The CounterSuperColumn returned by get() or get_slice().
 * 
 * Attributes:
 *  - Column
 *  - SuperColumn
 *  - CounterColumn
 *  - CounterSuperColumn
 */
type ColumnOrSuperColumn struct {
	Column             *Column             "column"               // 1
	SuperColumn        *SuperColumn        "super_column"         // 2
	CounterColumn      *CounterColumn      "counter_column"       // 3
	CounterSuperColumn *CounterSuperColumn "counter_super_column" // 4
}

var tstructColumnOrSuperColumn = thrift.NewTStruct("ColumnOrSuperColumn", []thrift.TField{
	thrift.NewTField("column", thrift.STRUCT, 1),
	thrift.NewTField("super_column", thrift.STRUCT, 2),
	thrift.NewTField("counter_column", thrift.STRUCT, 3),
	thrift.NewTField("counter_super_column", thrift.STRUCT, 4),
})

func (*ColumnOrSuperColumn) GetTStruct() thrift.TStruct { return tstructColumnOrSuperColumn }
func NewColumnOrSuperColumn() *ColumnOrSuperColumn {
	output := &ColumnOrSuperColumn{}
	{
	}
	return output
}

func (p *ColumnOrSuperColumn) IsSetColumn() bool {
	return p.Column != nil
}

func (p *ColumnOrSuperColumn) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *ColumnOrSuperColumn) IsSetCounterColumn() bool {
	return p.CounterColumn != nil
}

func (p *ColumnOrSuperColumn) IsSetCounterSuperColumn() bool {
	return p.CounterSuperColumn != nil
}

func (p *ColumnOrSuperColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructColumnOrSuperColumn.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructColumnOrSuperColumn.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Column
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SuperColumn
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //CounterColumn
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //CounterSuperColumn
			if fieldTypeId == thrift.STRUCT {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnOrSuperColumn) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Column = NewColumn()
	err42 := p.Column.Read(iprot)
	if err42 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnColumn", err42)
	}
	return err
}

func (p *ColumnOrSuperColumn) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.SuperColumn = NewSuperColumn()
	err45 := p.SuperColumn.Read(iprot)
	if err45 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuperColumnSuperColumn", err45)
	}
	return err
}

func (p *ColumnOrSuperColumn) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CounterColumn = NewCounterColumn()
	err48 := p.CounterColumn.Read(iprot)
	if err48 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CounterColumnCounterColumn", err48)
	}
	return err
}

func (p *ColumnOrSuperColumn) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CounterSuperColumn = NewCounterSuperColumn()
	err51 := p.CounterSuperColumn.Read(iprot)
	if err51 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CounterSuperColumnCounterSuperColumn", err51)
	}
	return err
}

func (p *ColumnOrSuperColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnOrSuperColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnOrSuperColumn) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		if p.IsSetColumn() {
			err = oprot.WriteFieldBegin("column", thrift.STRUCT, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column", p.ThriftName(), err)
			}
			err = p.Column.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Column", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.STRUCT, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
			err = p.SuperColumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("SuperColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CounterColumn != nil {
		if p.IsSetCounterColumn() {
			err = oprot.WriteFieldBegin("counter_column", thrift.STRUCT, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "counter_column", p.ThriftName(), err)
			}
			err = p.CounterColumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CounterColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "counter_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CounterSuperColumn != nil {
		if p.IsSetCounterSuperColumn() {
			err = oprot.WriteFieldBegin("counter_super_column", thrift.STRUCT, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "counter_super_column", p.ThriftName(), err)
			}
			err = p.CounterSuperColumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CounterSuperColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "counter_super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) TStructName() string {
	return "ColumnOrSuperColumn"
}

func (p *ColumnOrSuperColumn) ThriftName() string {
	return "ColumnOrSuperColumn"
}

func (p *ColumnOrSuperColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Column
	case 2:
		return p.SuperColumn
	case 3:
		return p.CounterColumn
	case 4:
		return p.CounterSuperColumn
	}
	return nil
}

func (p *ColumnOrSuperColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column", thrift.STRUCT, 1),
		thrift.NewTField("super_column", thrift.STRUCT, 2),
		thrift.NewTField("counter_column", thrift.STRUCT, 3),
		thrift.NewTField("counter_super_column", thrift.STRUCT, 4),
	})
}

/**
 * A specific column was requested that does not exist.
 */
type NotFoundException struct {
}

var tstructNotFoundException = thrift.NewTStruct("NotFoundException", []thrift.TField{})

func (*NotFoundException) GetTStruct() thrift.TStruct { return tstructNotFoundException }
func NewNotFoundException() *NotFoundException {
	output := &NotFoundException{}
	{
	}
	return output
}

func (p *NotFoundException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructNotFoundException.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructNotFoundException.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *NotFoundException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("NotFoundException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *NotFoundException) TStructName() string {
	return "NotFoundException"
}

func (p *NotFoundException) ThriftName() string {
	return "NotFoundException"
}

func (p *NotFoundException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *NotFoundException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Invalid request could mean keyspace or column family does not exist, required parameters are missing, or a parameter is malformed.
 * why contains an associated error message.
 * 
 * Attributes:
 *  - Why
 */
type InvalidRequestException struct {
	Why string "why" // 1
}

var tstructInvalidRequestException = thrift.NewTStruct("InvalidRequestException", []thrift.TField{
	thrift.NewTField("why", thrift.STRING, 1),
})

func (*InvalidRequestException) GetTStruct() thrift.TStruct { return tstructInvalidRequestException }
func NewInvalidRequestException() *InvalidRequestException {
	output := &InvalidRequestException{}
	{
	}
	return output
}

func (p *InvalidRequestException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructInvalidRequestException.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructInvalidRequestException.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InvalidRequestException) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v52, err53 := iprot.ReadString()
	if err53 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "why", p.ThriftName(), err53)
	}
	p.Why = v52
	return err
}

func (p *InvalidRequestException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("InvalidRequestException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InvalidRequestException) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("why", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Why)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	return err
}

func (p *InvalidRequestException) TStructName() string {
	return "InvalidRequestException"
}

func (p *InvalidRequestException) ThriftName() string {
	return "InvalidRequestException"
}

func (p *InvalidRequestException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Why
	}
	return nil
}

func (p *InvalidRequestException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("why", thrift.STRING, 1),
	})
}

/**
 * Not all the replicas required could be created and/or read.
 */
type UnavailableException struct {
}

var tstructUnavailableException = thrift.NewTStruct("UnavailableException", []thrift.TField{})

func (*UnavailableException) GetTStruct() thrift.TStruct { return tstructUnavailableException }
func NewUnavailableException() *UnavailableException {
	output := &UnavailableException{}
	{
	}
	return output
}

func (p *UnavailableException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructUnavailableException.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructUnavailableException.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *UnavailableException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("UnavailableException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *UnavailableException) TStructName() string {
	return "UnavailableException"
}

func (p *UnavailableException) ThriftName() string {
	return "UnavailableException"
}

func (p *UnavailableException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *UnavailableException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
 * 
 * Attributes:
 *  - AcknowledgedBy: if a write operation was acknowledged by some replicas but not by enough to
 * satisfy the required ConsistencyLevel, the number of successful
 * replies will be given here. In case of atomic_batch_mutate method this field
 * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
 *  - AcknowledgedByBatchlog: in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
 */
type TimedOutException struct {
	AcknowledgedBy         int32 "acknowledged_by"          // 1
	AcknowledgedByBatchlog bool  "acknowledged_by_batchlog" // 2
}

var tstructTimedOutException = thrift.NewTStruct("TimedOutException", []thrift.TField{
	thrift.NewTField("acknowledged_by", thrift.I32, 1),
	thrift.NewTField("acknowledged_by_batchlog", thrift.BOOL, 2),
})

func (*TimedOutException) GetTStruct() thrift.TStruct { return tstructTimedOutException }
func NewTimedOutException() *TimedOutException {
	output := &TimedOutException{}
	{
	}
	return output
}

func (p *TimedOutException) IsSetAcknowledgedBy() bool {
	return p.AcknowledgedBy != 0
}

func (p *TimedOutException) IsSetAcknowledgedByBatchlog() bool {
	return p.AcknowledgedByBatchlog != false
}

func (p *TimedOutException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTimedOutException.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTimedOutException.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TimedOutException) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v54, err55 := iprot.ReadI32()
	if err55 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "acknowledged_by", p.ThriftName(), err55)
	}
	p.AcknowledgedBy = v54
	return err
}

func (p *TimedOutException) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v56, err57 := iprot.ReadBool()
	if err57 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "acknowledged_by_batchlog", p.ThriftName(), err57)
	}
	p.AcknowledgedByBatchlog = v56
	return err
}

func (p *TimedOutException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TimedOutException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TimedOutException) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetAcknowledgedBy() {
		err = oprot.WriteFieldBegin("acknowledged_by", thrift.I32, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "acknowledged_by", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.AcknowledgedBy))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "acknowledged_by", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "acknowledged_by", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TimedOutException) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetAcknowledgedByBatchlog() {
		err = oprot.WriteFieldBegin("acknowledged_by_batchlog", thrift.BOOL, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "acknowledged_by_batchlog", p.ThriftName(), err)
		}
		err = oprot.WriteBool(bool(p.AcknowledgedByBatchlog))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "acknowledged_by_batchlog", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "acknowledged_by_batchlog", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TimedOutException) TStructName() string {
	return "TimedOutException"
}

func (p *TimedOutException) ThriftName() string {
	return "TimedOutException"
}

func (p *TimedOutException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.AcknowledgedBy
	case 2:
		return p.AcknowledgedByBatchlog
	}
	return nil
}

func (p *TimedOutException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("acknowledged_by", thrift.I32, 1),
		thrift.NewTField("acknowledged_by_batchlog", thrift.BOOL, 2),
	})
}

/**
 * invalid authentication request (invalid keyspace, user does not exist, or credentials invalid)
 * 
 * Attributes:
 *  - Why
 */
type AuthenticationException struct {
	Why string "why" // 1
}

var tstructAuthenticationException = thrift.NewTStruct("AuthenticationException", []thrift.TField{
	thrift.NewTField("why", thrift.STRING, 1),
})

func (*AuthenticationException) GetTStruct() thrift.TStruct { return tstructAuthenticationException }
func NewAuthenticationException() *AuthenticationException {
	output := &AuthenticationException{}
	{
	}
	return output
}

func (p *AuthenticationException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAuthenticationException.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAuthenticationException.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationException) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v58, err59 := iprot.ReadString()
	if err59 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "why", p.ThriftName(), err59)
	}
	p.Why = v58
	return err
}

func (p *AuthenticationException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AuthenticationException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationException) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("why", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Why)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationException) TStructName() string {
	return "AuthenticationException"
}

func (p *AuthenticationException) ThriftName() string {
	return "AuthenticationException"
}

func (p *AuthenticationException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Why
	}
	return nil
}

func (p *AuthenticationException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("why", thrift.STRING, 1),
	})
}

/**
 * invalid authorization request (user does not have access to keyspace)
 * 
 * Attributes:
 *  - Why
 */
type AuthorizationException struct {
	Why string "why" // 1
}

var tstructAuthorizationException = thrift.NewTStruct("AuthorizationException", []thrift.TField{
	thrift.NewTField("why", thrift.STRING, 1),
})

func (*AuthorizationException) GetTStruct() thrift.TStruct { return tstructAuthorizationException }
func NewAuthorizationException() *AuthorizationException {
	output := &AuthorizationException{}
	{
	}
	return output
}

func (p *AuthorizationException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAuthorizationException.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAuthorizationException.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthorizationException) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v60, err61 := iprot.ReadString()
	if err61 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "why", p.ThriftName(), err61)
	}
	p.Why = v60
	return err
}

func (p *AuthorizationException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AuthorizationException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthorizationException) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("why", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Why)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	return err
}

func (p *AuthorizationException) TStructName() string {
	return "AuthorizationException"
}

func (p *AuthorizationException) ThriftName() string {
	return "AuthorizationException"
}

func (p *AuthorizationException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Why
	}
	return nil
}

func (p *AuthorizationException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("why", thrift.STRING, 1),
	})
}

/**
 * NOTE: This up outdated exception left for backward compatibility reasons,
 * no actual schema agreement validation is done starting from Cassandra 1.2
 * 
 * schemas are not in agreement across all nodes
 */
type SchemaDisagreementException struct {
}

var tstructSchemaDisagreementException = thrift.NewTStruct("SchemaDisagreementException", []thrift.TField{})

func (*SchemaDisagreementException) GetTStruct() thrift.TStruct {
	return tstructSchemaDisagreementException
}
func NewSchemaDisagreementException() *SchemaDisagreementException {
	output := &SchemaDisagreementException{}
	{
	}
	return output
}

func (p *SchemaDisagreementException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSchemaDisagreementException.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSchemaDisagreementException.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SchemaDisagreementException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SchemaDisagreementException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SchemaDisagreementException) TStructName() string {
	return "SchemaDisagreementException"
}

func (p *SchemaDisagreementException) ThriftName() string {
	return "SchemaDisagreementException"
}

func (p *SchemaDisagreementException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *SchemaDisagreementException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * ColumnParent is used when selecting groups of columns from the same ColumnFamily. In directory structure terms, imagine
 * ColumnParent as ColumnPath + '/../'.
 * 
 * See also <a href="cassandra.html#Struct_ColumnPath">ColumnPath</a>
 * 
 * Attributes:
 *  - ColumnFamily
 *  - SuperColumn
 */
type ColumnParent struct {
	_            interface{} // nil # 1
	_            interface{} // nil # 2
	ColumnFamily string      "column_family" // 3
	SuperColumn  []byte      "super_column"  // 4
}

var tstructColumnParent = thrift.NewTStruct("ColumnParent", []thrift.TField{
	thrift.NewTField("column_family", thrift.STRING, 3),
	thrift.NewTField("super_column", thrift.STRING, 4),
})

func (*ColumnParent) GetTStruct() thrift.TStruct { return tstructColumnParent }
func NewColumnParent() *ColumnParent {
	output := &ColumnParent{}
	{
	}
	return output
}

func (p *ColumnParent) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *ColumnParent) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructColumnParent.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructColumnParent.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnParent) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v62, err63 := iprot.ReadString()
	if err63 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column_family", p.ThriftName(), err63)
	}
	p.ColumnFamily = v62
	return err
}

func (p *ColumnParent) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v64, err65 := iprot.ReadBinary()
	if err65 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "super_column", p.ThriftName(), err65)
	}
	p.SuperColumn = v64
	return err
}

func (p *ColumnParent) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnParent")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnParent) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("column_family", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.ColumnFamily)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnParent) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.STRING, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.SuperColumn)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnParent) TStructName() string {
	return "ColumnParent"
}

func (p *ColumnParent) ThriftName() string {
	return "ColumnParent"
}

func (p *ColumnParent) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 3:
		return p.ColumnFamily
	case 4:
		return p.SuperColumn
	}
	return nil
}

func (p *ColumnParent) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_family", thrift.STRING, 3),
		thrift.NewTField("super_column", thrift.STRING, 4),
	})
}

/**
 * The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and
 * ColumnParent in terms of a directory structure.
 * 
 * ColumnPath is used to looking up a single column.
 * 
 * @param column_family. The name of the CF of the column being looked up.
 * @param super_column. The super column name.
 * @param column. The column name.
 * 
 * Attributes:
 *  - ColumnFamily
 *  - SuperColumn
 *  - Column
 */
type ColumnPath struct {
	_            interface{} // nil # 1
	_            interface{} // nil # 2
	ColumnFamily string      "column_family" // 3
	SuperColumn  []byte      "super_column"  // 4
	Column       []byte      "column"        // 5
}

var tstructColumnPath = thrift.NewTStruct("ColumnPath", []thrift.TField{
	thrift.NewTField("column_family", thrift.STRING, 3),
	thrift.NewTField("super_column", thrift.STRING, 4),
	thrift.NewTField("column", thrift.STRING, 5),
})

func (*ColumnPath) GetTStruct() thrift.TStruct { return tstructColumnPath }
func NewColumnPath() *ColumnPath {
	output := &ColumnPath{}
	{
	}
	return output
}

func (p *ColumnPath) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *ColumnPath) IsSetColumn() bool {
	return p.Column != nil
}

func (p *ColumnPath) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructColumnPath.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructColumnPath.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnPath) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v66, err67 := iprot.ReadString()
	if err67 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column_family", p.ThriftName(), err67)
	}
	p.ColumnFamily = v66
	return err
}

func (p *ColumnPath) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v68, err69 := iprot.ReadBinary()
	if err69 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "super_column", p.ThriftName(), err69)
	}
	p.SuperColumn = v68
	return err
}

func (p *ColumnPath) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v70, err71 := iprot.ReadBinary()
	if err71 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "column", p.ThriftName(), err71)
	}
	p.Column = v70
	return err
}

func (p *ColumnPath) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnPath")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnPath) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("column_family", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.ColumnFamily)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnPath) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.STRING, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.SuperColumn)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnPath) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		if p.IsSetColumn() {
			err = oprot.WriteFieldBegin("column", thrift.STRING, 5)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.Column)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnPath) TStructName() string {
	return "ColumnPath"
}

func (p *ColumnPath) ThriftName() string {
	return "ColumnPath"
}

func (p *ColumnPath) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 3:
		return p.ColumnFamily
	case 4:
		return p.SuperColumn
	case 5:
		return p.Column
	}
	return nil
}

func (p *ColumnPath) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_family", thrift.STRING, 3),
		thrift.NewTField("super_column", thrift.STRING, 4),
		thrift.NewTField("column", thrift.STRING, 5),
	})
}

/**
 * A slice range is a structure that stores basic range, ordering and limit information for a query that will return
 * multiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY
 * 
 * @param start. The column name to start the slice with. This attribute is not required, though there is no default value,
 *               and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it
 *               must a valid value under the rules of the Comparator defined for the given ColumnFamily.
 * @param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,
 *                and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
 *                must also be a valid value to the ColumnFamily Comparator.
 * @param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
 * @param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will
 *               materialize the whole result into memory before returning it to the client, so be aware that you may
 *               be better served by iterating through slices by passing the last value of one call in as the 'start'
 *               of the next instead of increasing 'count' arbitrarily large.
 * 
 * Attributes:
 *  - Start
 *  - Finish
 *  - Reversed
 *  - Count
 */
type SliceRange struct {
	Start    []byte "start"    // 1
	Finish   []byte "finish"   // 2
	Reversed bool   "reversed" // 3
	Count    int32  "count"    // 4
}

var tstructSliceRange = thrift.NewTStruct("SliceRange", []thrift.TField{
	thrift.NewTField("start", thrift.STRING, 1),
	thrift.NewTField("finish", thrift.STRING, 2),
	thrift.NewTField("reversed", thrift.BOOL, 3),
	thrift.NewTField("count", thrift.I32, 4),
})

func (*SliceRange) GetTStruct() thrift.TStruct { return tstructSliceRange }
func NewSliceRange() *SliceRange {
	output := &SliceRange{}
	{
		output.Reversed = false
		output.Count = 100
	}
	return output
}

func (p *SliceRange) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSliceRange.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSliceRange.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v72, err73 := iprot.ReadBinary()
	if err73 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start", p.ThriftName(), err73)
	}
	p.Start = v72
	return err
}

func (p *SliceRange) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v74, err75 := iprot.ReadBinary()
	if err75 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "finish", p.ThriftName(), err75)
	}
	p.Finish = v74
	return err
}

func (p *SliceRange) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v76, err77 := iprot.ReadBool()
	if err77 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "reversed", p.ThriftName(), err77)
	}
	p.Reversed = v76
	return err
}

func (p *SliceRange) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v78, err79 := iprot.ReadI32()
	if err79 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "count", p.ThriftName(), err79)
	}
	p.Count = v78
	return err
}

func (p *SliceRange) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SliceRange")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Start != nil {
		err = oprot.WriteFieldBegin("start", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "start", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Start)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "start", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "start", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SliceRange) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Finish != nil {
		err = oprot.WriteFieldBegin("finish", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "finish", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Finish)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "finish", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "finish", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SliceRange) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("reversed", thrift.BOOL, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "reversed", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.Reversed))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "reversed", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "reversed", p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "count", p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) TStructName() string {
	return "SliceRange"
}

func (p *SliceRange) ThriftName() string {
	return "SliceRange"
}

func (p *SliceRange) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Start
	case 2:
		return p.Finish
	case 3:
		return p.Reversed
	case 4:
		return p.Count
	}
	return nil
}

func (p *SliceRange) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start", thrift.STRING, 1),
		thrift.NewTField("finish", thrift.STRING, 2),
		thrift.NewTField("reversed", thrift.BOOL, 3),
		thrift.NewTField("count", thrift.I32, 4),
	})
}

/**
 * A SlicePredicate is similar to a mathematic predicate (see http://en.wikipedia.org/wiki/Predicate_(mathematical_logic)),
 * which is described as "a property that the elements of a set have in common."
 * 
 * SlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is
 * specified, slice_range is ignored.
 * 
 * @param column_name. A list of column names to retrieve. This can be used similar to Memcached's "multi-get" feature
 *                     to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',
 *                     and 'Jim' you can pass those column names as a list to fetch all three at once.
 * @param slice_range. A SliceRange describing how to range, order, and/or limit the slice.
 * 
 * Attributes:
 *  - ColumnNames
 *  - SliceRange
 */
type SlicePredicate struct {
	ColumnNames [][]byte    "column_names" // 1
	SliceRange  *SliceRange "slice_range"  // 2
}

var tstructSlicePredicate = thrift.NewTStruct("SlicePredicate", []thrift.TField{
	thrift.NewTField("column_names", thrift.LIST, 1),
	thrift.NewTField("slice_range", thrift.STRUCT, 2),
})

func (*SlicePredicate) GetTStruct() thrift.TStruct { return tstructSlicePredicate }
func NewSlicePredicate() *SlicePredicate {
	output := &SlicePredicate{}
	{
	}
	return output
}

func (p *SlicePredicate) IsSetColumnNames() bool {
	return len(p.ColumnNames) > 0
}

func (p *SlicePredicate) IsSetSliceRange() bool {
	return p.SliceRange != nil
}

func (p *SlicePredicate) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSlicePredicate.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSlicePredicate.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.LIST {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //SliceRange
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SlicePredicate) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype85, _size82, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnNames", "", err)
	}
	_ = _etype85
	p.ColumnNames = make([][]byte, _size82, _size82)
	for i := 0; i < _size82; i++ {
		v88, err89 := iprot.ReadBinary()
		if err89 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem87", "", err89)
		}
		_elem87 := v88
		p.ColumnNames[i] = _elem87
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *SlicePredicate) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.SliceRange = NewSliceRange()
	err92 := p.SliceRange.Read(iprot)
	if err92 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SliceRangeSliceRange", err92)
	}
	return err
}

func (p *SlicePredicate) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SlicePredicate")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SlicePredicate) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnNames != nil {
		if p.IsSetColumnNames() {
			err = oprot.WriteFieldBegin("column_names", thrift.LIST, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_names", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter93 := range p.ColumnNames {
				err = oprot.WriteBinary(Iter93)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter93", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_names", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *SlicePredicate) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SliceRange != nil {
		if p.IsSetSliceRange() {
			err = oprot.WriteFieldBegin("slice_range", thrift.STRUCT, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "slice_range", p.ThriftName(), err)
			}
			err = p.SliceRange.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("SliceRange", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "slice_range", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *SlicePredicate) TStructName() string {
	return "SlicePredicate"
}

func (p *SlicePredicate) ThriftName() string {
	return "SlicePredicate"
}

func (p *SlicePredicate) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnNames
	case 2:
		return p.SliceRange
	}
	return nil
}

func (p *SlicePredicate) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_names", thrift.LIST, 1),
		thrift.NewTField("slice_range", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - ColumnName
 *  - Op
 *  - Value
 */
type IndexExpression struct {
	ColumnName []byte        "column_name" // 1
	Op         IndexOperator "op"          // 2
	Value      []byte        "value"       // 3
}

var tstructIndexExpression = thrift.NewTStruct("IndexExpression", []thrift.TField{
	thrift.NewTField("column_name", thrift.STRING, 1),
	thrift.NewTField("op", thrift.I32, 2),
	thrift.NewTField("value", thrift.STRING, 3),
})

func (*IndexExpression) GetTStruct() thrift.TStruct { return tstructIndexExpression }
func NewIndexExpression() *IndexExpression {
	output := &IndexExpression{}
	{
		output.Op = math.MinInt32 - 1
	}
	return output
}

func (p *IndexExpression) IsSetOp() bool {
	return int64(p.Op) != math.MinInt32-1
}

func (p *IndexExpression) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIndexExpression.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIndexExpression.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IndexOperator
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexExpression) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v94, err95 := iprot.ReadBinary()
	if err95 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "column_name", p.ThriftName(), err95)
	}
	p.ColumnName = v94
	return err
}

func (p *IndexExpression) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v96, err97 := iprot.ReadI32()
	if err97 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "op", p.ThriftName(), err97)
	}
	p.Op = IndexOperator(v96)
	return err
}

func (p *IndexExpression) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v98, err99 := iprot.ReadBinary()
	if err99 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "value", p.ThriftName(), err99)
	}
	p.Value = v98
	return err
}

func (p *IndexExpression) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IndexExpression")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexExpression) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnName != nil {
		err = oprot.WriteFieldBegin("column_name", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.ColumnName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexExpression) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetOp() {
		err = oprot.WriteFieldBegin("op", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "op", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Op))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "op", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "op", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexExpression) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		err = oprot.WriteFieldBegin("value", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Value)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexExpression) TStructName() string {
	return "IndexExpression"
}

func (p *IndexExpression) ThriftName() string {
	return "IndexExpression"
}

func (p *IndexExpression) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnName
	case 2:
		return p.Op
	case 3:
		return p.Value
	}
	return nil
}

func (p *IndexExpression) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_name", thrift.STRING, 1),
		thrift.NewTField("op", thrift.I32, 2),
		thrift.NewTField("value", thrift.STRING, 3),
	})
}

/**
 * @deprecated use a KeyRange with row_filter in get_range_slices instead
 * 
 * Attributes:
 *  - Expressions
 *  - StartKey
 *  - Count
 */
type IndexClause struct {
	Expressions []*IndexExpression "expressions" // 1
	StartKey    []byte             "start_key"   // 2
	Count       int32              "count"       // 3
}

var tstructIndexClause = thrift.NewTStruct("IndexClause", []thrift.TField{
	thrift.NewTField("expressions", thrift.LIST, 1),
	thrift.NewTField("start_key", thrift.STRING, 2),
	thrift.NewTField("count", thrift.I32, 3),
})

func (*IndexClause) GetTStruct() thrift.TStruct { return tstructIndexClause }
func NewIndexClause() *IndexClause {
	output := &IndexClause{}
	{
		output.Count = 100
	}
	return output
}

func (p *IndexClause) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIndexClause.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIndexClause.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.LIST {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexClause) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype105, _size102, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Expressions", "", err)
	}
	_ = _etype105
	p.Expressions = make([]*IndexExpression, _size102, _size102)
	for i := 0; i < _size102; i++ {
		_elem107 := NewIndexExpression()
		err110 := _elem107.Read(iprot)
		if err110 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem107IndexExpression", err110)
		}
		p.Expressions[i] = _elem107
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *IndexClause) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v111, err112 := iprot.ReadBinary()
	if err112 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "start_key", p.ThriftName(), err112)
	}
	p.StartKey = v111
	return err
}

func (p *IndexClause) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v113, err114 := iprot.ReadI32()
	if err114 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "count", p.ThriftName(), err114)
	}
	p.Count = v113
	return err
}

func (p *IndexClause) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IndexClause")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexClause) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Expressions != nil {
		err = oprot.WriteFieldBegin("expressions", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "expressions", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Expressions))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter115 := range p.Expressions {
			err = Iter115.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("IndexExpression", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "expressions", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexClause) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartKey != nil {
		err = oprot.WriteFieldBegin("start_key", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "start_key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartKey)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "start_key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "start_key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexClause) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "count", p.ThriftName(), err)
	}
	return err
}

func (p *IndexClause) TStructName() string {
	return "IndexClause"
}

func (p *IndexClause) ThriftName() string {
	return "IndexClause"
}

func (p *IndexClause) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Expressions
	case 2:
		return p.StartKey
	case 3:
		return p.Count
	}
	return nil
}

func (p *IndexClause) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("expressions", thrift.LIST, 1),
		thrift.NewTField("start_key", thrift.STRING, 2),
		thrift.NewTField("count", thrift.I32, 3),
	})
}

/**
 * The semantics of start keys and tokens are slightly different.
 * Keys are start-inclusive; tokens are start-exclusive.  Token
 * ranges may also wrap -- that is, the end token may be less
 * than the start one.  Thus, a range from keyX to keyX is a
 * one-element range, but a range from tokenY to tokenY is the
 * full ring.
 * 
 * Attributes:
 *  - StartKey
 *  - EndKey
 *  - StartToken
 *  - EndToken
 *  - RowFilter
 *  - Count
 */
type KeyRange struct {
	StartKey   []byte             "start_key"   // 1
	EndKey     []byte             "end_key"     // 2
	StartToken string             "start_token" // 3
	EndToken   string             "end_token"   // 4
	Count      int32              "count"       // 5
	RowFilter  []*IndexExpression "row_filter"  // 6
}

var tstructKeyRange = thrift.NewTStruct("KeyRange", []thrift.TField{
	thrift.NewTField("start_key", thrift.STRING, 1),
	thrift.NewTField("end_key", thrift.STRING, 2),
	thrift.NewTField("start_token", thrift.STRING, 3),
	thrift.NewTField("end_token", thrift.STRING, 4),
	thrift.NewTField("row_filter", thrift.LIST, 6),
	thrift.NewTField("count", thrift.I32, 5),
})

func (*KeyRange) GetTStruct() thrift.TStruct { return tstructKeyRange }
func NewKeyRange() *KeyRange {
	output := &KeyRange{}
	{
		output.Count = 100
	}
	return output
}

func (p *KeyRange) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *KeyRange) IsSetEndKey() bool {
	return p.EndKey != nil
}

func (p *KeyRange) IsSetStartToken() bool {
	return p.StartToken != ""
}

func (p *KeyRange) IsSetEndToken() bool {
	return p.EndToken != ""
}

func (p *KeyRange) IsSetRowFilter() bool {
	return len(p.RowFilter) > 0
}

func (p *KeyRange) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructKeyRange.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructKeyRange.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.LIST {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyRange) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v116, err117 := iprot.ReadBinary()
	if err117 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start_key", p.ThriftName(), err117)
	}
	p.StartKey = v116
	return err
}

func (p *KeyRange) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v118, err119 := iprot.ReadBinary()
	if err119 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "end_key", p.ThriftName(), err119)
	}
	p.EndKey = v118
	return err
}

func (p *KeyRange) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v120, err121 := iprot.ReadString()
	if err121 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "start_token", p.ThriftName(), err121)
	}
	p.StartToken = v120
	return err
}

func (p *KeyRange) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v122, err123 := iprot.ReadString()
	if err123 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "end_token", p.ThriftName(), err123)
	}
	p.EndToken = v122
	return err
}

func (p *KeyRange) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype129, _size126, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowFilter", "", err)
	}
	_ = _etype129
	p.RowFilter = make([]*IndexExpression, _size126, _size126)
	for i := 0; i < _size126; i++ {
		_elem131 := NewIndexExpression()
		err134 := _elem131.Read(iprot)
		if err134 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem131IndexExpression", err134)
		}
		p.RowFilter[i] = _elem131
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *KeyRange) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v135, err136 := iprot.ReadI32()
	if err136 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "count", p.ThriftName(), err136)
	}
	p.Count = v135
	return err
}

func (p *KeyRange) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KeyRange")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyRange) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartKey != nil {
		if p.IsSetStartKey() {
			err = oprot.WriteFieldBegin("start_key", thrift.STRING, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "start_key", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.StartKey)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "start_key", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "start_key", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KeyRange) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EndKey != nil {
		if p.IsSetEndKey() {
			err = oprot.WriteFieldBegin("end_key", thrift.STRING, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "end_key", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.EndKey)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "end_key", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "end_key", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KeyRange) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetStartToken() {
		err = oprot.WriteFieldBegin("start_token", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_token", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.StartToken)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_token", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_token", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeyRange) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetEndToken() {
		err = oprot.WriteFieldBegin("end_token", thrift.STRING, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "end_token", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.EndToken)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "end_token", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "end_token", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeyRange) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "count", p.ThriftName(), err)
	}
	return err
}

func (p *KeyRange) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowFilter != nil {
		if p.IsSetRowFilter() {
			err = oprot.WriteFieldBegin("row_filter", thrift.LIST, 6)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "row_filter", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, len(p.RowFilter))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter137 := range p.RowFilter {
				err = Iter137.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("IndexExpression", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "row_filter", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KeyRange) TStructName() string {
	return "KeyRange"
}

func (p *KeyRange) ThriftName() string {
	return "KeyRange"
}

func (p *KeyRange) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartKey
	case 2:
		return p.EndKey
	case 3:
		return p.StartToken
	case 4:
		return p.EndToken
	case 6:
		return p.RowFilter
	case 5:
		return p.Count
	}
	return nil
}

func (p *KeyRange) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start_key", thrift.STRING, 1),
		thrift.NewTField("end_key", thrift.STRING, 2),
		thrift.NewTField("start_token", thrift.STRING, 3),
		thrift.NewTField("end_token", thrift.STRING, 4),
		thrift.NewTField("row_filter", thrift.LIST, 6),
		thrift.NewTField("count", thrift.I32, 5),
	})
}

/**
 * A KeySlice is key followed by the data it maps to. A collection of KeySlice is returned by the get_range_slice operation.
 * 
 * @param key. a row key
 * @param columns. List of data represented by the key. Typically, the list is pared down to only the columns specified by
 *                 a SlicePredicate.
 * 
 * Attributes:
 *  - Key
 *  - Columns
 */
type KeySlice struct {
	Key     []byte                 "key"     // 1
	Columns []*ColumnOrSuperColumn "columns" // 2
}

var tstructKeySlice = thrift.NewTStruct("KeySlice", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("columns", thrift.LIST, 2),
})

func (*KeySlice) GetTStruct() thrift.TStruct { return tstructKeySlice }
func NewKeySlice() *KeySlice {
	output := &KeySlice{}
	{
	}
	return output
}

func (p *KeySlice) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructKeySlice.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructKeySlice.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeySlice) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v138, err139 := iprot.ReadBinary()
	if err139 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err139)
	}
	p.Key = v138
	return err
}

func (p *KeySlice) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype145, _size142, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype145
	p.Columns = make([]*ColumnOrSuperColumn, _size142, _size142)
	for i := 0; i < _size142; i++ {
		_elem147 := NewColumnOrSuperColumn()
		err150 := _elem147.Read(iprot)
		if err150 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem147ColumnOrSuperColumn", err150)
		}
		p.Columns[i] = _elem147
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *KeySlice) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KeySlice")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeySlice) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeySlice) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter151 := range p.Columns {
			err = Iter151.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeySlice) TStructName() string {
	return "KeySlice"
}

func (p *KeySlice) ThriftName() string {
	return "KeySlice"
}

func (p *KeySlice) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.Columns
	}
	return nil
}

func (p *KeySlice) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Key
 *  - Count
 */
type KeyCount struct {
	Key   []byte "key"   // 1
	Count int32  "count" // 2
}

var tstructKeyCount = thrift.NewTStruct("KeyCount", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("count", thrift.I32, 2),
})

func (*KeyCount) GetTStruct() thrift.TStruct { return tstructKeyCount }
func NewKeyCount() *KeyCount {
	output := &KeyCount{}
	{
	}
	return output
}

func (p *KeyCount) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructKeyCount.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructKeyCount.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyCount) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v152, err153 := iprot.ReadBinary()
	if err153 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err153)
	}
	p.Key = v152
	return err
}

func (p *KeyCount) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v154, err155 := iprot.ReadI32()
	if err155 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "count", p.ThriftName(), err155)
	}
	p.Count = v154
	return err
}

func (p *KeyCount) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KeyCount")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyCount) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeyCount) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	return err
}

func (p *KeyCount) TStructName() string {
	return "KeyCount"
}

func (p *KeyCount) ThriftName() string {
	return "KeyCount"
}

func (p *KeyCount) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.Count
	}
	return nil
}

func (p *KeyCount) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("count", thrift.I32, 2),
	})
}

/**
 * Note that the timestamp is only optional in case of counter deletion.
 * 
 * Attributes:
 *  - Timestamp
 *  - SuperColumn
 *  - Predicate
 */
type Deletion struct {
	Timestamp   int64           "timestamp"    // 1
	SuperColumn []byte          "super_column" // 2
	Predicate   *SlicePredicate "predicate"    // 3
}

var tstructDeletion = thrift.NewTStruct("Deletion", []thrift.TField{
	thrift.NewTField("timestamp", thrift.I64, 1),
	thrift.NewTField("super_column", thrift.STRING, 2),
	thrift.NewTField("predicate", thrift.STRUCT, 3),
})

func (*Deletion) GetTStruct() thrift.TStruct { return tstructDeletion }
func NewDeletion() *Deletion {
	output := &Deletion{}
	{
	}
	return output
}

func (p *Deletion) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *Deletion) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *Deletion) IsSetPredicate() bool {
	return p.Predicate != nil
}

func (p *Deletion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeletion.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeletion.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //SlicePredicate
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Deletion) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v156, err157 := iprot.ReadI64()
	if err157 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "timestamp", p.ThriftName(), err157)
	}
	p.Timestamp = v156
	return err
}

func (p *Deletion) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v158, err159 := iprot.ReadBinary()
	if err159 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "super_column", p.ThriftName(), err159)
	}
	p.SuperColumn = v158
	return err
}

func (p *Deletion) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err162 := p.Predicate.Read(iprot)
	if err162 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err162)
	}
	return err
}

func (p *Deletion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Deletion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Deletion) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTimestamp() {
		err = oprot.WriteFieldBegin("timestamp", thrift.I64, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteI64(int64(p.Timestamp))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "timestamp", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Deletion) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.STRING, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.SuperColumn)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Deletion) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		if p.IsSetPredicate() {
			err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
			}
			err = p.Predicate.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Deletion) TStructName() string {
	return "Deletion"
}

func (p *Deletion) ThriftName() string {
	return "Deletion"
}

func (p *Deletion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Timestamp
	case 2:
		return p.SuperColumn
	case 3:
		return p.Predicate
	}
	return nil
}

func (p *Deletion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("timestamp", thrift.I64, 1),
		thrift.NewTField("super_column", thrift.STRING, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
	})
}

/**
 * A Mutation is either an insert (represented by filling column_or_supercolumn) or a deletion (represented by filling the deletion attribute).
 * @param column_or_supercolumn. An insert to a column or supercolumn (possibly counter column or supercolumn)
 * @param deletion. A deletion of a column or supercolumn
 * 
 * Attributes:
 *  - ColumnOrSupercolumn
 *  - Deletion
 */
type Mutation struct {
	ColumnOrSupercolumn *ColumnOrSuperColumn "column_or_supercolumn" // 1
	Deletion            *Deletion            "deletion"              // 2
}

var tstructMutation = thrift.NewTStruct("Mutation", []thrift.TField{
	thrift.NewTField("column_or_supercolumn", thrift.STRUCT, 1),
	thrift.NewTField("deletion", thrift.STRUCT, 2),
})

func (*Mutation) GetTStruct() thrift.TStruct { return tstructMutation }
func NewMutation() *Mutation {
	output := &Mutation{}
	{
	}
	return output
}

func (p *Mutation) IsSetColumnOrSupercolumn() bool {
	return p.ColumnOrSupercolumn != nil
}

func (p *Mutation) IsSetDeletion() bool {
	return p.Deletion != nil
}

func (p *Mutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutation.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutation.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ColumnOrSuperColumn
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Deletion
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnOrSupercolumn = NewColumnOrSuperColumn()
	err165 := p.ColumnOrSupercolumn.Read(iprot)
	if err165 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnOrSupercolumnColumnOrSuperColumn", err165)
	}
	return err
}

func (p *Mutation) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Deletion = NewDeletion()
	err168 := p.Deletion.Read(iprot)
	if err168 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.DeletionDeletion", err168)
	}
	return err
}

func (p *Mutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Mutation")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnOrSupercolumn != nil {
		if p.IsSetColumnOrSupercolumn() {
			err = oprot.WriteFieldBegin("column_or_supercolumn", thrift.STRUCT, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_or_supercolumn", p.ThriftName(), err)
			}
			err = p.ColumnOrSupercolumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_or_supercolumn", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Mutation) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Deletion != nil {
		if p.IsSetDeletion() {
			err = oprot.WriteFieldBegin("deletion", thrift.STRUCT, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "deletion", p.ThriftName(), err)
			}
			err = p.Deletion.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Deletion", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "deletion", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Mutation) TStructName() string {
	return "Mutation"
}

func (p *Mutation) ThriftName() string {
	return "Mutation"
}

func (p *Mutation) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnOrSupercolumn
	case 2:
		return p.Deletion
	}
	return nil
}

func (p *Mutation) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_or_supercolumn", thrift.STRUCT, 1),
		thrift.NewTField("deletion", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Host
 *  - Datacenter
 *  - Rack
 */
type EndpointDetails struct {
	Host       string "host"       // 1
	Datacenter string "datacenter" // 2
	Rack       string "rack"       // 3
}

var tstructEndpointDetails = thrift.NewTStruct("EndpointDetails", []thrift.TField{
	thrift.NewTField("host", thrift.STRING, 1),
	thrift.NewTField("datacenter", thrift.STRING, 2),
	thrift.NewTField("rack", thrift.STRING, 3),
})

func (*EndpointDetails) GetTStruct() thrift.TStruct { return tstructEndpointDetails }
func NewEndpointDetails() *EndpointDetails {
	output := &EndpointDetails{}
	{
	}
	return output
}

func (p *EndpointDetails) IsSetRack() bool {
	return p.Rack != ""
}

func (p *EndpointDetails) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructEndpointDetails.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructEndpointDetails.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v169, err170 := iprot.ReadString()
	if err170 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "host", p.ThriftName(), err170)
	}
	p.Host = v169
	return err
}

func (p *EndpointDetails) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v171, err172 := iprot.ReadString()
	if err172 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "datacenter", p.ThriftName(), err172)
	}
	p.Datacenter = v171
	return err
}

func (p *EndpointDetails) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v173, err174 := iprot.ReadString()
	if err174 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "rack", p.ThriftName(), err174)
	}
	p.Rack = v173
	return err
}

func (p *EndpointDetails) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("EndpointDetails")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("host", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Host)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("datacenter", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "datacenter", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Datacenter)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "datacenter", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "datacenter", p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRack() {
		err = oprot.WriteFieldBegin("rack", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "rack", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.Rack)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "rack", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "rack", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EndpointDetails) TStructName() string {
	return "EndpointDetails"
}

func (p *EndpointDetails) ThriftName() string {
	return "EndpointDetails"
}

func (p *EndpointDetails) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Host
	case 2:
		return p.Datacenter
	case 3:
		return p.Rack
	}
	return nil
}

func (p *EndpointDetails) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("host", thrift.STRING, 1),
		thrift.NewTField("datacenter", thrift.STRING, 2),
		thrift.NewTField("rack", thrift.STRING, 3),
	})
}

/**
 * A TokenRange describes part of the Cassandra ring, it is a mapping from a range to
 * endpoints responsible for that range.
 * @param start_token The first token in the range
 * @param end_token The last token in the range
 * @param endpoints The endpoints responsible for the range (listed by their configured listen_address)
 * @param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)
 * 
 * Attributes:
 *  - StartToken
 *  - EndToken
 *  - Endpoints
 *  - RpcEndpoints
 *  - EndpointDetails
 */
type TokenRange struct {
	StartToken      string             "start_token"      // 1
	EndToken        string             "end_token"        // 2
	Endpoints       []string           "endpoints"        // 3
	RpcEndpoints    []string           "rpc_endpoints"    // 4
	EndpointDetails []*EndpointDetails "endpoint_details" // 5
}

var tstructTokenRange = thrift.NewTStruct("TokenRange", []thrift.TField{
	thrift.NewTField("start_token", thrift.STRING, 1),
	thrift.NewTField("end_token", thrift.STRING, 2),
	thrift.NewTField("endpoints", thrift.LIST, 3),
	thrift.NewTField("rpc_endpoints", thrift.LIST, 4),
	thrift.NewTField("endpoint_details", thrift.LIST, 5),
})

func (*TokenRange) GetTStruct() thrift.TStruct { return tstructTokenRange }
func NewTokenRange() *TokenRange {
	output := &TokenRange{}
	{
	}
	return output
}

func (p *TokenRange) IsSetRpcEndpoints() bool {
	return len(p.RpcEndpoints) > 0
}

func (p *TokenRange) IsSetEndpointDetails() bool {
	return len(p.EndpointDetails) > 0
}

func (p *TokenRange) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTokenRange.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTokenRange.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.LIST {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v175, err176 := iprot.ReadString()
	if err176 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start_token", p.ThriftName(), err176)
	}
	p.StartToken = v175
	return err
}

func (p *TokenRange) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v177, err178 := iprot.ReadString()
	if err178 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "end_token", p.ThriftName(), err178)
	}
	p.EndToken = v177
	return err
}

func (p *TokenRange) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype184, _size181, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Endpoints", "", err)
	}
	_ = _etype184
	p.Endpoints = make([]string, _size181, _size181)
	for i := 0; i < _size181; i++ {
		v187, err188 := iprot.ReadString()
		if err188 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem186", "", err188)
		}
		_elem186 := v187
		p.Endpoints[i] = _elem186
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TokenRange) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype194, _size191, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RpcEndpoints", "", err)
	}
	_ = _etype194
	p.RpcEndpoints = make([]string, _size191, _size191)
	for i := 0; i < _size191; i++ {
		v197, err198 := iprot.ReadString()
		if err198 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem196", "", err198)
		}
		_elem196 := v197
		p.RpcEndpoints[i] = _elem196
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TokenRange) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype204, _size201, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.EndpointDetails", "", err)
	}
	_ = _etype204
	p.EndpointDetails = make([]*EndpointDetails, _size201, _size201)
	for i := 0; i < _size201; i++ {
		_elem206 := NewEndpointDetails()
		err209 := _elem206.Read(iprot)
		if err209 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem206EndpointDetails", err209)
		}
		p.EndpointDetails[i] = _elem206
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TokenRange) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TokenRange")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("start_token", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.StartToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("end_token", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.EndToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Endpoints != nil {
		err = oprot.WriteFieldBegin("endpoints", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "endpoints", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Endpoints))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter210 := range p.Endpoints {
			err = oprot.WriteString(Iter210)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter210", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "endpoints", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TokenRange) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RpcEndpoints != nil {
		if p.IsSetRpcEndpoints() {
			err = oprot.WriteFieldBegin("rpc_endpoints", thrift.LIST, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "rpc_endpoints", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, len(p.RpcEndpoints))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter211 := range p.RpcEndpoints {
				err = oprot.WriteString(Iter211)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter211", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "rpc_endpoints", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TokenRange) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EndpointDetails != nil {
		if p.IsSetEndpointDetails() {
			err = oprot.WriteFieldBegin("endpoint_details", thrift.LIST, 5)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "endpoint_details", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, len(p.EndpointDetails))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter212 := range p.EndpointDetails {
				err = Iter212.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("EndpointDetails", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "endpoint_details", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TokenRange) TStructName() string {
	return "TokenRange"
}

func (p *TokenRange) ThriftName() string {
	return "TokenRange"
}

func (p *TokenRange) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartToken
	case 2:
		return p.EndToken
	case 3:
		return p.Endpoints
	case 4:
		return p.RpcEndpoints
	case 5:
		return p.EndpointDetails
	}
	return nil
}

func (p *TokenRange) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start_token", thrift.STRING, 1),
		thrift.NewTField("end_token", thrift.STRING, 2),
		thrift.NewTField("endpoints", thrift.LIST, 3),
		thrift.NewTField("rpc_endpoints", thrift.LIST, 4),
		thrift.NewTField("endpoint_details", thrift.LIST, 5),
	})
}

/**
 * Authentication requests can contain any data, dependent on the IAuthenticator used
 * 
 * Attributes:
 *  - Credentials
 */
type AuthenticationRequest struct {
	Credentials map[string]string "credentials" // 1
}

var tstructAuthenticationRequest = thrift.NewTStruct("AuthenticationRequest", []thrift.TField{
	thrift.NewTField("credentials", thrift.MAP, 1),
})

func (*AuthenticationRequest) GetTStruct() thrift.TStruct { return tstructAuthenticationRequest }
func NewAuthenticationRequest() *AuthenticationRequest {
	output := &AuthenticationRequest{}
	{
	}
	return output
}

func (p *AuthenticationRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAuthenticationRequest.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAuthenticationRequest.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.MAP {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationRequest) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype216, _vtype217, _size215, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Credentials", "", err)
	}
	_, _ = _ktype216, _vtype217
	p.Credentials = make(map[string]string, _size215)
	for i := 0; i < _size215; i++ {
		v222, err223 := iprot.ReadString()
		if err223 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key220", "", err223)
		}
		_key220 := v222
		v224, err225 := iprot.ReadString()
		if err225 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val221", "", err225)
		}
		_val221 := v224
		p.Credentials[_key220] = _val221
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *AuthenticationRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AuthenticationRequest")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationRequest) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Credentials != nil {
		err = oprot.WriteFieldBegin("credentials", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "credentials", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Credentials))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter226, Viter227 := range p.Credentials {
			err = oprot.WriteString(Kiter226)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter226", "", err)
			}
			err = oprot.WriteString(Viter227)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter227", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "credentials", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AuthenticationRequest) TStructName() string {
	return "AuthenticationRequest"
}

func (p *AuthenticationRequest) ThriftName() string {
	return "AuthenticationRequest"
}

func (p *AuthenticationRequest) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Credentials
	}
	return nil
}

func (p *AuthenticationRequest) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("credentials", thrift.MAP, 1),
	})
}

/**
 * Attributes:
 *  - Name
 *  - ValidationClass
 *  - IndexType
 *  - IndexName
 *  - IndexOptions
 */
type ColumnDef struct {
	Name            []byte            "name"             // 1
	ValidationClass string            "validation_class" // 2
	IndexType       IndexType         "index_type"       // 3
	IndexName       string            "index_name"       // 4
	IndexOptions    map[string]string "index_options"    // 5
}

var tstructColumnDef = thrift.NewTStruct("ColumnDef", []thrift.TField{
	thrift.NewTField("name", thrift.STRING, 1),
	thrift.NewTField("validation_class", thrift.STRING, 2),
	thrift.NewTField("index_type", thrift.I32, 3),
	thrift.NewTField("index_name", thrift.STRING, 4),
	thrift.NewTField("index_options", thrift.MAP, 5),
})

func (*ColumnDef) GetTStruct() thrift.TStruct { return tstructColumnDef }
func NewColumnDef() *ColumnDef {
	output := &ColumnDef{}
	{
		output.IndexType = math.MinInt32 - 1
	}
	return output
}

func (p *ColumnDef) IsSetIndexType() bool {
	return int64(p.IndexType) != math.MinInt32-1
}

func (p *ColumnDef) IsSetIndexName() bool {
	return p.IndexName != ""
}

func (p *ColumnDef) IsSetIndexOptions() bool {
	return p.IndexOptions != nil && len(p.IndexOptions) > 0
}

func (p *ColumnDef) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructColumnDef.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructColumnDef.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //IndexType
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDef) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v228, err229 := iprot.ReadBinary()
	if err229 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err229)
	}
	p.Name = v228
	return err
}

func (p *ColumnDef) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v230, err231 := iprot.ReadString()
	if err231 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "validation_class", p.ThriftName(), err231)
	}
	p.ValidationClass = v230
	return err
}

func (p *ColumnDef) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v232, err233 := iprot.ReadI32()
	if err233 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "index_type", p.ThriftName(), err233)
	}
	p.IndexType = IndexType(v232)
	return err
}

func (p *ColumnDef) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v234, err235 := iprot.ReadString()
	if err235 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "index_name", p.ThriftName(), err235)
	}
	p.IndexName = v234
	return err
}

func (p *ColumnDef) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype239, _vtype240, _size238, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.IndexOptions", "", err)
	}
	_, _ = _ktype239, _vtype240
	p.IndexOptions = make(map[string]string, _size238)
	for i := 0; i < _size238; i++ {
		v245, err246 := iprot.ReadString()
		if err246 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key243", "", err246)
		}
		_key243 := v245
		v247, err248 := iprot.ReadString()
		if err248 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val244", "", err248)
		}
		_val244 := v247
		p.IndexOptions[_key243] = _val244
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ColumnDef) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnDef")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDef) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDef) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("validation_class", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "validation_class", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.ValidationClass)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "validation_class", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "validation_class", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDef) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetIndexType() {
		err = oprot.WriteFieldBegin("index_type", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "index_type", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.IndexType))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "index_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "index_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDef) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetIndexName() {
		err = oprot.WriteFieldBegin("index_name", thrift.STRING, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "index_name", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.IndexName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "index_name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "index_name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDef) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IndexOptions != nil {
		if p.IsSetIndexOptions() {
			err = oprot.WriteFieldBegin("index_options", thrift.MAP, 5)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "index_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.IndexOptions))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter249, Viter250 := range p.IndexOptions {
				err = oprot.WriteString(Kiter249)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter249", "", err)
				}
				err = oprot.WriteString(Viter250)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter250", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "index_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnDef) TStructName() string {
	return "ColumnDef"
}

func (p *ColumnDef) ThriftName() string {
	return "ColumnDef"
}

func (p *ColumnDef) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.ValidationClass
	case 3:
		return p.IndexType
	case 4:
		return p.IndexName
	case 5:
		return p.IndexOptions
	}
	return nil
}

func (p *ColumnDef) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("validation_class", thrift.STRING, 2),
		thrift.NewTField("index_type", thrift.I32, 3),
		thrift.NewTField("index_name", thrift.STRING, 4),
		thrift.NewTField("index_options", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Keyspace
 *  - Name
 *  - ColumnType
 *  - ComparatorType
 *  - SubcomparatorType
 *  - Comment
 *  - ReadRepairChance
 *  - ColumnMetadata
 *  - GcGraceSeconds
 *  - DefaultValidationClass
 *  - Id
 *  - MinCompactionThreshold
 *  - MaxCompactionThreshold
 *  - ReplicateOnWrite
 *  - KeyValidationClass
 *  - KeyAlias
 *  - CompactionStrategy
 *  - CompactionStrategyOptions
 *  - CompressionOptions
 *  - BloomFilterFpChance
 *  - Caching
 *  - DclocalReadRepairChance
 *  - RowCacheSize: @deprecated
 *  - KeyCacheSize: @deprecated
 *  - RowCacheSavePeriodInSeconds: @deprecated
 *  - KeyCacheSavePeriodInSeconds: @deprecated
 *  - MemtableFlushAfterMins: @deprecated
 *  - MemtableThroughputInMb: @deprecated
 *  - MemtableOperationsInMillions: @deprecated
 *  - MergeShardsChance: @deprecated
 *  - RowCacheProvider: @deprecated
 *  - RowCacheKeysToSave: @deprecated
 */
type CfDef struct {
	Keyspace                     string            "keyspace"    // 1
	Name                         string            "name"        // 2
	ColumnType                   string            "column_type" // 3
	_                            interface{}       // nil # 4
	ComparatorType               string            "comparator_type"    // 5
	SubcomparatorType            string            "subcomparator_type" // 6
	_                            interface{}       // nil # 7
	Comment                      string            "comment"        // 8
	RowCacheSize                 float64           "row_cache_size" // 9
	_                            interface{}       // nil # 10
	KeyCacheSize                 float64           "key_cache_size"                   // 11
	ReadRepairChance             float64           "read_repair_chance"               // 12
	ColumnMetadata               []*ColumnDef      "column_metadata"                  // 13
	GcGraceSeconds               int32             "gc_grace_seconds"                 // 14
	DefaultValidationClass       string            "default_validation_class"         // 15
	Id                           int32             "id"                               // 16
	MinCompactionThreshold       int32             "min_compaction_threshold"         // 17
	MaxCompactionThreshold       int32             "max_compaction_threshold"         // 18
	RowCacheSavePeriodInSeconds  int32             "row_cache_save_period_in_seconds" // 19
	KeyCacheSavePeriodInSeconds  int32             "key_cache_save_period_in_seconds" // 20
	MemtableFlushAfterMins       int32             "memtable_flush_after_mins"        // 21
	MemtableThroughputInMb       int32             "memtable_throughput_in_mb"        // 22
	MemtableOperationsInMillions float64           "memtable_operations_in_millions"  // 23
	ReplicateOnWrite             bool              "replicate_on_write"               // 24
	MergeShardsChance            float64           "merge_shards_chance"              // 25
	KeyValidationClass           string            "key_validation_class"             // 26
	RowCacheProvider             string            "row_cache_provider"               // 27
	KeyAlias                     []byte            "key_alias"                        // 28
	CompactionStrategy           string            "compaction_strategy"              // 29
	CompactionStrategyOptions    map[string]string "compaction_strategy_options"      // 30
	RowCacheKeysToSave           int32             "row_cache_keys_to_save"           // 31
	CompressionOptions           map[string]string "compression_options"              // 32
	BloomFilterFpChance          float64           "bloom_filter_fp_chance"           // 33
	Caching                      string            "caching"                          // 34
	_                            interface{}       // nil # 35
	_                            interface{}       // nil # 36
	DclocalReadRepairChance      float64           "dclocal_read_repair_chance" // 37
}

var tstructCfDef = thrift.NewTStruct("CfDef", []thrift.TField{
	thrift.NewTField("keyspace", thrift.STRING, 1),
	thrift.NewTField("name", thrift.STRING, 2),
	thrift.NewTField("column_type", thrift.STRING, 3),
	thrift.NewTField("comparator_type", thrift.STRING, 5),
	thrift.NewTField("subcomparator_type", thrift.STRING, 6),
	thrift.NewTField("comment", thrift.STRING, 8),
	thrift.NewTField("read_repair_chance", thrift.DOUBLE, 12),
	thrift.NewTField("column_metadata", thrift.LIST, 13),
	thrift.NewTField("gc_grace_seconds", thrift.I32, 14),
	thrift.NewTField("default_validation_class", thrift.STRING, 15),
	thrift.NewTField("id", thrift.I32, 16),
	thrift.NewTField("min_compaction_threshold", thrift.I32, 17),
	thrift.NewTField("max_compaction_threshold", thrift.I32, 18),
	thrift.NewTField("replicate_on_write", thrift.BOOL, 24),
	thrift.NewTField("key_validation_class", thrift.STRING, 26),
	thrift.NewTField("key_alias", thrift.STRING, 28),
	thrift.NewTField("compaction_strategy", thrift.STRING, 29),
	thrift.NewTField("compaction_strategy_options", thrift.MAP, 30),
	thrift.NewTField("compression_options", thrift.MAP, 32),
	thrift.NewTField("bloom_filter_fp_chance", thrift.DOUBLE, 33),
	thrift.NewTField("caching", thrift.STRING, 34),
	thrift.NewTField("dclocal_read_repair_chance", thrift.DOUBLE, 37),
	thrift.NewTField("row_cache_size", thrift.DOUBLE, 9),
	thrift.NewTField("key_cache_size", thrift.DOUBLE, 11),
	thrift.NewTField("row_cache_save_period_in_seconds", thrift.I32, 19),
	thrift.NewTField("key_cache_save_period_in_seconds", thrift.I32, 20),
	thrift.NewTField("memtable_flush_after_mins", thrift.I32, 21),
	thrift.NewTField("memtable_throughput_in_mb", thrift.I32, 22),
	thrift.NewTField("memtable_operations_in_millions", thrift.DOUBLE, 23),
	thrift.NewTField("merge_shards_chance", thrift.DOUBLE, 25),
	thrift.NewTField("row_cache_provider", thrift.STRING, 27),
	thrift.NewTField("row_cache_keys_to_save", thrift.I32, 31),
})

func (*CfDef) GetTStruct() thrift.TStruct { return tstructCfDef }
func NewCfDef() *CfDef {
	output := &CfDef{}
	{
		output.ColumnType = "Standard"
		output.ComparatorType = "BytesType"
		output.Caching = "keys_only"
		output.DclocalReadRepairChance = 0
	}
	return output
}

func (p *CfDef) IsSetColumnType() bool {
	return p.ColumnType != "Standard"
}

func (p *CfDef) IsSetComparatorType() bool {
	return p.ComparatorType != "BytesType"
}

func (p *CfDef) IsSetSubcomparatorType() bool {
	return p.SubcomparatorType != ""
}

func (p *CfDef) IsSetComment() bool {
	return p.Comment != ""
}

func (p *CfDef) IsSetReadRepairChance() bool {
	return p.ReadRepairChance != 0
}

func (p *CfDef) IsSetColumnMetadata() bool {
	return len(p.ColumnMetadata) > 0
}

func (p *CfDef) IsSetGcGraceSeconds() bool {
	return p.GcGraceSeconds != 0
}

func (p *CfDef) IsSetDefaultValidationClass() bool {
	return p.DefaultValidationClass != ""
}

func (p *CfDef) IsSetId() bool {
	return p.Id != 0
}

func (p *CfDef) IsSetMinCompactionThreshold() bool {
	return p.MinCompactionThreshold != 0
}

func (p *CfDef) IsSetMaxCompactionThreshold() bool {
	return p.MaxCompactionThreshold != 0
}

func (p *CfDef) IsSetReplicateOnWrite() bool {
	return p.ReplicateOnWrite != false
}

func (p *CfDef) IsSetKeyValidationClass() bool {
	return p.KeyValidationClass != ""
}

func (p *CfDef) IsSetKeyAlias() bool {
	return p.KeyAlias != nil
}

func (p *CfDef) IsSetCompactionStrategy() bool {
	return p.CompactionStrategy != ""
}

func (p *CfDef) IsSetCompactionStrategyOptions() bool {
	return p.CompactionStrategyOptions != nil && len(p.CompactionStrategyOptions) > 0
}

func (p *CfDef) IsSetCompressionOptions() bool {
	return p.CompressionOptions != nil && len(p.CompressionOptions) > 0
}

func (p *CfDef) IsSetBloomFilterFpChance() bool {
	return p.BloomFilterFpChance != 0
}

func (p *CfDef) IsSetCaching() bool {
	return p.Caching != "keys_only"
}

func (p *CfDef) IsSetDclocalReadRepairChance() bool {
	return p.DclocalReadRepairChance != 0
}

func (p *CfDef) IsSetRowCacheSize() bool {
	return p.RowCacheSize != 0
}

func (p *CfDef) IsSetKeyCacheSize() bool {
	return p.KeyCacheSize != 0
}

func (p *CfDef) IsSetRowCacheSavePeriodInSeconds() bool {
	return p.RowCacheSavePeriodInSeconds != 0
}

func (p *CfDef) IsSetKeyCacheSavePeriodInSeconds() bool {
	return p.KeyCacheSavePeriodInSeconds != 0
}

func (p *CfDef) IsSetMemtableFlushAfterMins() bool {
	return p.MemtableFlushAfterMins != 0
}

func (p *CfDef) IsSetMemtableThroughputInMb() bool {
	return p.MemtableThroughputInMb != 0
}

func (p *CfDef) IsSetMemtableOperationsInMillions() bool {
	return p.MemtableOperationsInMillions != 0
}

func (p *CfDef) IsSetMergeShardsChance() bool {
	return p.MergeShardsChance != 0
}

func (p *CfDef) IsSetRowCacheProvider() bool {
	return p.RowCacheProvider != ""
}

func (p *CfDef) IsSetRowCacheKeysToSave() bool {
	return p.RowCacheKeysToSave != 0
}

func (p *CfDef) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCfDef.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCfDef.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 12: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 13: //
			if fieldTypeId == thrift.LIST {
				err = p.readField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 14: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 15: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField15(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 16: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField16(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 17: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField17(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 18: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField18(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 24: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField24(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 26: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField26(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 28: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField28(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 29: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField29(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 30: //
			if fieldTypeId == thrift.MAP {
				err = p.readField30(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 32: //
			if fieldTypeId == thrift.MAP {
				err = p.readField32(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 33: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField33(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 34: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField34(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 37: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField37(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 9: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 11: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 19: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField19(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 20: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField20(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 21: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField21(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 22: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField22(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 23: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField23(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 25: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField25(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 27: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField27(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 31: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField31(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v251, err252 := iprot.ReadString()
	if err252 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err252)
	}
	p.Keyspace = v251
	return err
}

func (p *CfDef) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v253, err254 := iprot.ReadString()
	if err254 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "name", p.ThriftName(), err254)
	}
	p.Name = v253
	return err
}

func (p *CfDef) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v255, err256 := iprot.ReadString()
	if err256 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column_type", p.ThriftName(), err256)
	}
	p.ColumnType = v255
	return err
}

func (p *CfDef) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v257, err258 := iprot.ReadString()
	if err258 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "comparator_type", p.ThriftName(), err258)
	}
	p.ComparatorType = v257
	return err
}

func (p *CfDef) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v259, err260 := iprot.ReadString()
	if err260 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "subcomparator_type", p.ThriftName(), err260)
	}
	p.SubcomparatorType = v259
	return err
}

func (p *CfDef) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v261, err262 := iprot.ReadString()
	if err262 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "comment", p.ThriftName(), err262)
	}
	p.Comment = v261
	return err
}

func (p *CfDef) readField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v263, err264 := iprot.ReadDouble()
	if err264 != nil {
		return thrift.NewTProtocolExceptionReadField(12, "read_repair_chance", p.ThriftName(), err264)
	}
	p.ReadRepairChance = v263
	return err
}

func (p *CfDef) readField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype270, _size267, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnMetadata", "", err)
	}
	_ = _etype270
	p.ColumnMetadata = make([]*ColumnDef, _size267, _size267)
	for i := 0; i < _size267; i++ {
		_elem272 := NewColumnDef()
		err275 := _elem272.Read(iprot)
		if err275 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem272ColumnDef", err275)
		}
		p.ColumnMetadata[i] = _elem272
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CfDef) readField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v276, err277 := iprot.ReadI32()
	if err277 != nil {
		return thrift.NewTProtocolExceptionReadField(14, "gc_grace_seconds", p.ThriftName(), err277)
	}
	p.GcGraceSeconds = v276
	return err
}

func (p *CfDef) readField15(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v278, err279 := iprot.ReadString()
	if err279 != nil {
		return thrift.NewTProtocolExceptionReadField(15, "default_validation_class", p.ThriftName(), err279)
	}
	p.DefaultValidationClass = v278
	return err
}

func (p *CfDef) readField16(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v280, err281 := iprot.ReadI32()
	if err281 != nil {
		return thrift.NewTProtocolExceptionReadField(16, "id", p.ThriftName(), err281)
	}
	p.Id = v280
	return err
}

func (p *CfDef) readField17(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v282, err283 := iprot.ReadI32()
	if err283 != nil {
		return thrift.NewTProtocolExceptionReadField(17, "min_compaction_threshold", p.ThriftName(), err283)
	}
	p.MinCompactionThreshold = v282
	return err
}

func (p *CfDef) readField18(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v284, err285 := iprot.ReadI32()
	if err285 != nil {
		return thrift.NewTProtocolExceptionReadField(18, "max_compaction_threshold", p.ThriftName(), err285)
	}
	p.MaxCompactionThreshold = v284
	return err
}

func (p *CfDef) readField24(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v286, err287 := iprot.ReadBool()
	if err287 != nil {
		return thrift.NewTProtocolExceptionReadField(24, "replicate_on_write", p.ThriftName(), err287)
	}
	p.ReplicateOnWrite = v286
	return err
}

func (p *CfDef) readField26(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v288, err289 := iprot.ReadString()
	if err289 != nil {
		return thrift.NewTProtocolExceptionReadField(26, "key_validation_class", p.ThriftName(), err289)
	}
	p.KeyValidationClass = v288
	return err
}

func (p *CfDef) readField28(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v290, err291 := iprot.ReadBinary()
	if err291 != nil {
		return thrift.NewTProtocolExceptionReadField(28, "key_alias", p.ThriftName(), err291)
	}
	p.KeyAlias = v290
	return err
}

func (p *CfDef) readField29(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v292, err293 := iprot.ReadString()
	if err293 != nil {
		return thrift.NewTProtocolExceptionReadField(29, "compaction_strategy", p.ThriftName(), err293)
	}
	p.CompactionStrategy = v292
	return err
}

func (p *CfDef) readField30(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype297, _vtype298, _size296, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.CompactionStrategyOptions", "", err)
	}
	_, _ = _ktype297, _vtype298
	p.CompactionStrategyOptions = make(map[string]string, _size296)
	for i := 0; i < _size296; i++ {
		v303, err304 := iprot.ReadString()
		if err304 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key301", "", err304)
		}
		_key301 := v303
		v305, err306 := iprot.ReadString()
		if err306 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val302", "", err306)
		}
		_val302 := v305
		p.CompactionStrategyOptions[_key301] = _val302
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CfDef) readField32(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype310, _vtype311, _size309, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.CompressionOptions", "", err)
	}
	_, _ = _ktype310, _vtype311
	p.CompressionOptions = make(map[string]string, _size309)
	for i := 0; i < _size309; i++ {
		v316, err317 := iprot.ReadString()
		if err317 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key314", "", err317)
		}
		_key314 := v316
		v318, err319 := iprot.ReadString()
		if err319 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val315", "", err319)
		}
		_val315 := v318
		p.CompressionOptions[_key314] = _val315
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CfDef) readField33(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v320, err321 := iprot.ReadDouble()
	if err321 != nil {
		return thrift.NewTProtocolExceptionReadField(33, "bloom_filter_fp_chance", p.ThriftName(), err321)
	}
	p.BloomFilterFpChance = v320
	return err
}

func (p *CfDef) readField34(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v322, err323 := iprot.ReadString()
	if err323 != nil {
		return thrift.NewTProtocolExceptionReadField(34, "caching", p.ThriftName(), err323)
	}
	p.Caching = v322
	return err
}

func (p *CfDef) readField37(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v324, err325 := iprot.ReadDouble()
	if err325 != nil {
		return thrift.NewTProtocolExceptionReadField(37, "dclocal_read_repair_chance", p.ThriftName(), err325)
	}
	p.DclocalReadRepairChance = v324
	return err
}

func (p *CfDef) readField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v326, err327 := iprot.ReadDouble()
	if err327 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "row_cache_size", p.ThriftName(), err327)
	}
	p.RowCacheSize = v326
	return err
}

func (p *CfDef) readField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v328, err329 := iprot.ReadDouble()
	if err329 != nil {
		return thrift.NewTProtocolExceptionReadField(11, "key_cache_size", p.ThriftName(), err329)
	}
	p.KeyCacheSize = v328
	return err
}

func (p *CfDef) readField19(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v330, err331 := iprot.ReadI32()
	if err331 != nil {
		return thrift.NewTProtocolExceptionReadField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err331)
	}
	p.RowCacheSavePeriodInSeconds = v330
	return err
}

func (p *CfDef) readField20(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v332, err333 := iprot.ReadI32()
	if err333 != nil {
		return thrift.NewTProtocolExceptionReadField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err333)
	}
	p.KeyCacheSavePeriodInSeconds = v332
	return err
}

func (p *CfDef) readField21(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v334, err335 := iprot.ReadI32()
	if err335 != nil {
		return thrift.NewTProtocolExceptionReadField(21, "memtable_flush_after_mins", p.ThriftName(), err335)
	}
	p.MemtableFlushAfterMins = v334
	return err
}

func (p *CfDef) readField22(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v336, err337 := iprot.ReadI32()
	if err337 != nil {
		return thrift.NewTProtocolExceptionReadField(22, "memtable_throughput_in_mb", p.ThriftName(), err337)
	}
	p.MemtableThroughputInMb = v336
	return err
}

func (p *CfDef) readField23(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v338, err339 := iprot.ReadDouble()
	if err339 != nil {
		return thrift.NewTProtocolExceptionReadField(23, "memtable_operations_in_millions", p.ThriftName(), err339)
	}
	p.MemtableOperationsInMillions = v338
	return err
}

func (p *CfDef) readField25(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v340, err341 := iprot.ReadDouble()
	if err341 != nil {
		return thrift.NewTProtocolExceptionReadField(25, "merge_shards_chance", p.ThriftName(), err341)
	}
	p.MergeShardsChance = v340
	return err
}

func (p *CfDef) readField27(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v342, err343 := iprot.ReadString()
	if err343 != nil {
		return thrift.NewTProtocolExceptionReadField(27, "row_cache_provider", p.ThriftName(), err343)
	}
	p.RowCacheProvider = v342
	return err
}

func (p *CfDef) readField31(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v344, err345 := iprot.ReadI32()
	if err345 != nil {
		return thrift.NewTProtocolExceptionReadField(31, "row_cache_keys_to_save", p.ThriftName(), err345)
	}
	p.RowCacheKeysToSave = v344
	return err
}

func (p *CfDef) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CfDef")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = p.writeField9(oprot)
	if err != nil {
		return err
	}
	err = p.writeField11(oprot)
	if err != nil {
		return err
	}
	err = p.writeField12(oprot)
	if err != nil {
		return err
	}
	err = p.writeField13(oprot)
	if err != nil {
		return err
	}
	err = p.writeField14(oprot)
	if err != nil {
		return err
	}
	err = p.writeField15(oprot)
	if err != nil {
		return err
	}
	err = p.writeField16(oprot)
	if err != nil {
		return err
	}
	err = p.writeField17(oprot)
	if err != nil {
		return err
	}
	err = p.writeField18(oprot)
	if err != nil {
		return err
	}
	err = p.writeField19(oprot)
	if err != nil {
		return err
	}
	err = p.writeField20(oprot)
	if err != nil {
		return err
	}
	err = p.writeField21(oprot)
	if err != nil {
		return err
	}
	err = p.writeField22(oprot)
	if err != nil {
		return err
	}
	err = p.writeField23(oprot)
	if err != nil {
		return err
	}
	err = p.writeField24(oprot)
	if err != nil {
		return err
	}
	err = p.writeField25(oprot)
	if err != nil {
		return err
	}
	err = p.writeField26(oprot)
	if err != nil {
		return err
	}
	err = p.writeField27(oprot)
	if err != nil {
		return err
	}
	err = p.writeField28(oprot)
	if err != nil {
		return err
	}
	err = p.writeField29(oprot)
	if err != nil {
		return err
	}
	err = p.writeField30(oprot)
	if err != nil {
		return err
	}
	err = p.writeField31(oprot)
	if err != nil {
		return err
	}
	err = p.writeField32(oprot)
	if err != nil {
		return err
	}
	err = p.writeField33(oprot)
	if err != nil {
		return err
	}
	err = p.writeField34(oprot)
	if err != nil {
		return err
	}
	err = p.writeField37(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Keyspace)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("name", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Name)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetColumnType() {
		err = oprot.WriteFieldBegin("column_type", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_type", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.ColumnType)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetComparatorType() {
		err = oprot.WriteFieldBegin("comparator_type", thrift.STRING, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "comparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.ComparatorType)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "comparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "comparator_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetSubcomparatorType() {
		err = oprot.WriteFieldBegin("subcomparator_type", thrift.STRING, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "subcomparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.SubcomparatorType)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "subcomparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "subcomparator_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetComment() {
		err = oprot.WriteFieldBegin("comment", thrift.STRING, 8)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "comment", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.Comment)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "comment", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "comment", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheSize() {
		err = oprot.WriteFieldBegin("row_cache_size", thrift.DOUBLE, 9)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(9, "row_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.RowCacheSize))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(9, "row_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(9, "row_cache_size", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetKeyCacheSize() {
		err = oprot.WriteFieldBegin("key_cache_size", thrift.DOUBLE, 11)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "key_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.KeyCacheSize))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "key_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "key_cache_size", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetReadRepairChance() {
		err = oprot.WriteFieldBegin("read_repair_chance", thrift.DOUBLE, 12)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.ReadRepairChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "read_repair_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnMetadata != nil {
		if p.IsSetColumnMetadata() {
			err = oprot.WriteFieldBegin("column_metadata", thrift.LIST, 13)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(13, "column_metadata", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnMetadata))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter346 := range p.ColumnMetadata {
				err = Iter346.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("ColumnDef", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(13, "column_metadata", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) writeField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetGcGraceSeconds() {
		err = oprot.WriteFieldBegin("gc_grace_seconds", thrift.I32, 14)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "gc_grace_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.GcGraceSeconds))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "gc_grace_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "gc_grace_seconds", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField15(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetDefaultValidationClass() {
		err = oprot.WriteFieldBegin("default_validation_class", thrift.STRING, 15)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "default_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.DefaultValidationClass)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "default_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "default_validation_class", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField16(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetId() {
		err = oprot.WriteFieldBegin("id", thrift.I32, 16)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "id", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Id))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "id", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "id", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField17(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMinCompactionThreshold() {
		err = oprot.WriteFieldBegin("min_compaction_threshold", thrift.I32, 17)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "min_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MinCompactionThreshold))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "min_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "min_compaction_threshold", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField18(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMaxCompactionThreshold() {
		err = oprot.WriteFieldBegin("max_compaction_threshold", thrift.I32, 18)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "max_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MaxCompactionThreshold))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "max_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "max_compaction_threshold", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField19(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheSavePeriodInSeconds() {
		err = oprot.WriteFieldBegin("row_cache_save_period_in_seconds", thrift.I32, 19)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.RowCacheSavePeriodInSeconds))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField20(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetKeyCacheSavePeriodInSeconds() {
		err = oprot.WriteFieldBegin("key_cache_save_period_in_seconds", thrift.I32, 20)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.KeyCacheSavePeriodInSeconds))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField21(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMemtableFlushAfterMins() {
		err = oprot.WriteFieldBegin("memtable_flush_after_mins", thrift.I32, 21)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "memtable_flush_after_mins", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MemtableFlushAfterMins))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "memtable_flush_after_mins", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "memtable_flush_after_mins", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField22(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMemtableThroughputInMb() {
		err = oprot.WriteFieldBegin("memtable_throughput_in_mb", thrift.I32, 22)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "memtable_throughput_in_mb", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MemtableThroughputInMb))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "memtable_throughput_in_mb", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "memtable_throughput_in_mb", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField23(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMemtableOperationsInMillions() {
		err = oprot.WriteFieldBegin("memtable_operations_in_millions", thrift.DOUBLE, 23)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "memtable_operations_in_millions", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.MemtableOperationsInMillions))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "memtable_operations_in_millions", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "memtable_operations_in_millions", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField24(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetReplicateOnWrite() {
		err = oprot.WriteFieldBegin("replicate_on_write", thrift.BOOL, 24)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "replicate_on_write", p.ThriftName(), err)
		}
		err = oprot.WriteBool(bool(p.ReplicateOnWrite))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "replicate_on_write", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "replicate_on_write", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField25(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMergeShardsChance() {
		err = oprot.WriteFieldBegin("merge_shards_chance", thrift.DOUBLE, 25)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "merge_shards_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.MergeShardsChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "merge_shards_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "merge_shards_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField26(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetKeyValidationClass() {
		err = oprot.WriteFieldBegin("key_validation_class", thrift.STRING, 26)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "key_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.KeyValidationClass)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "key_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "key_validation_class", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField27(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheProvider() {
		err = oprot.WriteFieldBegin("row_cache_provider", thrift.STRING, 27)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "row_cache_provider", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.RowCacheProvider)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "row_cache_provider", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "row_cache_provider", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField28(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.KeyAlias != nil {
		if p.IsSetKeyAlias() {
			err = oprot.WriteFieldBegin("key_alias", thrift.STRING, 28)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(28, "key_alias", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.KeyAlias)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(28, "key_alias", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(28, "key_alias", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) writeField29(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCompactionStrategy() {
		err = oprot.WriteFieldBegin("compaction_strategy", thrift.STRING, 29)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "compaction_strategy", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.CompactionStrategy)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "compaction_strategy", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "compaction_strategy", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField30(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CompactionStrategyOptions != nil {
		if p.IsSetCompactionStrategyOptions() {
			err = oprot.WriteFieldBegin("compaction_strategy_options", thrift.MAP, 30)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(30, "compaction_strategy_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.CompactionStrategyOptions))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter347, Viter348 := range p.CompactionStrategyOptions {
				err = oprot.WriteString(Kiter347)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter347", "", err)
				}
				err = oprot.WriteString(Viter348)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter348", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(30, "compaction_strategy_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) writeField31(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheKeysToSave() {
		err = oprot.WriteFieldBegin("row_cache_keys_to_save", thrift.I32, 31)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "row_cache_keys_to_save", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.RowCacheKeysToSave))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "row_cache_keys_to_save", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "row_cache_keys_to_save", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField32(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CompressionOptions != nil {
		if p.IsSetCompressionOptions() {
			err = oprot.WriteFieldBegin("compression_options", thrift.MAP, 32)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(32, "compression_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.CompressionOptions))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter349, Viter350 := range p.CompressionOptions {
				err = oprot.WriteString(Kiter349)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter349", "", err)
				}
				err = oprot.WriteString(Viter350)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter350", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(32, "compression_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) writeField33(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetBloomFilterFpChance() {
		err = oprot.WriteFieldBegin("bloom_filter_fp_chance", thrift.DOUBLE, 33)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "bloom_filter_fp_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.BloomFilterFpChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "bloom_filter_fp_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "bloom_filter_fp_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField34(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCaching() {
		err = oprot.WriteFieldBegin("caching", thrift.STRING, 34)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.Caching)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "caching", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) writeField37(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetDclocalReadRepairChance() {
		err = oprot.WriteFieldBegin("dclocal_read_repair_chance", thrift.DOUBLE, 37)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "dclocal_read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.DclocalReadRepairChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "dclocal_read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "dclocal_read_repair_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) TStructName() string {
	return "CfDef"
}

func (p *CfDef) ThriftName() string {
	return "CfDef"
}

func (p *CfDef) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	case 2:
		return p.Name
	case 3:
		return p.ColumnType
	case 5:
		return p.ComparatorType
	case 6:
		return p.SubcomparatorType
	case 8:
		return p.Comment
	case 12:
		return p.ReadRepairChance
	case 13:
		return p.ColumnMetadata
	case 14:
		return p.GcGraceSeconds
	case 15:
		return p.DefaultValidationClass
	case 16:
		return p.Id
	case 17:
		return p.MinCompactionThreshold
	case 18:
		return p.MaxCompactionThreshold
	case 24:
		return p.ReplicateOnWrite
	case 26:
		return p.KeyValidationClass
	case 28:
		return p.KeyAlias
	case 29:
		return p.CompactionStrategy
	case 30:
		return p.CompactionStrategyOptions
	case 32:
		return p.CompressionOptions
	case 33:
		return p.BloomFilterFpChance
	case 34:
		return p.Caching
	case 37:
		return p.DclocalReadRepairChance
	case 9:
		return p.RowCacheSize
	case 11:
		return p.KeyCacheSize
	case 19:
		return p.RowCacheSavePeriodInSeconds
	case 20:
		return p.KeyCacheSavePeriodInSeconds
	case 21:
		return p.MemtableFlushAfterMins
	case 22:
		return p.MemtableThroughputInMb
	case 23:
		return p.MemtableOperationsInMillions
	case 25:
		return p.MergeShardsChance
	case 27:
		return p.RowCacheProvider
	case 31:
		return p.RowCacheKeysToSave
	}
	return nil
}

func (p *CfDef) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
		thrift.NewTField("name", thrift.STRING, 2),
		thrift.NewTField("column_type", thrift.STRING, 3),
		thrift.NewTField("comparator_type", thrift.STRING, 5),
		thrift.NewTField("subcomparator_type", thrift.STRING, 6),
		thrift.NewTField("comment", thrift.STRING, 8),
		thrift.NewTField("read_repair_chance", thrift.DOUBLE, 12),
		thrift.NewTField("column_metadata", thrift.LIST, 13),
		thrift.NewTField("gc_grace_seconds", thrift.I32, 14),
		thrift.NewTField("default_validation_class", thrift.STRING, 15),
		thrift.NewTField("id", thrift.I32, 16),
		thrift.NewTField("min_compaction_threshold", thrift.I32, 17),
		thrift.NewTField("max_compaction_threshold", thrift.I32, 18),
		thrift.NewTField("replicate_on_write", thrift.BOOL, 24),
		thrift.NewTField("key_validation_class", thrift.STRING, 26),
		thrift.NewTField("key_alias", thrift.STRING, 28),
		thrift.NewTField("compaction_strategy", thrift.STRING, 29),
		thrift.NewTField("compaction_strategy_options", thrift.MAP, 30),
		thrift.NewTField("compression_options", thrift.MAP, 32),
		thrift.NewTField("bloom_filter_fp_chance", thrift.DOUBLE, 33),
		thrift.NewTField("caching", thrift.STRING, 34),
		thrift.NewTField("dclocal_read_repair_chance", thrift.DOUBLE, 37),
		thrift.NewTField("row_cache_size", thrift.DOUBLE, 9),
		thrift.NewTField("key_cache_size", thrift.DOUBLE, 11),
		thrift.NewTField("row_cache_save_period_in_seconds", thrift.I32, 19),
		thrift.NewTField("key_cache_save_period_in_seconds", thrift.I32, 20),
		thrift.NewTField("memtable_flush_after_mins", thrift.I32, 21),
		thrift.NewTField("memtable_throughput_in_mb", thrift.I32, 22),
		thrift.NewTField("memtable_operations_in_millions", thrift.DOUBLE, 23),
		thrift.NewTField("merge_shards_chance", thrift.DOUBLE, 25),
		thrift.NewTField("row_cache_provider", thrift.STRING, 27),
		thrift.NewTField("row_cache_keys_to_save", thrift.I32, 31),
	})
}

/**
 * Attributes:
 *  - Name
 *  - StrategyClass
 *  - StrategyOptions
 *  - ReplicationFactor: @deprecated ignored
 *  - CfDefs
 *  - DurableWrites
 */
type KsDef struct {
	Name              string            "name"               // 1
	StrategyClass     string            "strategy_class"     // 2
	StrategyOptions   map[string]string "strategy_options"   // 3
	ReplicationFactor int32             "replication_factor" // 4
	CfDefs            []*CfDef          "cf_defs"            // 5
	DurableWrites     bool              "durable_writes"     // 6
}

var tstructKsDef = thrift.NewTStruct("KsDef", []thrift.TField{
	thrift.NewTField("name", thrift.STRING, 1),
	thrift.NewTField("strategy_class", thrift.STRING, 2),
	thrift.NewTField("strategy_options", thrift.MAP, 3),
	thrift.NewTField("replication_factor", thrift.I32, 4),
	thrift.NewTField("cf_defs", thrift.LIST, 5),
	thrift.NewTField("durable_writes", thrift.BOOL, 6),
})

func (*KsDef) GetTStruct() thrift.TStruct { return tstructKsDef }
func NewKsDef() *KsDef {
	output := &KsDef{}
	{
		output.DurableWrites = true
	}
	return output
}

func (p *KsDef) IsSetStrategyOptions() bool {
	return p.StrategyOptions != nil && len(p.StrategyOptions) > 0
}

func (p *KsDef) IsSetReplicationFactor() bool {
	return p.ReplicationFactor != 0
}

func (p *KsDef) IsSetDurableWrites() bool {
	return p.DurableWrites != true
}

func (p *KsDef) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructKsDef.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructKsDef.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.LIST {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v351, err352 := iprot.ReadString()
	if err352 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err352)
	}
	p.Name = v351
	return err
}

func (p *KsDef) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v353, err354 := iprot.ReadString()
	if err354 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "strategy_class", p.ThriftName(), err354)
	}
	p.StrategyClass = v353
	return err
}

func (p *KsDef) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype358, _vtype359, _size357, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StrategyOptions", "", err)
	}
	_, _ = _ktype358, _vtype359
	p.StrategyOptions = make(map[string]string, _size357)
	for i := 0; i < _size357; i++ {
		v364, err365 := iprot.ReadString()
		if err365 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key362", "", err365)
		}
		_key362 := v364
		v366, err367 := iprot.ReadString()
		if err367 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val363", "", err367)
		}
		_val363 := v366
		p.StrategyOptions[_key362] = _val363
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *KsDef) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v368, err369 := iprot.ReadI32()
	if err369 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "replication_factor", p.ThriftName(), err369)
	}
	p.ReplicationFactor = v368
	return err
}

func (p *KsDef) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype375, _size372, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.CfDefs", "", err)
	}
	_ = _etype375
	p.CfDefs = make([]*CfDef, _size372, _size372)
	for i := 0; i < _size372; i++ {
		_elem377 := NewCfDef()
		err380 := _elem377.Read(iprot)
		if err380 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem377CfDef", err380)
		}
		p.CfDefs[i] = _elem377
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *KsDef) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v381, err382 := iprot.ReadBool()
	if err382 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "durable_writes", p.ThriftName(), err382)
	}
	p.DurableWrites = v381
	return err
}

func (p *KsDef) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KsDef")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Name)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("strategy_class", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "strategy_class", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.StrategyClass)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "strategy_class", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "strategy_class", p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StrategyOptions != nil {
		if p.IsSetStrategyOptions() {
			err = oprot.WriteFieldBegin("strategy_options", thrift.MAP, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "strategy_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StrategyOptions))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter383, Viter384 := range p.StrategyOptions {
				err = oprot.WriteString(Kiter383)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter383", "", err)
				}
				err = oprot.WriteString(Viter384)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter384", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "strategy_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KsDef) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetReplicationFactor() {
		err = oprot.WriteFieldBegin("replication_factor", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "replication_factor", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ReplicationFactor))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "replication_factor", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "replication_factor", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KsDef) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CfDefs != nil {
		err = oprot.WriteFieldBegin("cf_defs", thrift.LIST, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "cf_defs", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.CfDefs))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter385 := range p.CfDefs {
			err = Iter385.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CfDef", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "cf_defs", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KsDef) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetDurableWrites() {
		err = oprot.WriteFieldBegin("durable_writes", thrift.BOOL, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "durable_writes", p.ThriftName(), err)
		}
		err = oprot.WriteBool(bool(p.DurableWrites))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "durable_writes", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "durable_writes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KsDef) TStructName() string {
	return "KsDef"
}

func (p *KsDef) ThriftName() string {
	return "KsDef"
}

func (p *KsDef) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.StrategyClass
	case 3:
		return p.StrategyOptions
	case 4:
		return p.ReplicationFactor
	case 5:
		return p.CfDefs
	case 6:
		return p.DurableWrites
	}
	return nil
}

func (p *KsDef) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("strategy_class", thrift.STRING, 2),
		thrift.NewTField("strategy_options", thrift.MAP, 3),
		thrift.NewTField("replication_factor", thrift.I32, 4),
		thrift.NewTField("cf_defs", thrift.LIST, 5),
		thrift.NewTField("durable_writes", thrift.BOOL, 6),
	})
}

/**
 * Row returned from a CQL query
 * 
 * Attributes:
 *  - Key
 *  - Columns
 */
type CqlRow struct {
	Key     []byte    "key"     // 1
	Columns []*Column "columns" // 2
}

var tstructCqlRow = thrift.NewTStruct("CqlRow", []thrift.TField{
	thrift.NewTField("key", thrift.STRING, 1),
	thrift.NewTField("columns", thrift.LIST, 2),
})

func (*CqlRow) GetTStruct() thrift.TStruct { return tstructCqlRow }
func NewCqlRow() *CqlRow {
	output := &CqlRow{}
	{
	}
	return output
}

func (p *CqlRow) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCqlRow.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCqlRow.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlRow) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v386, err387 := iprot.ReadBinary()
	if err387 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err387)
	}
	p.Key = v386
	return err
}

func (p *CqlRow) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype393, _size390, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype393
	p.Columns = make([]*Column, _size390, _size390)
	for i := 0; i < _size390; i++ {
		_elem395 := NewColumn()
		err398 := _elem395.Read(iprot)
		if err398 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem395Column", err398)
		}
		p.Columns[i] = _elem395
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlRow) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlRow")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlRow) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlRow) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter399 := range p.Columns {
			err = Iter399.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Column", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlRow) TStructName() string {
	return "CqlRow"
}

func (p *CqlRow) ThriftName() string {
	return "CqlRow"
}

func (p *CqlRow) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.Columns
	}
	return nil
}

func (p *CqlRow) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - NameTypes
 *  - ValueTypes
 *  - DefaultNameType
 *  - DefaultValueType
 */
type CqlMetadata struct {
	NameTypes        map[string]string "name_types"         // 1
	ValueTypes       map[string]string "value_types"        // 2
	DefaultNameType  string            "default_name_type"  // 3
	DefaultValueType string            "default_value_type" // 4
}

var tstructCqlMetadata = thrift.NewTStruct("CqlMetadata", []thrift.TField{
	thrift.NewTField("name_types", thrift.MAP, 1),
	thrift.NewTField("value_types", thrift.MAP, 2),
	thrift.NewTField("default_name_type", thrift.STRING, 3),
	thrift.NewTField("default_value_type", thrift.STRING, 4),
})

func (*CqlMetadata) GetTStruct() thrift.TStruct { return tstructCqlMetadata }
func NewCqlMetadata() *CqlMetadata {
	output := &CqlMetadata{}
	{
	}
	return output
}

func (p *CqlMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCqlMetadata.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCqlMetadata.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.MAP {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.MAP {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype403, _vtype404, _size402, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.NameTypes", "", err)
	}
	_, _ = _ktype403, _vtype404
	p.NameTypes = make(map[string]string, _size402)
	for i := 0; i < _size402; i++ {
		v409, err410 := iprot.ReadString()
		if err410 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key407", "", err410)
		}
		_key407 := v409
		v411, err412 := iprot.ReadString()
		if err412 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val408", "", err412)
		}
		_val408 := v411
		p.NameTypes[_key407] = _val408
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CqlMetadata) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype416, _vtype417, _size415, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ValueTypes", "", err)
	}
	_, _ = _ktype416, _vtype417
	p.ValueTypes = make(map[string]string, _size415)
	for i := 0; i < _size415; i++ {
		v422, err423 := iprot.ReadString()
		if err423 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key420", "", err423)
		}
		_key420 := v422
		v424, err425 := iprot.ReadString()
		if err425 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val421", "", err425)
		}
		_val421 := v424
		p.ValueTypes[_key420] = _val421
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CqlMetadata) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v426, err427 := iprot.ReadString()
	if err427 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "default_name_type", p.ThriftName(), err427)
	}
	p.DefaultNameType = v426
	return err
}

func (p *CqlMetadata) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v428, err429 := iprot.ReadString()
	if err429 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "default_value_type", p.ThriftName(), err429)
	}
	p.DefaultValueType = v428
	return err
}

func (p *CqlMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlMetadata")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.NameTypes != nil {
		err = oprot.WriteFieldBegin("name_types", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name_types", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.NameTypes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter430, Viter431 := range p.NameTypes {
			err = oprot.WriteString(Kiter430)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter430", "", err)
			}
			err = oprot.WriteString(Viter431)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter431", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name_types", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlMetadata) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ValueTypes != nil {
		err = oprot.WriteFieldBegin("value_types", thrift.MAP, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "value_types", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ValueTypes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter432, Viter433 := range p.ValueTypes {
			err = oprot.WriteString(Kiter432)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter432", "", err)
			}
			err = oprot.WriteString(Viter433)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter433", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "value_types", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlMetadata) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("default_name_type", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "default_name_type", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.DefaultNameType)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "default_name_type", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "default_name_type", p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("default_value_type", thrift.STRING, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "default_value_type", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.DefaultValueType)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "default_value_type", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "default_value_type", p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) TStructName() string {
	return "CqlMetadata"
}

func (p *CqlMetadata) ThriftName() string {
	return "CqlMetadata"
}

func (p *CqlMetadata) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.NameTypes
	case 2:
		return p.ValueTypes
	case 3:
		return p.DefaultNameType
	case 4:
		return p.DefaultValueType
	}
	return nil
}

func (p *CqlMetadata) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name_types", thrift.MAP, 1),
		thrift.NewTField("value_types", thrift.MAP, 2),
		thrift.NewTField("default_name_type", thrift.STRING, 3),
		thrift.NewTField("default_value_type", thrift.STRING, 4),
	})
}

/**
 * Attributes:
 *  - TypeA1
 *  - Rows
 *  - Num
 *  - Schema
 */
type CqlResult struct {
	TypeA1 CqlResultType "type"   // 1
	Rows   []*CqlRow     "rows"   // 2
	Num    int32         "num"    // 3
	Schema *CqlMetadata  "schema" // 4
}

var tstructCqlResult = thrift.NewTStruct("CqlResult", []thrift.TField{
	thrift.NewTField("type", thrift.I32, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("num", thrift.I32, 3),
	thrift.NewTField("schema", thrift.STRUCT, 4),
})

func (*CqlResult) GetTStruct() thrift.TStruct { return tstructCqlResult }
func NewCqlResult() *CqlResult {
	output := &CqlResult{}
	{
		output.TypeA1 = math.MinInt32 - 1
	}
	return output
}

func (p *CqlResult) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *CqlResult) IsSetRows() bool {
	return len(p.Rows) > 0
}

func (p *CqlResult) IsSetNum() bool {
	return p.Num != 0
}

func (p *CqlResult) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *CqlResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCqlResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCqlResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //CqlResultType
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //CqlMetadata
			if fieldTypeId == thrift.STRUCT {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v434, err435 := iprot.ReadI32()
	if err435 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "type", p.ThriftName(), err435)
	}
	p.TypeA1 = CqlResultType(v434)
	return err
}

func (p *CqlResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype441, _size438, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype441
	p.Rows = make([]*CqlRow, _size438, _size438)
	for i := 0; i < _size438; i++ {
		_elem443 := NewCqlRow()
		err446 := _elem443.Read(iprot)
		if err446 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem443CqlRow", err446)
		}
		p.Rows[i] = _elem443
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v447, err448 := iprot.ReadI32()
	if err448 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "num", p.ThriftName(), err448)
	}
	p.Num = v447
	return err
}

func (p *CqlResult) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Schema = NewCqlMetadata()
	err451 := p.Schema.Read(iprot)
	if err451 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SchemaCqlMetadata", err451)
	}
	return err
}

func (p *CqlResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlResult")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTypeA1() {
		err = oprot.WriteFieldBegin("type", thrift.I32, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.TypeA1))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		if p.IsSetRows() {
			err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, len(p.Rows))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter452 := range p.Rows {
				err = Iter452.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("CqlRow", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetNum() {
		err = oprot.WriteFieldBegin("num", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "num", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Num))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "num", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "num", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlResult) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Schema != nil {
		if p.IsSetSchema() {
			err = oprot.WriteFieldBegin("schema", thrift.STRUCT, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "schema", p.ThriftName(), err)
			}
			err = p.Schema.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CqlMetadata", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "schema", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlResult) TStructName() string {
	return "CqlResult"
}

func (p *CqlResult) ThriftName() string {
	return "CqlResult"
}

func (p *CqlResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TypeA1
	case 2:
		return p.Rows
	case 3:
		return p.Num
	case 4:
		return p.Schema
	}
	return nil
}

func (p *CqlResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("type", thrift.I32, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("num", thrift.I32, 3),
		thrift.NewTField("schema", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - ItemId
 *  - Count
 *  - VariableTypes
 *  - VariableNames
 */
type CqlPreparedResult struct {
	ItemId        int32    "itemId"         // 1
	Count         int32    "count"          // 2
	VariableTypes []string "variable_types" // 3
	VariableNames []string "variable_names" // 4
}

var tstructCqlPreparedResult = thrift.NewTStruct("CqlPreparedResult", []thrift.TField{
	thrift.NewTField("itemId", thrift.I32, 1),
	thrift.NewTField("count", thrift.I32, 2),
	thrift.NewTField("variable_types", thrift.LIST, 3),
	thrift.NewTField("variable_names", thrift.LIST, 4),
})

func (*CqlPreparedResult) GetTStruct() thrift.TStruct { return tstructCqlPreparedResult }
func NewCqlPreparedResult() *CqlPreparedResult {
	output := &CqlPreparedResult{}
	{
	}
	return output
}

func (p *CqlPreparedResult) IsSetVariableTypes() bool {
	return len(p.VariableTypes) > 0
}

func (p *CqlPreparedResult) IsSetVariableNames() bool {
	return len(p.VariableNames) > 0
}

func (p *CqlPreparedResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCqlPreparedResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCqlPreparedResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v453, err454 := iprot.ReadI32()
	if err454 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "itemId", p.ThriftName(), err454)
	}
	p.ItemId = v453
	return err
}

func (p *CqlPreparedResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v455, err456 := iprot.ReadI32()
	if err456 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "count", p.ThriftName(), err456)
	}
	p.Count = v455
	return err
}

func (p *CqlPreparedResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype462, _size459, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.VariableTypes", "", err)
	}
	_ = _etype462
	p.VariableTypes = make([]string, _size459, _size459)
	for i := 0; i < _size459; i++ {
		v465, err466 := iprot.ReadString()
		if err466 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem464", "", err466)
		}
		_elem464 := v465
		p.VariableTypes[i] = _elem464
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlPreparedResult) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype472, _size469, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.VariableNames", "", err)
	}
	_ = _etype472
	p.VariableNames = make([]string, _size469, _size469)
	for i := 0; i < _size469; i++ {
		v475, err476 := iprot.ReadString()
		if err476 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem474", "", err476)
		}
		_elem474 := v475
		p.VariableNames[i] = _elem474
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlPreparedResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlPreparedResult")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("itemId", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ItemId))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.VariableTypes != nil {
		if p.IsSetVariableTypes() {
			err = oprot.WriteFieldBegin("variable_types", thrift.LIST, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "variable_types", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, len(p.VariableTypes))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter477 := range p.VariableTypes {
				err = oprot.WriteString(Iter477)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter477", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "variable_types", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlPreparedResult) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.VariableNames != nil {
		if p.IsSetVariableNames() {
			err = oprot.WriteFieldBegin("variable_names", thrift.LIST, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "variable_names", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, len(p.VariableNames))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter478 := range p.VariableNames {
				err = oprot.WriteString(Iter478)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter478", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "variable_names", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlPreparedResult) TStructName() string {
	return "CqlPreparedResult"
}

func (p *CqlPreparedResult) ThriftName() string {
	return "CqlPreparedResult"
}

func (p *CqlPreparedResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ItemId
	case 2:
		return p.Count
	case 3:
		return p.VariableTypes
	case 4:
		return p.VariableNames
	}
	return nil
}

func (p *CqlPreparedResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("itemId", thrift.I32, 1),
		thrift.NewTField("count", thrift.I32, 2),
		thrift.NewTField("variable_types", thrift.LIST, 3),
		thrift.NewTField("variable_names", thrift.LIST, 4),
	})
}

/**
 * Represents input splits used by hadoop ColumnFamilyRecordReaders
 * 
 * Attributes:
 *  - StartToken
 *  - EndToken
 *  - RowCount
 */
type CfSplit struct {
	StartToken string "start_token" // 1
	EndToken   string "end_token"   // 2
	RowCount   int64  "row_count"   // 3
}

var tstructCfSplit = thrift.NewTStruct("CfSplit", []thrift.TField{
	thrift.NewTField("start_token", thrift.STRING, 1),
	thrift.NewTField("end_token", thrift.STRING, 2),
	thrift.NewTField("row_count", thrift.I64, 3),
})

func (*CfSplit) GetTStruct() thrift.TStruct { return tstructCfSplit }
func NewCfSplit() *CfSplit {
	output := &CfSplit{}
	{
	}
	return output
}

func (p *CfSplit) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCfSplit.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCfSplit.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v479, err480 := iprot.ReadString()
	if err480 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start_token", p.ThriftName(), err480)
	}
	p.StartToken = v479
	return err
}

func (p *CfSplit) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v481, err482 := iprot.ReadString()
	if err482 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "end_token", p.ThriftName(), err482)
	}
	p.EndToken = v481
	return err
}

func (p *CfSplit) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v483, err484 := iprot.ReadI64()
	if err484 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "row_count", p.ThriftName(), err484)
	}
	p.RowCount = v483
	return err
}

func (p *CfSplit) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CfSplit")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("start_token", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.StartToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("end_token", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.EndToken)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("row_count", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "row_count", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.RowCount))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "row_count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "row_count", p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) TStructName() string {
	return "CfSplit"
}

func (p *CfSplit) ThriftName() string {
	return "CfSplit"
}

func (p *CfSplit) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartToken
	case 2:
		return p.EndToken
	case 3:
		return p.RowCount
	}
	return nil
}

func (p *CfSplit) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start_token", thrift.STRING, 1),
		thrift.NewTField("end_token", thrift.STRING, 2),
		thrift.NewTField("row_count", thrift.I64, 3),
	})
}

const String_VERSION = "19.35.0"

func init() {
}
