// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/apesternikov/gossie/src/cassandra (interfaces: ICassandra)

package mock_cassandra

import (
	gomock "code.google.com/p/gomock/gomock"
	cassandra "github.com/apesternikov/gossie/src/cassandra"
)

// Mock of ICassandra interface
type MockICassandra struct {
	ctrl     *gomock.Controller
	recorder *_MockICassandraRecorder
}

// Recorder for MockICassandra (not exported)
type _MockICassandraRecorder struct {
	mock *MockICassandra
}

func NewMockICassandra(ctrl *gomock.Controller) *MockICassandra {
	mock := &MockICassandra{ctrl: ctrl}
	mock.recorder = &_MockICassandraRecorder{mock}
	return mock
}

func (_m *MockICassandra) EXPECT() *_MockICassandraRecorder {
	return _m.recorder
}

func (_m *MockICassandra) Add(_param0 []byte, _param1 *cassandra.ColumnParent, _param2 *cassandra.CounterColumn, _param3 cassandra.ConsistencyLevel) (*cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "Add", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(*cassandra.UnavailableException)
	ret2, _ := ret[2].(*cassandra.TimedOutException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) Add(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) AtomicBatchMutate(_param0 map[string]map[string][]*cassandra.Mutation, _param1 cassandra.ConsistencyLevel) (*cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "AtomicBatchMutate", _param0, _param1)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(*cassandra.UnavailableException)
	ret2, _ := ret[2].(*cassandra.TimedOutException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) AtomicBatchMutate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AtomicBatchMutate", arg0, arg1)
}

func (_m *MockICassandra) BatchMutate(_param0 map[string]map[string][]*cassandra.Mutation, _param1 cassandra.ConsistencyLevel) (*cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "BatchMutate", _param0, _param1)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(*cassandra.UnavailableException)
	ret2, _ := ret[2].(*cassandra.TimedOutException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) BatchMutate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchMutate", arg0, arg1)
}

func (_m *MockICassandra) DescribeClusterName() (string, error) {
	ret := _m.ctrl.Call(_m, "DescribeClusterName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockICassandraRecorder) DescribeClusterName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeClusterName")
}

func (_m *MockICassandra) DescribeKeyspace(_param0 string) (*cassandra.KsDef, *cassandra.NotFoundException, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "DescribeKeyspace", _param0)
	ret0, _ := ret[0].(*cassandra.KsDef)
	ret1, _ := ret[1].(*cassandra.NotFoundException)
	ret2, _ := ret[2].(*cassandra.InvalidRequestException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) DescribeKeyspace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeKeyspace", arg0)
}

func (_m *MockICassandra) DescribeKeyspaces() ([]*cassandra.KsDef, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "DescribeKeyspaces")
	ret0, _ := ret[0].([]*cassandra.KsDef)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) DescribeKeyspaces() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeKeyspaces")
}

func (_m *MockICassandra) DescribePartitioner() (string, error) {
	ret := _m.ctrl.Call(_m, "DescribePartitioner")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockICassandraRecorder) DescribePartitioner() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePartitioner")
}

func (_m *MockICassandra) DescribeRing(_param0 string) ([]*cassandra.TokenRange, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "DescribeRing", _param0)
	ret0, _ := ret[0].([]*cassandra.TokenRange)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) DescribeRing(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeRing", arg0)
}

func (_m *MockICassandra) DescribeSchemaVersions() (map[string][]string, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "DescribeSchemaVersions")
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) DescribeSchemaVersions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSchemaVersions")
}

func (_m *MockICassandra) DescribeSnitch() (string, error) {
	ret := _m.ctrl.Call(_m, "DescribeSnitch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockICassandraRecorder) DescribeSnitch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSnitch")
}

func (_m *MockICassandra) DescribeSplits(_param0 string, _param1 string, _param2 string, _param3 int32) ([]string, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "DescribeSplits", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) DescribeSplits(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSplits", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) DescribeSplitsEx(_param0 string, _param1 string, _param2 string, _param3 int32) ([]*cassandra.CfSplit, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "DescribeSplitsEx", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*cassandra.CfSplit)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) DescribeSplitsEx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSplitsEx", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) DescribeTokenMap() (map[string]string, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "DescribeTokenMap")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) DescribeTokenMap() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeTokenMap")
}

func (_m *MockICassandra) DescribeVersion() (string, error) {
	ret := _m.ctrl.Call(_m, "DescribeVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockICassandraRecorder) DescribeVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVersion")
}

func (_m *MockICassandra) ExecuteCql3Query(_param0 []byte, _param1 cassandra.Compression, _param2 cassandra.ConsistencyLevel) (*cassandra.CqlResult, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "ExecuteCql3Query", _param0, _param1, _param2)
	ret0, _ := ret[0].(*cassandra.CqlResult)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(*cassandra.SchemaDisagreementException)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockICassandraRecorder) ExecuteCql3Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteCql3Query", arg0, arg1, arg2)
}

func (_m *MockICassandra) ExecuteCqlQuery(_param0 []byte, _param1 cassandra.Compression) (*cassandra.CqlResult, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "ExecuteCqlQuery", _param0, _param1)
	ret0, _ := ret[0].(*cassandra.CqlResult)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(*cassandra.SchemaDisagreementException)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockICassandraRecorder) ExecuteCqlQuery(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteCqlQuery", arg0, arg1)
}

func (_m *MockICassandra) ExecutePreparedCql3Query(_param0 int32, _param1 [][]byte, _param2 cassandra.ConsistencyLevel) (*cassandra.CqlResult, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "ExecutePreparedCql3Query", _param0, _param1, _param2)
	ret0, _ := ret[0].(*cassandra.CqlResult)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(*cassandra.SchemaDisagreementException)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockICassandraRecorder) ExecutePreparedCql3Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecutePreparedCql3Query", arg0, arg1, arg2)
}

func (_m *MockICassandra) ExecutePreparedCqlQuery(_param0 int32, _param1 [][]byte) (*cassandra.CqlResult, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "ExecutePreparedCqlQuery", _param0, _param1)
	ret0, _ := ret[0].(*cassandra.CqlResult)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(*cassandra.SchemaDisagreementException)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockICassandraRecorder) ExecutePreparedCqlQuery(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecutePreparedCqlQuery", arg0, arg1)
}

func (_m *MockICassandra) Get(_param0 []byte, _param1 *cassandra.ColumnPath, _param2 cassandra.ConsistencyLevel) (*cassandra.ColumnOrSuperColumn, *cassandra.InvalidRequestException, *cassandra.NotFoundException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1, _param2)
	ret0, _ := ret[0].(*cassandra.ColumnOrSuperColumn)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.NotFoundException)
	ret3, _ := ret[3].(*cassandra.UnavailableException)
	ret4, _ := ret[4].(*cassandra.TimedOutException)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockICassandraRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockICassandra) GetCount(_param0 []byte, _param1 *cassandra.ColumnParent, _param2 *cassandra.SlicePredicate, _param3 cassandra.ConsistencyLevel) (int32, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "GetCount", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockICassandraRecorder) GetCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCount", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) GetIndexedSlices(_param0 *cassandra.ColumnParent, _param1 *cassandra.IndexClause, _param2 *cassandra.SlicePredicate, _param3 cassandra.ConsistencyLevel) ([]*cassandra.KeySlice, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "GetIndexedSlices", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*cassandra.KeySlice)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockICassandraRecorder) GetIndexedSlices(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIndexedSlices", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) GetPagedSlice(_param0 string, _param1 *cassandra.KeyRange, _param2 []byte, _param3 cassandra.ConsistencyLevel) ([]*cassandra.KeySlice, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "GetPagedSlice", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*cassandra.KeySlice)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockICassandraRecorder) GetPagedSlice(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPagedSlice", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) GetRangeSlices(_param0 *cassandra.ColumnParent, _param1 *cassandra.SlicePredicate, _param2 *cassandra.KeyRange, _param3 cassandra.ConsistencyLevel) ([]*cassandra.KeySlice, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "GetRangeSlices", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*cassandra.KeySlice)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockICassandraRecorder) GetRangeSlices(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRangeSlices", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) GetSlice(_param0 []byte, _param1 *cassandra.ColumnParent, _param2 *cassandra.SlicePredicate, _param3 cassandra.ConsistencyLevel) ([]*cassandra.ColumnOrSuperColumn, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "GetSlice", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*cassandra.ColumnOrSuperColumn)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockICassandraRecorder) GetSlice(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSlice", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) Insert(_param0 []byte, _param1 *cassandra.ColumnParent, _param2 *cassandra.Column, _param3 cassandra.ConsistencyLevel) (*cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "Insert", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(*cassandra.UnavailableException)
	ret2, _ := ret[2].(*cassandra.TimedOutException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) Insert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Insert", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) Login(_param0 *cassandra.AuthenticationRequest) (*cassandra.AuthenticationException, *cassandra.AuthorizationException, error) {
	ret := _m.ctrl.Call(_m, "Login", _param0)
	ret0, _ := ret[0].(*cassandra.AuthenticationException)
	ret1, _ := ret[1].(*cassandra.AuthorizationException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) Login(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Login", arg0)
}

func (_m *MockICassandra) MultigetCount(_param0 [][]byte, _param1 *cassandra.ColumnParent, _param2 *cassandra.SlicePredicate, _param3 cassandra.ConsistencyLevel) (map[string]int32, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "MultigetCount", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(map[string]int32)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockICassandraRecorder) MultigetCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MultigetCount", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) MultigetSlice(_param0 [][]byte, _param1 *cassandra.ColumnParent, _param2 *cassandra.SlicePredicate, _param3 cassandra.ConsistencyLevel) (map[string][]*cassandra.ColumnOrSuperColumn, *cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "MultigetSlice", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(map[string][]*cassandra.ColumnOrSuperColumn)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.UnavailableException)
	ret3, _ := ret[3].(*cassandra.TimedOutException)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockICassandraRecorder) MultigetSlice(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MultigetSlice", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) PrepareCql3Query(_param0 []byte, _param1 cassandra.Compression) (*cassandra.CqlPreparedResult, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "PrepareCql3Query", _param0, _param1)
	ret0, _ := ret[0].(*cassandra.CqlPreparedResult)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) PrepareCql3Query(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrepareCql3Query", arg0, arg1)
}

func (_m *MockICassandra) PrepareCqlQuery(_param0 []byte, _param1 cassandra.Compression) (*cassandra.CqlPreparedResult, *cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "PrepareCqlQuery", _param0, _param1)
	ret0, _ := ret[0].(*cassandra.CqlPreparedResult)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockICassandraRecorder) PrepareCqlQuery(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrepareCqlQuery", arg0, arg1)
}

func (_m *MockICassandra) Remove(_param0 []byte, _param1 *cassandra.ColumnPath, _param2 int64, _param3 cassandra.ConsistencyLevel) (*cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "Remove", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(*cassandra.UnavailableException)
	ret2, _ := ret[2].(*cassandra.TimedOutException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) Remove(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Remove", arg0, arg1, arg2, arg3)
}

func (_m *MockICassandra) RemoveCounter(_param0 []byte, _param1 *cassandra.ColumnPath, _param2 cassandra.ConsistencyLevel) (*cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "RemoveCounter", _param0, _param1, _param2)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(*cassandra.UnavailableException)
	ret2, _ := ret[2].(*cassandra.TimedOutException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) RemoveCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveCounter", arg0, arg1, arg2)
}

func (_m *MockICassandra) SetCqlVersion(_param0 string) (*cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "SetCqlVersion", _param0)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockICassandraRecorder) SetCqlVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCqlVersion", arg0)
}

func (_m *MockICassandra) SetKeyspace(_param0 string) (*cassandra.InvalidRequestException, error) {
	ret := _m.ctrl.Call(_m, "SetKeyspace", _param0)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockICassandraRecorder) SetKeyspace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyspace", arg0)
}

func (_m *MockICassandra) SystemAddColumnFamily(_param0 *cassandra.CfDef) (string, *cassandra.InvalidRequestException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "SystemAddColumnFamily", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.SchemaDisagreementException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) SystemAddColumnFamily(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SystemAddColumnFamily", arg0)
}

func (_m *MockICassandra) SystemAddKeyspace(_param0 *cassandra.KsDef) (string, *cassandra.InvalidRequestException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "SystemAddKeyspace", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.SchemaDisagreementException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) SystemAddKeyspace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SystemAddKeyspace", arg0)
}

func (_m *MockICassandra) SystemDropColumnFamily(_param0 string) (string, *cassandra.InvalidRequestException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "SystemDropColumnFamily", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.SchemaDisagreementException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) SystemDropColumnFamily(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SystemDropColumnFamily", arg0)
}

func (_m *MockICassandra) SystemDropKeyspace(_param0 string) (string, *cassandra.InvalidRequestException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "SystemDropKeyspace", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.SchemaDisagreementException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) SystemDropKeyspace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SystemDropKeyspace", arg0)
}

func (_m *MockICassandra) SystemUpdateColumnFamily(_param0 *cassandra.CfDef) (string, *cassandra.InvalidRequestException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "SystemUpdateColumnFamily", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.SchemaDisagreementException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) SystemUpdateColumnFamily(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SystemUpdateColumnFamily", arg0)
}

func (_m *MockICassandra) SystemUpdateKeyspace(_param0 *cassandra.KsDef) (string, *cassandra.InvalidRequestException, *cassandra.SchemaDisagreementException, error) {
	ret := _m.ctrl.Call(_m, "SystemUpdateKeyspace", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*cassandra.InvalidRequestException)
	ret2, _ := ret[2].(*cassandra.SchemaDisagreementException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) SystemUpdateKeyspace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SystemUpdateKeyspace", arg0)
}

func (_m *MockICassandra) TraceNextQuery() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "TraceNextQuery")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockICassandraRecorder) TraceNextQuery() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TraceNextQuery")
}

func (_m *MockICassandra) Truncate(_param0 string) (*cassandra.InvalidRequestException, *cassandra.UnavailableException, *cassandra.TimedOutException, error) {
	ret := _m.ctrl.Call(_m, "Truncate", _param0)
	ret0, _ := ret[0].(*cassandra.InvalidRequestException)
	ret1, _ := ret[1].(*cassandra.UnavailableException)
	ret2, _ := ret[2].(*cassandra.TimedOutException)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockICassandraRecorder) Truncate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0)
}
